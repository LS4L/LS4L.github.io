!function(t){"use strict";class i{constructor(t=0,i=0){this.x=t,this.y=i}add(t){return new i(this.x+t.x,this.y+t.y)}sub(t){return new i(this.x-t.x,this.y-t.y)}mul(t){return new i(this.x*t,this.y*t)}div(t){return new i(this.x/t,this.y/t)}neg(){return new i(-this.x,-this.y)}dot(t){return this.x*t.x+this.y*t.y}cross(t){return this.x*t.y-this.y*t.x}len2(){return this.x*this.x+this.y*this.y}len(){return Math.sqrt(this.len2())}normalize(){return this.div(this.len())}lerp(t,r){return new i(this.x+(t.x-this.x)*r,this.y+(t.y-this.y)*r)}}class r{constructor(t=0,i=0,r=0){this.x=t,this.y=i,this.z=r}add(t){return new r(this.x+t.x,this.y+t.y,this.z+t.z)}sub(t){return new r(this.x-t.x,this.y-t.y,this.z-t.z)}mul(t){return new r(this.x*t,this.y*t,this.z*t)}div(t){return 0!=t?new r(this.x/t,this.y/t,this.z/t):new r}neg(){return new r(-this.x,-this.y,-this.z)}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}cross(t){return new r(this.y*t.z-this.z*t.y,this.z*t.x-this.x*t.z,this.x*t.y-this.y*t.x)}len2(){return this.x*this.x+this.y*this.y+this.z*this.z}len(){return Math.sqrt(this.len2())}normalize(){return this.div(this.len())}lerp(t,i){return new r(this.x+(t.x-this.x)*i,this.y+(t.y-this.y)*i,this.z+(t.z-this.z)*i)}mulMatr(t){let i=this.x*t[0][3]+this.y*t[1][3]+this.z*t[2][3]+t[3][3];return new r((this.x*t[0][0]+this.y*t[1][0]+this.z*t[2][0]+t[3][0])/i,(this.x*t[0][1]+this.y*t[1][1]+this.z*t[2][1]+t[3][1])/i,(this.x*t[0][2]+this.y*t[1][2]+this.z*t[2][2]+t[3][2])/i)}angle(t){return 0==t.len2()||0==this.len2()?0:Math.acos(this.dot(t)/(this.len()*t.len()))}get xxx(){return new r(this.x,this.x,this.x)}get yyy(){return new r(this.y,this.y,this.y)}get zzz(){return new r(this.z,this.z,this.z)}}class e{constructor(t=0,i=0,r=0,e=0){this.x=t,this.y=i,this.z=r,this.w=e}add(t){return new e(this.x+t.x,this.y+t.y,this.z+t.z,this.w+t.w)}sub(t){return new e(this.x-t.x,this.y-t.y,this.z-t.z,this.w-t.w)}mul(t){return new e(this.x*t,this.y*t,this.z*t,this.w*t)}div(t){return new e(this.x/t,this.y/t,this.z/t,this.w/t)}neg(){return new e(-this.x,-this.y,-this.z,-this.w)}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z+this.w*this.w}len2(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}len(){return Math.sqrt(this.len2())}normalize(){return this.div(this.len())}lerp(t,i){return new r(this.x+(t.x-this.x)*i,this.y+(t.y-this.y)*i,this.z+(t.z-this.z)*i,this.w+(t.w-this.w)*i)}}class s{constructor(t=[[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]]){this[0]=[],this[1]=[],this[2]=[],this[3]=[],this[0][0]=t[0][0],this[0][1]=t[0][1],this[0][2]=t[0][2],this[0][3]=t[0][3],this[1][0]=t[1][0],this[1][1]=t[1][1],this[1][2]=t[1][2],this[1][3]=t[1][3],this[2][0]=t[2][0],this[2][1]=t[2][1],this[2][2]=t[2][2],this[2][3]=t[2][3],this[3][0]=t[3][0],this[3][1]=t[3][1],this[3][2]=t[3][2],this[3][3]=t[3][3]}a(){return[[this[0][0],this[0][1],this[0][2],this[0][3]],[this[1][0],this[1][1],this[1][2],this[1][3]],[this[2][0],this[2][1],this[2][2],this[2][3]],[this[3][0],this[3][1],this[3][2],this[3][3]]]}translate(t){return new s([[1,0,0,0],[0,1,0,0],[0,0,1,0],[t.x,t.y,t.z,1]])}scale(t){return new s([[t.x,0,0,0],[0,t.y,0,0],[0,0,t.z,0],[0,0,0,1]])}rotateX(t){let i=new s,r=t/180*Math.PI,e=Math.sin(r),n=Math.cos(r);return i[1][1]=n,i[2][2]=n,i[1][2]=e,i[2][1]=-e,i}rotateY(t){let i=new s,r=t/180*Math.PI,e=Math.sin(r),n=Math.cos(r);return i[0][0]=n,i[2][2]=n,i[0][2]=-e,i[2][0]=e,i}rotateZ(t){let i=new s,r=t/180*Math.PI,e=Math.sin(r),n=Math.cos(r);return i[0][0]=n,i[1][1]=n,i[0][1]=e,i[1][0]=-e,i}rotate(t,i){let r=t/180*Math.PI,e=Math.sin(r),n=Math.cos(r);return new s([[n+i.x*i.x*(1-n),i.x*i.y*(1-n)+i.z*e,i.x*i.z*(1-n)-i.y*e,0],[i.y*i.x*(1-n)-i.z*e,n+i.y*i.y*(1-n),i.y*i.z*(1-n)+i.x*e,0],[i.z*i.x*(1-n)+i.y*e,i.z*i.y*(1-n)-i.x*e,n+i.z*i.z*(1-n),0],[0,0,0,1]])}transpose(){let t=new s;return t[0][0]=this[0][0],t[0][1]=this[1][0],t[0][2]=this[2][0],t[0][3]=this[3][0],t[1][0]=this[0][1],t[1][1]=this[1][1],t[1][2]=this[2][1],t[1][3]=this[3][1],t[2][0]=this[0][2],t[2][1]=this[1][2],t[2][2]=this[2][2],t[2][3]=this[3][2],t[3][0]=this[0][3],t[3][1]=this[1][3],t[3][2]=this[2][3],t[3][3]=this[3][3],t}determ3x3(t,i,r,e,s,n,o,a,h){return t*s*h+i*n*o+r*e*a-t*n*a-i*e*h-r*s*o}determ(){return+this[0][0]*this.determ3x3(this[1][1],this[1][2],this[1][3],this[2][1],this[2][2],this[2][3],this[3][1],this[3][2],this[3][3])+-this[0][1]*this.determ3x3(this[1][0],this[1][2],this[1][3],this[2][0],this[2][2],this[2][3],this[3][0],this[3][2],this[3][3])+ +this[0][2]*this.determ3x3(this[1][0],this[1][1],this[1][3],this[2][0],this[2][1],this[2][3],this[3][0],this[3][1],this[3][3])+-this[0][3]*this.determ3x3(this[1][0],this[1][1],this[1][2],this[2][0],this[2][1],this[2][2],this[3][0],this[3][1],this[3][2])}inverse(){let t=this.determ(),i=new s;return 0==t?new s:(i[0][0]=+this.determ3x3(this[1][1],this[1][2],this[1][3],this[2][1],this[2][2],this[2][3],this[3][1],this[3][2],this[3][3])/t,i[1][0]=-this.determ3x3(this[1][0],this[1][2],this[1][3],this[2][0],this[2][2],this[2][3],this[3][0],this[3][2],this[3][3])/t,i[2][0]=+this.determ3x3(this[1][0],this[1][1],this[1][3],this[2][0],this[2][1],this[2][3],this[3][0],this[3][1],this[3][3])/t,i[3][0]=-this.determ3x3(this[1][0],this[1][1],this[1][2],this[2][0],this[2][1],this[2][2],this[3][0],this[3][1],this[3][2])/t,i[0][1]=-this.determ3x3(this[0][1],this[0][2],this[0][3],this[2][1],this[2][2],this[2][3],this[3][1],this[3][2],this[3][3])/t,i[1][1]=+this.determ3x3(this[0][0],this[0][2],this[0][3],this[2][0],this[2][2],this[2][3],this[3][0],this[3][2],this[3][3])/t,i[2][1]=-this.determ3x3(this[0][0],this[0][1],this[0][3],this[2][0],this[2][1],this[2][3],this[3][0],this[3][1],this[3][3])/t,i[3][1]=+this.determ3x3(this[0][0],this[0][1],this[0][2],this[2][0],this[2][1],this[2][2],this[3][0],this[3][1],this[3][2])/t,i[0][2]=+this.determ3x3(this[0][1],this[0][2],this[0][3],this[1][1],this[1][2],this[1][3],this[3][1],this[3][2],this[3][3])/t,i[1][2]=-this.determ3x3(this[0][0],this[0][2],this[0][3],this[1][0],this[1][2],this[1][3],this[3][0],this[3][2],this[3][3])/t,i[2][2]=+this.determ3x3(this[0][0],this[0][1],this[0][3],this[1][0],this[1][1],this[1][3],this[3][0],this[3][1],this[3][3])/t,i[3][2]=-this.determ3x3(this[0][0],this[0][1],this[0][2],this[1][0],this[1][1],this[1][2],this[3][0],this[3][1],this[3][2])/t,i[0][3]=-this.determ3x3(this[0][1],this[0][2],this[0][3],this[1][1],this[1][2],this[1][3],this[2][1],this[2][2],this[2][3])/t,i[1][3]=+this.determ3x3(this[0][0],this[0][2],this[0][3],this[1][0],this[1][2],this[1][3],this[2][0],this[2][2],this[2][3])/t,i[2][3]=-this.determ3x3(this[0][0],this[0][1],this[0][3],this[1][0],this[1][1],this[1][3],this[2][0],this[2][1],this[2][3])/t,i[3][3]=+this.determ3x3(this[0][0],this[0][1],this[0][2],this[1][0],this[1][1],this[1][2],this[2][0],this[2][1],this[2][2])/t,i)}add(t){let i=new s;return i[0][0]=this[0][0]+t[0][0],i[0][1]=this[0][1]+t[0][1],i[0][2]=this[0][2]+t[0][2],i[0][3]=this[0][3]+t[0][3],i[1][0]=this[1][0]+t[1][0],i[1][1]=this[1][1]+t[1][1],i[1][2]=this[1][2]+t[1][2],i[1][3]=this[1][3]+t[1][3],i[2][0]=this[2][0]+t[2][0],i[2][1]=this[2][1]+t[2][1],i[2][2]=this[2][2]+t[2][2],i[2][3]=this[2][3]+t[2][3],i[3][0]=this[3][0]+t[3][0],i[3][1]=this[3][1]+t[3][1],i[3][2]=this[3][2]+t[3][2],i[3][3]=this[3][3]+t[3][3],i}mul(t){let i=new s;return i[0][0]=this[0][0]*t[0][0]+this[0][1]*t[1][0]+this[0][2]*t[2][0]+this[0][3]*t[3][0],i[0][1]=this[0][0]*t[0][1]+this[0][1]*t[1][1]+this[0][2]*t[2][1]+this[0][3]*t[3][1],i[0][2]=this[0][0]*t[0][2]+this[0][1]*t[1][2]+this[0][2]*t[2][2]+this[0][3]*t[3][2],i[0][3]=this[0][0]*t[0][3]+this[0][1]*t[1][3]+this[0][2]*t[2][3]+this[0][3]*t[3][3],i[1][0]=this[1][0]*t[0][0]+this[1][1]*t[1][0]+this[1][2]*t[2][0]+this[1][3]*t[3][0],i[1][1]=this[1][0]*t[0][1]+this[1][1]*t[1][1]+this[1][2]*t[2][1]+this[1][3]*t[3][1],i[1][2]=this[1][0]*t[0][2]+this[1][1]*t[1][2]+this[1][2]*t[2][2]+this[1][3]*t[3][2],i[1][3]=this[1][0]*t[0][3]+this[1][1]*t[1][3]+this[1][2]*t[2][3]+this[1][3]*t[3][3],i[2][0]=this[2][0]*t[0][0]+this[2][1]*t[1][0]+this[2][2]*t[2][0]+this[2][3]*t[3][0],i[2][1]=this[2][0]*t[0][1]+this[2][1]*t[1][1]+this[2][2]*t[2][1]+this[2][3]*t[3][1],i[2][2]=this[2][0]*t[0][2]+this[2][1]*t[1][2]+this[2][2]*t[2][2]+this[2][3]*t[3][2],i[2][3]=this[2][0]*t[0][3]+this[2][1]*t[1][3]+this[2][2]*t[2][3]+this[2][3]*t[3][3],i[3][0]=this[3][0]*t[0][0]+this[3][1]*t[1][0]+this[3][2]*t[2][0]+this[3][3]*t[3][0],i[3][1]=this[3][0]*t[0][1]+this[3][1]*t[1][1]+this[3][2]*t[2][1]+this[3][3]*t[3][1],i[3][2]=this[3][0]*t[0][2]+this[3][1]*t[1][2]+this[3][2]*t[2][2]+this[3][3]*t[3][2],i[3][3]=this[3][0]*t[0][3]+this[3][1]*t[1][3]+this[3][2]*t[2][3]+this[3][3]*t[3][3],i}view(t,i,r){let e=i.sub(t).normalize(),n=e.cross(r).normalize(),o=n.cross(e);return new s([[n.x,o.x,-e.x,0],[n.y,o.y,-e.y,0],[n.z,o.z,-e.z,0],[-t.dot(n),-t.dot(o),t.dot(e),1]])}ortho(t,i,r,e,n,o){return new s([[2/(i-t),0,0,0],[0,2/(e-r),0,0],[0,0,-2/(o-n),0],[-(i+t)/(i-t),-(e+r)/(e-r),-(o+n)/(o-n),1]])}frustum(t,i,r,e,n,o){return new s([[2*n/(i-t),0,0,0],[0,2*n/(e-r),0,0],[(i+t)/(i-t),(e+r)/(e-r),-(o+n)/(o-n),-1],[0,0,-2*n*o/(o-n),0]])}}let n=[],o={x:0,y:0,savedX:0,savedY:0,zoom:1,dx:0,dy:0,dz:0,isDown:!1,isRDown:!1},a=new class{constructor(){this.projSize=.1,this.projDist=.1,this.projFarClip=18e3,this.frameW=30,this.frameH=30,this.matrView=new s,this.matrProj=new s,this.matrVP=new s,this.setDef()}camSet(t,i,e){let n=new s;return this.matrView=n.view(t,i,e),this.loc=t,this.at=i,this.dir=new r(-this.matrView[0][2],-this.matrView[1][2],-this.matrView[2][2]),this.up=new r(this.matrView[0][1],this.matrView[1][1],this.matrView[2][1]),this.right=new r(this.matrView[0][0],this.matrView[1][0],this.matrView[2][0]),this.matrVP=this.matrView.mul(this.matrProj),this}setProj(t,i,r){let e,n;e=n=t,this.projDist=i,this.projSize=t,this.projFarClip=r,this.frameW>this.frameH?e*=this.FrameW/this.frameH:n*=this.frameH/this.frameW;let o=new s;return this.matrProj=o.frustum(-e/2,e/2,-n/2,n/2,i,r),this.matrVP=this.matrView.mul(this.matrProj),this}rotate(t,i){let r,e,n,o=new s;return o=o.rotate(i,t),r=this.loc.mulMatr(o),e=this.up.mulMatr(o),n=this.at.mulMatr(o),this.camSet(r,n,e),this}setSize(t,i){return this.frameW=t,this.frameH=i,this.setProj(this.projSize,this.projDist,this.projFarClip),this}setDef(){return this.loc=new r(0,0,1),this.at=new r(0,0,0),this.dir=new r(0,0,-1),this.up=new r(0,1,0),this.right=new r(1,0,0),this.projDist=.1,this.projSize=.1,this.projFarClip=1e4,this.frameW=30,this.frameH=30,this.camSet(this.loc,this.at,this.up),this.setProj(this.projSize,this.projDist,this.projFarClip),this.setSize(this.frameW,this.frameH),this}};function h(t){o.dx=t.pageX-o.x,o.dy=t.pageY-o.y,o.x=t.pageX,o.y=t.pageY}function l(t){0==t.button?o.isDown=!0:2==t.button&&(o.isRDown=!0)}function g(t){0==t.button?o.isDown=!1:2==t.button&&(o.isRDown=!1)}a.camSet(new r(18,10,10),new r(0,8,-5),new r(0,1,0)),a.camSet(new r(62,-16,67),new r(28,39,-6),new r(0,1,0));let m=.05,f=1,c=10;function u(){!function(){a.loc=a.loc.add(a.dir.mul(.01*-o.dz));let t=new s;a.loc=a.loc.mulMatr(t.rotate(o.isDown*m*o.dx,a.up.neg())),a.loc=a.loc.mulMatr(t.rotate(o.isDown*m*o.dy,a.right.neg())),a.at=a.at.sub(a.loc),a.at=a.at.mulMatr(t.rotate(o.isRDown*m*o.dx,a.up)),a.at=a.at.add(a.loc),a.right=a.right.mulMatr(t.rotateY(o.isRDown*m*o.dx)),a.at=a.at.sub(a.loc),a.at=a.at.mulMatr(t.rotate(o.isRDown*m*o.dy,a.right)),a.at=a.at.add(a.loc),f+=n.Shift?c:0,a.loc=a.loc.add(a.dir.mul(!!n.w*!n.Control*f)).sub(a.dir.mul(!!n.s*!n.Control*f)).sub(a.right.mul(!!n.a*!n.Control*f)).add(a.right.mul(!!n.d*!n.Control*f)),a.at=a.at.add(a.dir.mul(!!n.w*!n.Control*f)).sub(a.dir.mul(!!n.s*!n.Control*f)).sub(a.right.mul(!!n.a*!n.Control*f)).add(a.right.mul(!!n.d*!n.Control*f)),f-=n.Shift?c:0}()}function d(t,i=null){let e=[],s=0;null==i&&(i=[...Array(t.length/3).keys()]);for(let i=0;i<t.length;i+=3)e[s++]=new r(t[i],t[i+1],t[i+2]);let n=[];for(let t=0;t<e.length;t++)n[t]=new r;for(let t=0;t<i.length;t+=3){let r=e[i[t]],s=e[i[t+1]],o=e[i[t+2]],a=s.sub(r).cross(o.sub(r)).normalize();n[i[t]]=n[i[t]].add(a),n[i[t+1]]=n[i[t+1]].add(a),n[i[t+2]]=n[i[t+2]].add(a)}for(let t=0;t<e.length;t++)n[t]=n[t].normalize();s=0;let o=[];for(let t=0;t<n.length;t++)o[s++]=n[t].x,o[s++]=n[t].y,o[s++]=n[t].z;return o}const w=[];class y{constructor(t,i,r){this.vs=t,this.fs=i,this.shaderProgram=r}}async function x(i=null){let r,e,s;if(null==i)return w[0];function n(t,i,r){const e=t.createShader(i);return t.shaderSource(e,r),t.compileShader(e,r),e}const o=fetch(`bin/shaders/${i}/vert.glsl`).then((t=>t.text())).then((t=>{r=t})),a=fetch(`bin/shaders/${i}/frag.glsl`).then((t=>t.text())).then((t=>{e=t})),h=Promise.all([o,a]);return await h.then((()=>{const i=n(t.gl,t.gl.VERTEX_SHADER,r),o=n(t.gl,t.gl.FRAGMENT_SHADER,e);let a=t.gl.createProgram();if(t.gl.attachShader(a,i),t.gl.attachShader(a,o),t.gl.linkProgram(a),!t.gl.getProgramParameter(a,t.gl.LINK_STATUS)){const i=t.gl.getProgramInfoLog(a);console.log(i)}s=new y(r,e,a),w.push(s)})),s}function A(i,r,e=null,s=null){let n=t.gl.getAttribLocation(i.shaderProgram,"in_pos");const o=t.gl.createBuffer();t.gl.bindBuffer(t.gl.ARRAY_BUFFER,o),t.gl.bufferData(t.gl.ARRAY_BUFFER,r,t.gl.STATIC_DRAW),t.gl.enableVertexAttribArray(n),t.gl.vertexAttribPointer(n,3,t.gl.FLOAT,!1,0,0);const a=t.gl.getAttribLocation(i.shaderProgram,"normal"),h=t.gl.createBuffer();if(t.gl.bindBuffer(t.gl.ARRAY_BUFFER,h),null==s&&(s=new Float32Array(d(r,e))),t.gl.bufferData(t.gl.ARRAY_BUFFER,s,t.gl.STATIC_DRAW),t.gl.enableVertexAttribArray(a),t.gl.vertexAttribPointer(a,3,t.gl.FLOAT,!1,0,0),null!=e){const i=t.gl.createBuffer();t.gl.bindBuffer(t.gl.ELEMENT_ARRAY_BUFFER,i),t.gl.bufferData(t.gl.ELEMENT_ARRAY_BUFFER,e,t.gl.STATIC_DRAW)}}const P=new Float32Array([1,1,-1,1,1,1,1,-1,1,1,-1,-1,-1,1,1,-1,1,-1,-1,-1,-1,-1,-1,1,-1,1,1,1,1,1,1,1,-1,-1,1,-1,-1,-1,-1,1,-1,-1,1,-1,1,-1,-1,1,1,1,1,-1,1,1,-1,-1,1,1,-1,1,-1,1,-1,1,1,-1,1,-1,-1,-1,-1,-1]),L=new Uint16Array([0,1,2,0,2,3,4,5,6,4,6,7,8,9,10,8,10,11,12,13,14,12,14,15,16,17,18,16,18,19,20,21,22,20,22,23]);let U,p;function E(){t.gl.useProgram(p.shaderProgram);let i=t.gl.getUniformLocation(p.shaderProgram,"time");const r=t.gl.getUniformLocation(p.shaderProgram,"projection"),e=t.gl.getUniformLocation(p.shaderProgram,"modelView"),n=t.gl.getUniformLocation(p.shaderProgram,"world");t.gl.bindVertexArray(U),t.gl.uniformMatrix4fv(r,!1,new Float32Array(a.matrProj.a().join().split(",")));let o=new s;t.gl.uniformMatrix4fv(n,!1,new Float32Array(o.a().join().split(","))),t.gl.uniformMatrix4fv(e,!1,new Float32Array(a.matrView.a().join().split(","))),t.gl.uniform1f(i,Date.now());const h=t.gl.getUniformLocation(p.shaderProgram,"lightDir"),l=t.gl.getUniformLocation(p.shaderProgram,"camLoc");t.gl.uniform3f(h,1,2,3),t.gl.uniform3f(l,a.loc.x,a.loc.y,a.loc.z);const g=t.gl.getUniformLocation(p.shaderProgram,"ka"),m=t.gl.getUniformLocation(p.shaderProgram,"kd"),f=t.gl.getUniformLocation(p.shaderProgram,"ks"),c=t.gl.getUniformLocation(p.shaderProgram,"ph");t.gl.uniform3f(g,.0215,.1745,.0215),t.gl.uniform3f(m,.07568,.61424,.07568),t.gl.uniform3f(f,.633,.727811,.633),t.gl.uniform1f(c,76.8),t.gl.drawElements(t.gl.TRIANGLES,36,t.gl.UNSIGNED_SHORT,0)}async function b(){p=await x("rainbow"),U=t.gl.createVertexArray(),t.gl.bindVertexArray(U),A(p,P,L),t.gl.bindVertexArray(null)}const R=new Float32Array([1,1,1,1,-1,-1,-1,1,-1,-1,-1,1]),z=new Uint16Array([0,3,1,0,2,3,0,1,2,3,2,1]);let D,F;function v(){t.gl.useProgram(F.shaderProgram);let i=t.gl.getUniformLocation(F.shaderProgram,"time");const e=t.gl.getUniformLocation(F.shaderProgram,"projection"),n=t.gl.getUniformLocation(F.shaderProgram,"modelView"),o=t.gl.getUniformLocation(F.shaderProgram,"world");t.gl.bindVertexArray(D),t.gl.uniformMatrix4fv(e,!1,new Float32Array(a.matrProj.a().join().split(","))),t.gl.uniformMatrix4fv(n,!1,new Float32Array(a.matrView.a().join().split(",")));let h=new s;t.gl.uniformMatrix4fv(o,!1,new Float32Array(h.rotateZ(Date.now()/30).mul(h.translate(new r(0,3,0))).a().join().split(",")));const l=t.gl.getUniformLocation(F.shaderProgram,"lightDir"),g=t.gl.getUniformLocation(F.shaderProgram,"camLoc");t.gl.uniform1f(i,Date.now()),t.gl.uniform3f(l,1,2,3),t.gl.uniform3f(g,a.loc.x,a.loc.y,a.loc.z);const m=t.gl.getUniformLocation(F.shaderProgram,"ka"),f=t.gl.getUniformLocation(F.shaderProgram,"kd"),c=t.gl.getUniformLocation(F.shaderProgram,"ks"),u=t.gl.getUniformLocation(F.shaderProgram,"ph");t.gl.uniform3f(m,.24725,.2245,.0645),t.gl.uniform3f(f,.34615,.3143,.0903),t.gl.uniform3f(c,.797357,.723991,.208006),t.gl.uniform1f(u,83.2),t.gl.drawElements(t.gl.TRIANGLES,12,t.gl.UNSIGNED_SHORT,0)}async function T(){F=await x("withLight"),D=t.gl.createVertexArray(),t.gl.bindVertexArray(D),A(F,R,z),t.gl.bindVertexArray(null)}const M=new Float32Array([1,0,0,0,1,0,0,0,1,-1,0,0,0,-1,0,0,0,-1]),S=new Uint16Array([0,1,2,0,2,4,4,2,3,3,2,1,5,1,0,5,0,4,5,4,3,5,3,1]);let V,j;function B(){t.gl.useProgram(j.shaderProgram);let i=t.gl.getUniformLocation(j.shaderProgram,"time");const e=t.gl.getUniformLocation(j.shaderProgram,"projection"),n=t.gl.getUniformLocation(j.shaderProgram,"modelView"),o=t.gl.getUniformLocation(j.shaderProgram,"lightDir"),h=t.gl.getUniformLocation(j.shaderProgram,"camLoc"),l=t.gl.getUniformLocation(j.shaderProgram,"world");t.gl.bindVertexArray(V),t.gl.uniformMatrix4fv(e,!1,new Float32Array(a.matrProj.a().join().split(","))),t.gl.uniformMatrix4fv(n,!1,new Float32Array(a.matrView.a().join().split(",")));let g=new s;t.gl.uniform1f(i,Date.now()),t.gl.uniform3f(o,1,2,3),t.gl.uniform3f(h,a.loc.x,a.loc.y,a.loc.z),t.gl.uniformMatrix4fv(l,!1,new Float32Array(g.rotateY(180*Math.sin(Date.now()/1e3)).mul(g.translate(new r(3,0,0))).a().join().split(",")));const m=t.gl.getUniformLocation(j.shaderProgram,"ka"),f=t.gl.getUniformLocation(j.shaderProgram,"kd"),c=t.gl.getUniformLocation(j.shaderProgram,"ks"),u=t.gl.getUniformLocation(j.shaderProgram,"ph");t.gl.uniform3f(m,.05375,.05,.06625),t.gl.uniform3f(f,.18275,.17,.22525),t.gl.uniform3f(c,.332741,.328634,.346435),t.gl.uniform1f(u,38.4),t.gl.drawElements(t.gl.TRIANGLES,24,t.gl.UNSIGNED_SHORT,0)}async function _(){j=await x("withLight"),V=t.gl.createVertexArray(),t.gl.bindVertexArray(V),A(j,M,S),t.gl.bindVertexArray(null)}const k=1.6180339887,I=new Float32Array([0,1,k,1,k,0,k,0,1,0,-1,k,-1,k,0,k,0,-1,0,1,-k,1,-k,0,-k,0,1,0,-1,-k,-1,-k,0,-k,0,-1]),N=new Uint16Array([0,2,1,0,1,4,0,4,8,0,8,3,0,3,2,11,8,4,11,4,6,11,6,9,11,9,10,11,10,9,7,3,10,7,10,9,7,9,5,7,5,2,7,2,3,2,5,1,1,5,6,5,6,9,10,3,8,1,4,6]);let H,C;function Y(){t.gl.useProgram(C.shaderProgram);let i=t.gl.getUniformLocation(C.shaderProgram,"time");const e=t.gl.getUniformLocation(C.shaderProgram,"projection"),n=t.gl.getUniformLocation(C.shaderProgram,"modelView"),o=t.gl.getUniformLocation(C.shaderProgram,"world");t.gl.bindVertexArray(H),t.gl.uniformMatrix4fv(e,!1,new Float32Array(a.matrProj.a().join().split(","))),t.gl.uniformMatrix4fv(n,!1,new Float32Array(a.matrView.a().join().split(",")));let h=new s;t.gl.uniformMatrix4fv(o,!1,new Float32Array(h.rotateX(Date.now()/10).mul(h.translate(new r(-3,0,0))).a().join().split(",")));const l=t.gl.getUniformLocation(C.shaderProgram,"camLoc"),g=t.gl.getUniformLocation(C.shaderProgram,"lightDir");t.gl.uniform3f(g,1,1,1),t.gl.uniform3f(l,a.loc.x,a.loc.y,a.loc.z);const m=t.gl.getUniformLocation(C.shaderProgram,"ka"),f=t.gl.getUniformLocation(C.shaderProgram,"kd"),c=t.gl.getUniformLocation(C.shaderProgram,"ks"),u=t.gl.getUniformLocation(C.shaderProgram,"ph");t.gl.uniform3f(m,Math.sin(Date.now()/500)/4+.25,Math.cos(Date.now()/300)/4+.25,Math.sin(Date.now()/1e3+5)/4+.25),t.gl.uniform3f(f,.07568,.61424,.07568),t.gl.uniform3f(c,.633,.727811,.633),t.gl.uniform1f(u,76.8),t.gl.uniform1f(i,Date.now()),t.gl.drawElements(t.gl.TRIANGLES,60,t.gl.UNSIGNED_SHORT,0)}async function G(){C=await x("withLight"),H=t.gl.createVertexArray(),t.gl.bindVertexArray(H),A(C,I,N),t.gl.bindVertexArray(null)}let W=[];class X{constructor(t=new r(.25,.25,.25),i=new r(.4,.4,.4),e=new r(.774597,.774597,.774597),s=76.8,n=null,o=[null]){this.ka=t,this.kd=i,this.ks=e,this.ph=s,this.shaderName=n,this.tex=[...o]}}function O(t){let i=t.target.files[0],r=new FileReader;r.readAsText(i),r.onload=t=>{Z(t.target.result).then((t=>W.push(t)))},r.onerror=function(){console.log(r.error)}}async function Z(t){let i=[0],e=[],s=[0],n=t.split("\n");for(let t=0;t<n.length;t++){let o=n[t].split(" ");if("v"==o[0]){let t=+o[1],e=+o[2],s=+o[3];i.push(new r(t,e,s))}else if("f"==o[0])e.push(+o[1].split("/")[0]),e.push(+o[2].split("/")[0]),e.push(+o[3].split("/")[0]);else if("vn"==o[0]){let t=+o[1],i=+o[2],e=+o[3];s.push(new r(t,i,e))}}0==s.length&&(s=d(i,e));let o=[];i.forEach(((t,i)=>o.push(new q(t,s[i]))));let a=new $(o,e);return a.mtl=new X,a.mtl.shaderName="withLight",await a.create(),a}class q{constructor(t=new r,s=new r,n=new i,o=new e){this.p=t,this.n=s,this.t=n,this.c=o}}class ${constructor(i,r=null,e=0,n=new s,o=t.gl.TRIANGLES,a=null){this.va=a,this.mtl=e,this.vBuf=i,this.iBuf=r,this.trans=n,this.type=o}draw(i){t.gl.useProgram(this.shader.shaderProgram);let r=t.gl.getUniformLocation(this.shader.shaderProgram,"time");const e=t.gl.getUniformLocation(this.shader.shaderProgram,"projection"),s=t.gl.getUniformLocation(this.shader.shaderProgram,"modelView"),n=t.gl.getUniformLocation(this.shader.shaderProgram,"lightDir"),o=t.gl.getUniformLocation(this.shader.shaderProgram,"camLoc"),h=t.gl.getUniformLocation(this.shader.shaderProgram,"world");t.gl.bindVertexArray(this.va),t.gl.uniformMatrix4fv(e,!1,new Float32Array(a.matrProj.a().join().split(","))),t.gl.uniformMatrix4fv(s,!1,new Float32Array(a.matrView.a().join().split(","))),t.gl.uniform1f(r,Date.now()),t.gl.uniform3f(n,1,2,3),t.gl.uniform3f(o,a.loc.x,a.loc.y,a.loc.z),t.gl.uniformMatrix4fv(h,!1,new Float32Array(i.a().join().split(",")));const l=t.gl.getUniformLocation(this.shader.shaderProgram,"ka"),g=t.gl.getUniformLocation(this.shader.shaderProgram,"kd"),m=t.gl.getUniformLocation(this.shader.shaderProgram,"ks"),f=t.gl.getUniformLocation(this.shader.shaderProgram,"ph");t.gl.uniform3f(l,this.mtl.ka.x,this.mtl.ka.y,this.mtl.ka.z),t.gl.uniform3f(g,this.mtl.kd.x,this.mtl.kd.y,this.mtl.kd.z),t.gl.uniform3f(m,this.mtl.ks.x,this.mtl.ks.y,this.mtl.ks.z),t.gl.uniform1f(f,this.mtl.ph),null!=this.iBuf?t.gl.drawElements(t.gl.TRIANGLES,this.iBuf.length,t.gl.UNSIGNED_SHORT,0):t.gl.drawArrays(t.gl.type,0,this.vBuf.length)}async create(){this.shader=await x(this.mtl.shaderName),this.va=t.gl.createVertexArray(),t.gl.bindVertexArray(this.va),A(this.shader,new Float32Array(this.vBuf.map((t=>[t.p.x,t.p.y,t.p.z])).flat()),new Uint16Array(this.iBuf),new Float32Array(this.vBuf.map((t=>[t.n.x,t.n.y,t.n.z])).flat())),t.gl.bindVertexArray(null)}}function K(){W.forEach((t=>t.draw(t.trans)))}async function J(){}const Q=new Float32Array([10,-5,10,-10,-5,-10,10,-5,-10,10,-5,10,-10,-5,10,-10,-5,-10]);let tt,it,rt;function et(){t.gl.useProgram(it.shaderProgram);let i=t.gl.getUniformLocation(it.shaderProgram,"time");const e=t.gl.getUniformLocation(it.shaderProgram,"projection"),n=t.gl.getUniformLocation(it.shaderProgram,"modelView"),o=t.gl.getUniformLocation(it.shaderProgram,"world");t.gl.bindVertexArray(tt),t.gl.uniformMatrix4fv(e,!1,new Float32Array(a.matrProj.a().join().split(","))),t.gl.uniformMatrix4fv(n,!1,new Float32Array(a.matrView.a().join().split(",")));let h=new s;t.gl.uniformMatrix4fv(o,!1,new Float32Array(h.translate(new r(-3,0,0)).a().join().split(",")));const l=t.gl.getUniformLocation(it.shaderProgram,"camLoc"),g=t.gl.getUniformLocation(it.shaderProgram,"lightDir");t.gl.uniform3f(g,1,1,1),t.gl.uniform3f(l,a.loc.x,a.loc.y,a.loc.z);const m=t.gl.getUniformLocation(it.shaderProgram,"ka"),f=t.gl.getUniformLocation(it.shaderProgram,"kd"),c=t.gl.getUniformLocation(it.shaderProgram,"ks"),u=t.gl.getUniformLocation(it.shaderProgram,"ph");t.gl.uniform3f(m,.01,.3,.1),t.gl.uniform3f(f,.07568,.61424,.07568),t.gl.uniform3f(c,.633,.727811,.633),t.gl.uniform1f(u,76.8),t.gl.uniform1f(i,Date.now()),t.gl.drawArrays(t.gl.TRIANGLES,0,6)}async function st(){it=await x("withLight"),tt=t.gl.createVertexArray(),t.gl.bindVertexArray(tt),A(it,Q),t.gl.bindVertexArray(null)}let nt,ot=new s;function at(){rt.mtl.ka.x=Math.sin(Date.now()/100),rt.draw(ot.scale(new r(1*(Math.sin(Date.now()/500)+2),1*(Math.cos(Date.now()/200)+2),1*(Math.sin(Date.now()/300+5)+2))).mul(ot.translate(new r(0,-3,0))))}async function ht(){let t;const i=fetch("bin/models/dode.obj").then((t=>t.text())).then((i=>{t=i}));await i.then((()=>{Z(t).then((t=>rt=t))}))}let lt=new s,gt=1;function mt(){if(gt){nt.draw(lt.scale(new r(.2*(Math.sin(Date.now()/200)/5+1.2),.2*(Math.cos(Date.now()/300)/5+1.2),.2*(Math.sin(Date.now()/400+5)/5+1.2))).mul(lt.translate(new r(0,-3,0))).mul(lt.translate(new r(-10,0,0))));let t=40;for(let i=0;i<t*t;i++)nt.mtl.ka=new r(.4*(Math.sin(Date.now()/200+i)/5+1.2),.4*(Math.cos(Date.now()/300+i)/5+1.2),.4*(Math.sin(Date.now()/400+5+i)/5+1.2)),nt.draw(lt.scale(new r(.2*(Math.sin(Date.now()/200+i)/5+1.2),.2*(Math.cos(Date.now()/300+i)/5+1.2),.2*(Math.sin(Date.now()/400+5+i)/5+1.2))).mul(lt.translate(new r(0,5*Math.floor(i/t),-i%t*5))))}}async function ft(){let t;await fetch("bin/models/cow1.obj").then((t=>t.text())).then((i=>{t=i})).catch((()=>gt=0)),nt=await Z(t),nt.mtl.shaderName="withLightSmooth",await nt.create()}let ct,ut,dt,wt=[];const yt=document.getElementById("rcoeff"),xt=document.getElementById("gcoeff"),At=document.getElementById("bcoeff"),Pt=document.getElementById("a"),Lt=document.getElementById("b");let Ut,pt,Et,bt,Rt,zt=Date.now(),Dt=6;function Ft(){t.gl.disable(t.gl.DEPTH_TEST),t.gl.bindFramebuffer(t.gl.FRAMEBUFFER,Et),t.gl.viewport(0,0,Ut,pt),t.gl.bindVertexArray(dt),t.gl.useProgram(ct.shaderProgram);let i=t.gl.getUniformLocation(ct.shaderProgram,"time"),r=t.gl.getUniformLocation(ct.shaderProgram,"x"),e=t.gl.getUniformLocation(ct.shaderProgram,"y"),s=t.gl.getUniformLocation(ct.shaderProgram,"zoom"),n=t.gl.getUniformLocation(ct.shaderProgram,"rcoeff"),o=t.gl.getUniformLocation(ct.shaderProgram,"gcoeff"),h=t.gl.getUniformLocation(ct.shaderProgram,"bcoeff"),l=t.gl.getUniformLocation(ct.shaderProgram,"a"),g=t.gl.getUniformLocation(ct.shaderProgram,"b");t.gl.uniform1f(i,(Date.now()-zt)/1e3),t.gl.uniform1f(e,.4),t.gl.uniform1f(r,.4),t.gl.uniform1f(s,1),t.gl.uniform1f(n,yt.value),t.gl.uniform1f(o,xt.value),t.gl.uniform1f(h,At.value),t.gl.uniform1f(l,Pt.value),t.gl.uniform1f(g,5*Lt.value),t.gl.useProgram(ct.shaderProgram),t.gl.drawArrays(t.gl.TRIANGLE_STRIP,0,4),t.gl.useProgram(ut.shaderProgram);const m=t.gl.getUniformLocation(ut.shaderProgram,"tex0");t.gl.bindFramebuffer(t.gl.FRAMEBUFFER,null),t.gl.viewport(0,0,Math.max(t.gl.canvas.width,t.gl.canvas.height),Math.max(t.gl.canvas.width,t.gl.canvas.height)),t.gl.activeTexture(t.gl.TEXTURE0+Dt),t.gl.bindTexture(t.gl.TEXTURE_2D,bt),t.gl.uniform1i(m,Dt);let f=t.gl.getUniformLocation(ut.shaderProgram,"camDir"),c=t.gl.getUniformLocation(ut.shaderProgram,"camUp"),u=t.gl.getUniformLocation(ut.shaderProgram,"camRight"),d=t.gl.getUniformLocation(ut.shaderProgram,"projDist"),w=t.gl.getUniformLocation(ut.shaderProgram,"frameW"),y=t.gl.getUniformLocation(ut.shaderProgram,"frameH");t.gl.uniform3f(f,a.dir.x,a.dir.y,a.dir.z),t.gl.uniform3f(c,a.up.x,a.up.y,a.up.z),t.gl.uniform3f(u,a.right.x,a.right.y,a.right.z),t.gl.uniform1f(d,a.projDist),t.gl.uniform1f(w,a.frameW),t.gl.uniform1f(y,a.frameH),t.gl.useProgram(ut.shaderProgram),t.gl.drawArrays(t.gl.TRIANGLE_STRIP,0,4),t.gl.enable(t.gl.DEPTH_TEST)}async function vt(){dt=t.gl.createVertexArray(),t.gl.bindVertexArray(dt),ct=await x("mandelbrot"),wt=[-1,-1,0,-1,1,0,1,-1,0,1,1,0];let i=t.gl.getAttribLocation(ct.shaderProgram,"in_pos"),r=t.gl.createBuffer();t.gl.bindBuffer(t.gl.ARRAY_BUFFER,r),t.gl.bufferData(t.gl.ARRAY_BUFFER,new Float32Array(wt),t.gl.STATIC_DRAW),t.gl.enableVertexAttribArray(i),t.gl.vertexAttribPointer(i,3,t.gl.FLOAT,!1,0,0),ut=await x("sky"),i=t.gl.getAttribLocation(ct.shaderProgram,"in_pos"),r=t.gl.createBuffer(),t.gl.bindBuffer(t.gl.ARRAY_BUFFER,r),t.gl.bufferData(t.gl.ARRAY_BUFFER,new Float32Array(wt),t.gl.STATIC_DRAW),t.gl.enableVertexAttribArray(i),t.gl.vertexAttribPointer(i,3,t.gl.FLOAT,!1,0,0),Ut=3*a.frameW,pt=3*a.frameH,bt=t.gl.createTexture(),t.gl.bindTexture(t.gl.TEXTURE_2D,bt),t.gl.texImage2D(t.gl.TEXTURE_2D,0,t.gl.RGBA,Ut,pt,0,t.gl.RGBA,t.gl.UNSIGNED_BYTE,null),t.gl.texParameteri(t.gl.TEXTURE_2D,t.gl.TEXTURE_MIN_FILTER,t.gl.LINEAR),Rt=t.gl.createRenderbuffer(),t.gl.bindRenderbuffer(t.gl.RENDERBUFFER,Rt),t.gl.renderbufferStorage(t.gl.RENDERBUFFER,t.gl.DEPTH_COMPONENT16,Ut,pt),Et=t.gl.createFramebuffer(),t.gl.bindFramebuffer(t.gl.FRAMEBUFFER,Et),t.gl.framebufferTexture2D(t.gl.FRAMEBUFFER,t.gl.COLOR_ATTACHMENT0,t.gl.TEXTURE_2D,bt,0),t.gl.framebufferRenderbuffer(t.gl.FRAMEBUFFER,t.gl.DEPTH_ATTACHMENT,t.gl.RENDERBUFFER,Rt),t.gl.bindVertexArray(null)}class Tt{constructor(t,i){this.init=t,this.render=i}}let Mt,St,Vt=[];async function jt(){Bt(vt,Ft),Bt(b,E),Bt(T,v),Bt(_,B),Bt(G,Y),Bt(J,K),Bt(ft,mt),Bt(ht,at),Bt(st,et);for(let t=0;t<Vt.length;t++)await Vt[t].init()}function Bt(t,i){Vt.push(new Tt(t,i))}t.gl=void 0,window.addEventListener("load",(()=>{function i(t){var i=t.changedTouches[0],r="";switch(t.type){case"touchstart":r="mousedown";break;case"touchmove":r="mousemove";break;case"touchend":r="mouseup";break;default:return}var e=document.createEvent("MouseEvent");e.initMouseEvent(r,!0,!0,window,1,i.screenX,i.screenY,i.clientX,i.clientY,!1,!1,!1,!1,0,null),i.target.dispatchEvent(e),t.preventDefault()}Mt=document.getElementById("glCanvas"),t.gl=Mt.getContext("webgl2"),St=document.getElementById("coords"),kt(),window.onmousemove=h,window.onmouse=h,window.onmousedown=l,window.onmouseup=g,window.addEventListener("contextmenu",(t=>t.preventDefault())),window.addEventListener("wheel",(t=>{!function(t){o.dz=t.deltaY}(t)})),window.onscroll=()=>window.scroll(0,0),window.addEventListener("keyup",(t=>{!function(t){n[t.key]=0}(t)})),window.addEventListener("keydown",(t=>{!function(t){n[t.key]=1}(t)})),document.querySelector("#file").addEventListener("change",O),document.addEventListener("touchstart",i,!0),document.addEventListener("touchmove",i,!0),document.addEventListener("touchend",i,!0),document.addEventListener("touchcancel",i,!0)}));const _t=()=>{t.gl.clearColor(.8,.47,.3,1),t.gl.clear(t.gl.COLOR_BUFFER_BIT|t.gl.DEPTH_BUFFER_BIT),Mt.width=window.innerWidth,Mt.height=window.innerHeight,u(),a.frameW=Mt.width,a.frameH=Mt.height,a.camSet(a.loc,a.at,a.up),St.innerHTML="LocX: "+a.loc.x.toString().slice(0,5)+" LocY: "+a.loc.y.toString().slice(0,5)+" LocZ: "+a.loc.z.toString().slice(0,5)+"<br /> Dir X: "+a.dir.x.toString().slice(0,5)+" Dir Y: "+a.dir.y.toString().slice(0,5)+" Dir Z: "+a.dir.z.toString().slice(0,5)+"<br /> Up X: "+a.up.x.toString().slice(0,5)+" Up Y: "+a.up.y.toString().slice(0,5)+" Up Z: "+a.up.z.toString().slice(0,5)+"<br /> At X: "+a.at.x.toString().slice(0,5)+" At Y: "+a.at.y.toString().slice(0,5)+" At Z: "+a.at.z.toString().slice(0,5)+"<br />",Vt.forEach((t=>{t.render()})),o.dx=o.dy=o.dz=0,window.requestAnimationFrame(_t)};async function kt(){t.gl.clearColor(1,1,0,1),t.gl.clear(t.gl.COLOR_BUFFER_BIT),t.gl.enable(t.gl.DEPTH_TEST),t.gl.viewport(0,0,t.gl.canvas.width,t.gl.canvas.height),Mt.width=window.innerWidth,Mt.height=window.innerHeight,u(),a.frameW=Mt.width,a.frameH=Mt.height,a.camSet(a.loc,a.at,a.up),await x("default"),await jt(),_t()}t.initGL=kt}({});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
