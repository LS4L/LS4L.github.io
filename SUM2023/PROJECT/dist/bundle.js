!function(t){"use strict";class e{constructor(t=0,e=0){this.x=t,this.y=e}add(t){return new e(this.x+t.x,this.y+t.y)}sub(t){return new e(this.x-t.x,this.y-t.y)}mul(t){return new e(this.x*t,this.y*t)}div(t){return new e(this.x/t,this.y/t)}neg(){return new e(-this.x,-this.y)}dot(t){return this.x*t.x+this.y*t.y}cross(t){return this.x*t.y-this.y*t.x}len2(){return this.x*this.x+this.y*this.y}len(){return Math.sqrt(this.len2())}normalize(){return this.div(this.len())}lerp(t,s){return new e(this.x+(t.x-this.x)*s,this.y+(t.y-this.y)*s)}}class s{constructor(t=0,e=0,s=0){this.x=t,this.y=e,this.z=s}eq(t){return this.x==t.x&&this.y==t.y&&this.z==t.z}add(t){return new s(this.x+t.x,this.y+t.y,this.z+t.z)}sub(t){return new s(this.x-t.x,this.y-t.y,this.z-t.z)}mul(t){return new s(this.x*t,this.y*t,this.z*t)}div(t){return 0!=t?new s(this.x/t,this.y/t,this.z/t):new s}neg(){return new s(-this.x,-this.y,-this.z)}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}cross(t){return new s(this.y*t.z-this.z*t.y,this.z*t.x-this.x*t.z,this.x*t.y-this.y*t.x)}len2(){return this.x*this.x+this.y*this.y+this.z*this.z}len(){return Math.sqrt(this.len2())}normalize(){return this.div(this.len())}lerp(t,e=.5){return new s(this.x+(t.x-this.x)*e,this.y+(t.y-this.y)*e,this.z+(t.z-this.z)*e)}mulMatr(t){let e=this.x*t[0][3]+this.y*t[1][3]+this.z*t[2][3]+t[3][3];return new s((this.x*t[0][0]+this.y*t[1][0]+this.z*t[2][0]+t[3][0])/e,(this.x*t[0][1]+this.y*t[1][1]+this.z*t[2][1]+t[3][1])/e,(this.x*t[0][2]+this.y*t[1][2]+this.z*t[2][2]+t[3][2])/e)}angle(t,e=new s(0,1,0)){if(0==t.len2()||0==this.len2())return 0;let r=this.cross(t),i=this.dot(t)/(this.len()*t.len()),n=Math.acos(i);return r.dot(e)<0&&(n=-n),n}get xxx(){return new s(this.x,this.x,this.x)}get yyy(){return new s(this.y,this.y,this.y)}get zzz(){return new s(this.z,this.z,this.z)}copy(){return new s(this.x,this.y,this.z)}}class r{constructor(t=0,e=0,s=0,r=0){this.x=t,this.y=e,this.z=s,this.w=r}add(t){return new r(this.x+t.x,this.y+t.y,this.z+t.z,this.w+t.w)}sub(t){return new r(this.x-t.x,this.y-t.y,this.z-t.z,this.w-t.w)}mul(t){return new r(this.x*t,this.y*t,this.z*t,this.w*t)}div(t){return new r(this.x/t,this.y/t,this.z/t,this.w/t)}neg(){return new r(-this.x,-this.y,-this.z,-this.w)}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z+this.w*this.w}len2(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}len(){return Math.sqrt(this.len2())}normalize(){return this.div(this.len())}lerp(t,e){return new s(this.x+(t.x-this.x)*e,this.y+(t.y-this.y)*e,this.z+(t.z-this.z)*e,this.w+(t.w-this.w)*e)}}class i{constructor(t=[[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]]){this[0]=[],this[1]=[],this[2]=[],this[3]=[],this[0][0]=t[0][0],this[0][1]=t[0][1],this[0][2]=t[0][2],this[0][3]=t[0][3],this[1][0]=t[1][0],this[1][1]=t[1][1],this[1][2]=t[1][2],this[1][3]=t[1][3],this[2][0]=t[2][0],this[2][1]=t[2][1],this[2][2]=t[2][2],this[2][3]=t[2][3],this[3][0]=t[3][0],this[3][1]=t[3][1],this[3][2]=t[3][2],this[3][3]=t[3][3]}a(){return[[this[0][0],this[0][1],this[0][2],this[0][3]],[this[1][0],this[1][1],this[1][2],this[1][3]],[this[2][0],this[2][1],this[2][2],this[2][3]],[this[3][0],this[3][1],this[3][2],this[3][3]]]}translate(t){return new i([[1,0,0,0],[0,1,0,0],[0,0,1,0],[t.x,t.y,t.z,1]])}scale(t){return new i([[t.x,0,0,0],[0,t.y,0,0],[0,0,t.z,0],[0,0,0,1]])}rotateX(t){let e=new i,s=t/180*Math.PI,r=Math.sin(s),n=Math.cos(s);return e[1][1]=n,e[2][2]=n,e[1][2]=r,e[2][1]=-r,e}rotateY(t){let e=new i,s=t/180*Math.PI,r=Math.sin(s),n=Math.cos(s);return e[0][0]=n,e[2][2]=n,e[0][2]=-r,e[2][0]=r,e}rotateZ(t){let e=new i,s=t/180*Math.PI,r=Math.sin(s),n=Math.cos(s);return e[0][0]=n,e[1][1]=n,e[0][1]=r,e[1][0]=-r,e}rotate(t,e){let s=t/180*Math.PI,r=Math.sin(s),n=Math.cos(s);return new i([[n+e.x*e.x*(1-n),e.x*e.y*(1-n)+e.z*r,e.x*e.z*(1-n)-e.y*r,0],[e.y*e.x*(1-n)-e.z*r,n+e.y*e.y*(1-n),e.y*e.z*(1-n)+e.x*r,0],[e.z*e.x*(1-n)+e.y*r,e.z*e.y*(1-n)-e.x*r,n+e.z*e.z*(1-n),0],[0,0,0,1]])}transpose(){let t=new i;return t[0][0]=this[0][0],t[0][1]=this[1][0],t[0][2]=this[2][0],t[0][3]=this[3][0],t[1][0]=this[0][1],t[1][1]=this[1][1],t[1][2]=this[2][1],t[1][3]=this[3][1],t[2][0]=this[0][2],t[2][1]=this[1][2],t[2][2]=this[2][2],t[2][3]=this[3][2],t[3][0]=this[0][3],t[3][1]=this[1][3],t[3][2]=this[2][3],t[3][3]=this[3][3],t}determ3x3(t,e,s,r,i,n,o,a,h){return t*i*h+e*n*o+s*r*a-t*n*a-e*r*h-s*i*o}determ(){return+this[0][0]*this.determ3x3(this[1][1],this[1][2],this[1][3],this[2][1],this[2][2],this[2][3],this[3][1],this[3][2],this[3][3])+-this[0][1]*this.determ3x3(this[1][0],this[1][2],this[1][3],this[2][0],this[2][2],this[2][3],this[3][0],this[3][2],this[3][3])+ +this[0][2]*this.determ3x3(this[1][0],this[1][1],this[1][3],this[2][0],this[2][1],this[2][3],this[3][0],this[3][1],this[3][3])+-this[0][3]*this.determ3x3(this[1][0],this[1][1],this[1][2],this[2][0],this[2][1],this[2][2],this[3][0],this[3][1],this[3][2])}inverse(){let t=this.determ(),e=new i;return 0==t?new i:(e[0][0]=+this.determ3x3(this[1][1],this[1][2],this[1][3],this[2][1],this[2][2],this[2][3],this[3][1],this[3][2],this[3][3])/t,e[1][0]=-this.determ3x3(this[1][0],this[1][2],this[1][3],this[2][0],this[2][2],this[2][3],this[3][0],this[3][2],this[3][3])/t,e[2][0]=+this.determ3x3(this[1][0],this[1][1],this[1][3],this[2][0],this[2][1],this[2][3],this[3][0],this[3][1],this[3][3])/t,e[3][0]=-this.determ3x3(this[1][0],this[1][1],this[1][2],this[2][0],this[2][1],this[2][2],this[3][0],this[3][1],this[3][2])/t,e[0][1]=-this.determ3x3(this[0][1],this[0][2],this[0][3],this[2][1],this[2][2],this[2][3],this[3][1],this[3][2],this[3][3])/t,e[1][1]=+this.determ3x3(this[0][0],this[0][2],this[0][3],this[2][0],this[2][2],this[2][3],this[3][0],this[3][2],this[3][3])/t,e[2][1]=-this.determ3x3(this[0][0],this[0][1],this[0][3],this[2][0],this[2][1],this[2][3],this[3][0],this[3][1],this[3][3])/t,e[3][1]=+this.determ3x3(this[0][0],this[0][1],this[0][2],this[2][0],this[2][1],this[2][2],this[3][0],this[3][1],this[3][2])/t,e[0][2]=+this.determ3x3(this[0][1],this[0][2],this[0][3],this[1][1],this[1][2],this[1][3],this[3][1],this[3][2],this[3][3])/t,e[1][2]=-this.determ3x3(this[0][0],this[0][2],this[0][3],this[1][0],this[1][2],this[1][3],this[3][0],this[3][2],this[3][3])/t,e[2][2]=+this.determ3x3(this[0][0],this[0][1],this[0][3],this[1][0],this[1][1],this[1][3],this[3][0],this[3][1],this[3][3])/t,e[3][2]=-this.determ3x3(this[0][0],this[0][1],this[0][2],this[1][0],this[1][1],this[1][2],this[3][0],this[3][1],this[3][2])/t,e[0][3]=-this.determ3x3(this[0][1],this[0][2],this[0][3],this[1][1],this[1][2],this[1][3],this[2][1],this[2][2],this[2][3])/t,e[1][3]=+this.determ3x3(this[0][0],this[0][2],this[0][3],this[1][0],this[1][2],this[1][3],this[2][0],this[2][2],this[2][3])/t,e[2][3]=-this.determ3x3(this[0][0],this[0][1],this[0][3],this[1][0],this[1][1],this[1][3],this[2][0],this[2][1],this[2][3])/t,e[3][3]=+this.determ3x3(this[0][0],this[0][1],this[0][2],this[1][0],this[1][1],this[1][2],this[2][0],this[2][1],this[2][2])/t,e)}add(t){let e=new i;return e[0][0]=this[0][0]+t[0][0],e[0][1]=this[0][1]+t[0][1],e[0][2]=this[0][2]+t[0][2],e[0][3]=this[0][3]+t[0][3],e[1][0]=this[1][0]+t[1][0],e[1][1]=this[1][1]+t[1][1],e[1][2]=this[1][2]+t[1][2],e[1][3]=this[1][3]+t[1][3],e[2][0]=this[2][0]+t[2][0],e[2][1]=this[2][1]+t[2][1],e[2][2]=this[2][2]+t[2][2],e[2][3]=this[2][3]+t[2][3],e[3][0]=this[3][0]+t[3][0],e[3][1]=this[3][1]+t[3][1],e[3][2]=this[3][2]+t[3][2],e[3][3]=this[3][3]+t[3][3],e}mul(t){let e=new i;return e[0][0]=this[0][0]*t[0][0]+this[0][1]*t[1][0]+this[0][2]*t[2][0]+this[0][3]*t[3][0],e[0][1]=this[0][0]*t[0][1]+this[0][1]*t[1][1]+this[0][2]*t[2][1]+this[0][3]*t[3][1],e[0][2]=this[0][0]*t[0][2]+this[0][1]*t[1][2]+this[0][2]*t[2][2]+this[0][3]*t[3][2],e[0][3]=this[0][0]*t[0][3]+this[0][1]*t[1][3]+this[0][2]*t[2][3]+this[0][3]*t[3][3],e[1][0]=this[1][0]*t[0][0]+this[1][1]*t[1][0]+this[1][2]*t[2][0]+this[1][3]*t[3][0],e[1][1]=this[1][0]*t[0][1]+this[1][1]*t[1][1]+this[1][2]*t[2][1]+this[1][3]*t[3][1],e[1][2]=this[1][0]*t[0][2]+this[1][1]*t[1][2]+this[1][2]*t[2][2]+this[1][3]*t[3][2],e[1][3]=this[1][0]*t[0][3]+this[1][1]*t[1][3]+this[1][2]*t[2][3]+this[1][3]*t[3][3],e[2][0]=this[2][0]*t[0][0]+this[2][1]*t[1][0]+this[2][2]*t[2][0]+this[2][3]*t[3][0],e[2][1]=this[2][0]*t[0][1]+this[2][1]*t[1][1]+this[2][2]*t[2][1]+this[2][3]*t[3][1],e[2][2]=this[2][0]*t[0][2]+this[2][1]*t[1][2]+this[2][2]*t[2][2]+this[2][3]*t[3][2],e[2][3]=this[2][0]*t[0][3]+this[2][1]*t[1][3]+this[2][2]*t[2][3]+this[2][3]*t[3][3],e[3][0]=this[3][0]*t[0][0]+this[3][1]*t[1][0]+this[3][2]*t[2][0]+this[3][3]*t[3][0],e[3][1]=this[3][0]*t[0][1]+this[3][1]*t[1][1]+this[3][2]*t[2][1]+this[3][3]*t[3][1],e[3][2]=this[3][0]*t[0][2]+this[3][1]*t[1][2]+this[3][2]*t[2][2]+this[3][3]*t[3][2],e[3][3]=this[3][0]*t[0][3]+this[3][1]*t[1][3]+this[3][2]*t[2][3]+this[3][3]*t[3][3],e}view(t,e,s){let r=e.sub(t).normalize(),n=r.cross(s).normalize(),o=n.cross(r);return new i([[n.x,o.x,-r.x,0],[n.y,o.y,-r.y,0],[n.z,o.z,-r.z,0],[-t.dot(n),-t.dot(o),t.dot(r),1]])}ortho(t,e,s,r,n,o){return new i([[2/(e-t),0,0,0],[0,2/(r-s),0,0],[0,0,-2/(o-n),0],[-(e+t)/(e-t),-(r+s)/(r-s),-(o+n)/(o-n),1]])}frustum(t,e,s,r,n,o){return new i([[2*n/(e-t),0,0,0],[0,2*n/(r-s),0,0],[(e+t)/(e-t),(r+s)/(r-s),-(o+n)/(o-n),-1],[0,0,-2*n*o/(o-n),0]])}}let n=[],o={x:0,y:0,savedX:0,savedY:0,zoom:1,dx:0,dy:0,dz:0,isDown:!1,isRDown:!1},a=new class{constructor(){this.projSize=.1,this.projDist=.1,this.projFarClip=18e3,this.frameW=30,this.frameH=30,this.matrView=new i,this.matrProj=new i,this.matrVP=new i,this.id=Math.random().toString(),this.setDef(),this.mode=2}camSet(t,e,r,n,o){let a=new i;return this.matrView=a.view(t,e,r),this.loc=t,this.at=e,this.dir=new s(-this.matrView[0][2],-this.matrView[1][2],-this.matrView[2][2]),this.up=new s(this.matrView[0][1],this.matrView[1][1],this.matrView[2][1]),this.right=new s(this.matrView[0][0],this.matrView[1][0],this.matrView[2][0]),this.pos=n,this.userLoc=o,this.matrVP=this.matrView.mul(this.matrProj),this}setProj(t,e,s){let r,n;r=n=t,this.projDist=e,this.projSize=t,this.projFarClip=s,this.frameW>this.frameH?r*=this.frameW/this.frameH:n*=this.frameH/this.frameW;let o=new i;return this.matrProj=o.frustum(-r/2,r/2,-n/2,n/2,e,s),this.matrVP=this.matrView.mul(this.matrProj),this}setSize(t,e){return this.frameW=t,this.frameH=e,this.setProj(this.projSize,this.projDist,this.projFarClip),this}setDef(){return this.loc=new s(0,0,1),this.at=new s(0,0,0),this.dir=new s(0,0,-1),this.up=new s(0,1,0),this.right=new s(1,0,0),this.projDist=.1,this.projSize=.1,this.projFarClip=1e4,this.frameW=30,this.frameH=30,this.camSet(this.loc,this.at,this.up,this.pos,this.userLoc),this.setProj(this.projSize,this.projDist,this.projFarClip),this.setSize(this.frameW,this.frameH),this}};function h(t){o.dx=t.pageX-o.x,o.dy=t.pageY-o.y,o.x=t.pageX,o.y=t.pageY}function l(t){0==t.button?o.isDown=!0:2==t.button&&(o.isRDown=!0)}function c(t){0==t.button?o.isDown=!1:2==t.button&&(o.isRDown=!1)}a.camSet(new s(0,2.5,0),new s(0,0,-6),new s(0,1,0),new s(1,1,1),new s(0,.8,0));let u=.05,d=1,g=10;let f=new i;a.speed=0,a.userDir=new s(1,0,0),a.pos=new s(-1,1,0);let p=.01,m=1.01,y=0,w=45,b=.2,x=1.1;function A(){0==a.mode?function(){a.loc=a.loc.add(a.dir.mul(.01*-o.dz));let t=new i;a.loc=a.loc.mulMatr(t.rotate(o.isDown*u*o.dx,a.up.neg())),a.loc=a.loc.mulMatr(t.rotate(o.isDown*u*o.dy,a.right.neg())),a.at=a.at.sub(a.loc),a.at=a.at.mulMatr(t.rotateY(o.isRDown*u*o.dx)),a.at=a.at.add(a.loc),a.right=a.right.mulMatr(t.rotateY(o.isRDown*u*o.dx)),a.at=a.at.sub(a.loc),a.at=a.at.mulMatr(t.rotate(o.isRDown*u*o.dy,a.right)),a.at=a.at.add(a.loc),d+=n.Shift?g:0,a.loc=a.loc.add(a.dir.mul(!!n.KeyW*!n.ControlLeft*d)).sub(a.dir.mul(!!n.KeyS*!n.ControlLeft*d)).sub(a.right.mul(!!n.KeyA*!n.ControlLeft*d)).add(a.right.mul(!!n.KeyD*!n.ControlLeft*d)),a.at=a.at.add(a.dir.mul(!!n.KeyW*!n.ControlLeft*d)).sub(a.dir.mul(!!n.KeyS*!n.ControlLeft*d)).sub(a.right.mul(!!n.KeyA*!n.ControlLeft*d)).add(a.right.mul(!!n.KeyD*!n.ControlLeft*d)),d-=n.Shift?g:0}():1==a.mode?function(){a.pos=a.pos.add(a.pos.mul(.001*o.dz));let t=new i;a.pos=a.pos.mulMatr(t.rotateY(-o.isDown*u*o.dx)),a.pos=a.pos.mulMatr(t.rotateX(-o.isDown*u*o.dy)),a.userDir=a.pos.neg().normalize(),a.userDir.y=0,a.userLoc=a.userLoc.add(a.userDir.mul(!!n.KeyW*!n.ControlLeft*d)).add(a.userDir.mul(-!!n.KeyS*d)).add(a.userDir.mulMatr(t.rotateY(90)).mul(!!n.KeyA*d)).add(a.userDir.mulMatr(t.rotateY(90)).mul(-!!n.KeyD*d)),a.at=a.userLoc,a.dir=a.pos.neg().normalize(),a.loc=a.userLoc.add(a.pos),a.right=a.userDir.cross(new s(0,1,0)),a.up=a.right.cross(a.dir)}():function(){a.speed+=(!!n.KeyW-!!n.KeyS)*p,a.speed/=m,a.pos=a.pos.add(a.pos.mul(.001*o.dz)),y+=(-!!n.KeyD+!!n.KeyA)*b,y>w&&(y=w),y<-w&&(y=-w),y/=x,a.userDir=a.userDir.mulMatr(f.rotateY(y*Math.sqrt(Math.abs(a.speed)))),a.pos=a.pos.mulMatr(f.rotateY(y*Math.sqrt(Math.abs(a.speed)))),a.userLoc=a.userLoc.add(a.userDir.mul(a.speed)),a.pos=a.pos.mulMatr(f.rotateY(-o.isDown*u*o.dx)),a.pos=a.pos.mulMatr(f.rotate(-o.isDown*u*o.dy,a.right)),a.at=a.userLoc,a.dir=a.pos.neg().normalize(),a.loc=a.userLoc.add(a.pos);let t=new s(a.dir.x,0,a.dir.z);a.right=t.cross(new s(0,1,0)),a.up=a.right.cross(a.dir)}(),a.mode=0}function E(t,e=null){let r=[],i=0;null==e&&(e=[...Array(t.length/3).keys()]);for(let e=0;e<t.length;e+=3)r[i++]=new s(t[e],t[e+1],t[e+2]);let n=[];for(let t=0;t<r.length;t++)n[t]=new s;for(let t=0;t<e.length;t+=3){let s=r[e[t]],i=r[e[t+1]],o=r[e[t+2]],a=i.sub(s).cross(o.sub(s)).normalize();n[e[t]]=n[e[t]].add(a),n[e[t+1]]=n[e[t+1]].add(a),n[e[t+2]]=n[e[t+2]].add(a)}for(let t=0;t<r.length;t++)n[t]=n[t].normalize();i=0;let o=[];for(let t=0;t<n.length;t++)o[i++]=n[t].x,o[i++]=n[t].y,o[i++]=n[t].z;return o}const L=[];class v{constructor(t,e,s){this.vs=t,this.fs=e,this.shaderProgram=s}}async function R(e=null){let s,r,i;if(null==e||0==e)return L[0];function n(t,e,s){const r=t.createShader(e);return t.shaderSource(r,s),t.compileShader(r,s),r}const o=fetch(`bin/shaders/${e}/vert.glsl`).then((t=>t.text())).then((t=>{s=t})),a=fetch(`bin/shaders/${e}/frag.glsl`).then((t=>t.text())).then((t=>{r=t})),h=Promise.all([o,a]);return await h.then((()=>{const e=n(t.gl,t.gl.VERTEX_SHADER,s),o=n(t.gl,t.gl.FRAGMENT_SHADER,r);let a=t.gl.createProgram();if(t.gl.attachShader(a,e),t.gl.attachShader(a,o),t.gl.linkProgram(a),!t.gl.getProgramParameter(a,t.gl.LINK_STATUS)){const e=t.gl.getProgramInfoLog(a);console.log(e)}i=new v(s,r,a),L.push(i)})),i}function P(e,s,r=null,i=null,n=null,o=null){let a=t.gl.getAttribLocation(e.shaderProgram,"in_pos");const h=t.gl.createBuffer();t.gl.bindBuffer(t.gl.ARRAY_BUFFER,h),t.gl.bufferData(t.gl.ARRAY_BUFFER,s,t.gl.STATIC_DRAW),t.gl.enableVertexAttribArray(a),t.gl.vertexAttribPointer(a,3,t.gl.FLOAT,!1,0,0);const l=t.gl.getAttribLocation(e.shaderProgram,"normal"),c=t.gl.createBuffer();if(t.gl.bindBuffer(t.gl.ARRAY_BUFFER,c),null==i&&(i=new Float32Array(E(s,r))),t.gl.bufferData(t.gl.ARRAY_BUFFER,i,t.gl.STATIC_DRAW),t.gl.enableVertexAttribArray(l),t.gl.vertexAttribPointer(l,3,t.gl.FLOAT,!1,0,0),null!=n){const s=t.gl.getAttribLocation(e.shaderProgram,"texCoord"),r=t.gl.createBuffer();t.gl.bindBuffer(t.gl.ARRAY_BUFFER,r),t.gl.bufferData(t.gl.ARRAY_BUFFER,n,t.gl.STATIC_DRAW),t.gl.enableVertexAttribArray(s),t.gl.vertexAttribPointer(s,2,t.gl.FLOAT,!1,0,0)}if(null!=o){const s=t.gl.getAttribLocation(e.shaderProgram,"color"),r=t.gl.createBuffer();t.gl.bindBuffer(t.gl.ARRAY_BUFFER,r),t.gl.bufferData(t.gl.ARRAY_BUFFER,o,t.gl.STATIC_DRAW),t.gl.enableVertexAttribArray(s),t.gl.vertexAttribPointer(s,4,t.gl.FLOAT,!1,0,0)}if(null!=r){const e=t.gl.createBuffer();t.gl.bindBuffer(t.gl.ELEMENT_ARRAY_BUFFER,e),t.gl.bufferData(t.gl.ELEMENT_ARRAY_BUFFER,r,t.gl.STATIC_DRAW)}}const T=new Float32Array([1,1,-1,1,1,1,1,-1,1,1,-1,-1,-1,1,1,-1,1,-1,-1,-1,-1,-1,-1,1,-1,1,1,1,1,1,1,1,-1,-1,1,-1,-1,-1,-1,1,-1,-1,1,-1,1,-1,-1,1,1,1,1,-1,1,1,-1,-1,1,1,-1,1,-1,1,-1,1,1,-1,1,-1,-1,-1,-1,-1]),k=new Uint16Array([0,1,2,0,2,3,4,5,6,4,6,7,8,9,10,8,10,11,12,13,14,12,14,15,16,17,18,16,18,19,20,21,22,20,22,23]);let _,B;function D(){t.gl.useProgram(B.shaderProgram);let e=t.gl.getUniformLocation(B.shaderProgram,"time");const s=t.gl.getUniformLocation(B.shaderProgram,"projection"),r=t.gl.getUniformLocation(B.shaderProgram,"modelView"),n=t.gl.getUniformLocation(B.shaderProgram,"world");t.gl.bindVertexArray(_),t.gl.uniformMatrix4fv(s,!1,new Float32Array(a.matrProj.a().join().split(",")));let o=new i;t.gl.uniformMatrix4fv(n,!1,new Float32Array(o.a().join().split(","))),t.gl.uniformMatrix4fv(r,!1,new Float32Array(a.matrView.a().join().split(","))),t.gl.uniform1f(e,Date.now());const h=t.gl.getUniformLocation(B.shaderProgram,"lightDir"),l=t.gl.getUniformLocation(B.shaderProgram,"camLoc");t.gl.uniform3f(h,1,2,3),t.gl.uniform3f(l,a.loc.x,a.loc.y,a.loc.z);const c=t.gl.getUniformLocation(B.shaderProgram,"ka"),u=t.gl.getUniformLocation(B.shaderProgram,"kd"),d=t.gl.getUniformLocation(B.shaderProgram,"ks"),g=t.gl.getUniformLocation(B.shaderProgram,"ph");t.gl.uniform3f(c,.0215,.1745,.0215),t.gl.uniform3f(u,.07568,.61424,.07568),t.gl.uniform3f(d,.633,.727811,.633),t.gl.uniform1f(g,76.8),t.gl.drawElements(t.gl.TRIANGLES,36,t.gl.UNSIGNED_SHORT,0)}async function U(){B=await R("rainbow"),_=t.gl.createVertexArray(),t.gl.bindVertexArray(_),P(B,T,k),t.gl.bindVertexArray(null)}const M=new Float32Array([1,1,1,1,-1,-1,-1,1,-1,-1,-1,1]),S=new Uint16Array([0,3,1,0,2,3,0,1,2,3,2,1]);let C,F;function z(){t.gl.useProgram(F.shaderProgram);let e=t.gl.getUniformLocation(F.shaderProgram,"time");const r=t.gl.getUniformLocation(F.shaderProgram,"projection"),n=t.gl.getUniformLocation(F.shaderProgram,"modelView"),o=t.gl.getUniformLocation(F.shaderProgram,"world");t.gl.bindVertexArray(C),t.gl.uniformMatrix4fv(r,!1,new Float32Array(a.matrProj.a().join().split(","))),t.gl.uniformMatrix4fv(n,!1,new Float32Array(a.matrView.a().join().split(",")));let h=new i;t.gl.uniformMatrix4fv(o,!1,new Float32Array(h.rotateZ(Date.now()/30).mul(h.translate(new s(0,3,0))).a().join().split(",")));const l=t.gl.getUniformLocation(F.shaderProgram,"lightDir"),c=t.gl.getUniformLocation(F.shaderProgram,"camLoc");t.gl.uniform1f(e,Date.now()),t.gl.uniform3f(l,1,2,3),t.gl.uniform3f(c,a.loc.x,a.loc.y,a.loc.z);const u=t.gl.getUniformLocation(F.shaderProgram,"ka"),d=t.gl.getUniformLocation(F.shaderProgram,"kd"),g=t.gl.getUniformLocation(F.shaderProgram,"ks"),f=t.gl.getUniformLocation(F.shaderProgram,"ph");t.gl.uniform3f(u,.24725,.2245,.0645),t.gl.uniform3f(d,.34615,.3143,.0903),t.gl.uniform3f(g,.797357,.723991,.208006),t.gl.uniform1f(f,83.2),t.gl.drawElements(t.gl.TRIANGLES,12,t.gl.UNSIGNED_SHORT,0)}async function N(){F=await R("withLight"),C=t.gl.createVertexArray(),t.gl.bindVertexArray(C),P(F,M,S),t.gl.bindVertexArray(null)}const O=new Float32Array([1,0,0,0,1,0,0,0,1,-1,0,0,0,-1,0,0,0,-1]),I=new Uint16Array([0,1,2,0,2,4,4,2,3,3,2,1,5,1,0,5,0,4,5,4,3,5,3,1]);let j,V;function q(){t.gl.useProgram(V.shaderProgram);let e=t.gl.getUniformLocation(V.shaderProgram,"time");const r=t.gl.getUniformLocation(V.shaderProgram,"projection"),n=t.gl.getUniformLocation(V.shaderProgram,"modelView"),o=t.gl.getUniformLocation(V.shaderProgram,"lightDir"),h=t.gl.getUniformLocation(V.shaderProgram,"camLoc"),l=t.gl.getUniformLocation(V.shaderProgram,"world");t.gl.bindVertexArray(j),t.gl.uniformMatrix4fv(r,!1,new Float32Array(a.matrProj.a().join().split(","))),t.gl.uniformMatrix4fv(n,!1,new Float32Array(a.matrView.a().join().split(",")));let c=new i;t.gl.uniform1f(e,Date.now()),t.gl.uniform3f(o,1,2,3),t.gl.uniform3f(h,a.loc.x,a.loc.y,a.loc.z),t.gl.uniformMatrix4fv(l,!1,new Float32Array(c.rotateY(180*Math.sin(Date.now()/1e3)).mul(c.translate(new s(3,0,0))).a().join().split(",")));const u=t.gl.getUniformLocation(V.shaderProgram,"ka"),d=t.gl.getUniformLocation(V.shaderProgram,"kd"),g=t.gl.getUniformLocation(V.shaderProgram,"ks"),f=t.gl.getUniformLocation(V.shaderProgram,"ph");t.gl.uniform3f(u,.05375,.05,.06625),t.gl.uniform3f(d,.18275,.17,.22525),t.gl.uniform3f(g,.332741,.328634,.346435),t.gl.uniform1f(f,38.4),t.gl.drawElements(t.gl.TRIANGLES,24,t.gl.UNSIGNED_SHORT,0)}async function H(){V=await R("withLight"),j=t.gl.createVertexArray(),t.gl.bindVertexArray(j),P(V,O,I),t.gl.bindVertexArray(null)}const Y=1.6180339887,X=new Float32Array([0,1,Y,1,Y,0,Y,0,1,0,-1,Y,-1,Y,0,Y,0,-1,0,1,-Y,1,-Y,0,-Y,0,1,0,-1,-Y,-1,-Y,0,-Y,0,-1]),W=new Uint16Array([0,2,1,0,1,4,0,4,8,0,8,3,0,3,2,11,8,4,11,4,6,11,6,9,11,9,10,11,10,9,7,3,10,7,10,9,7,9,5,7,5,2,7,2,3,2,5,1,1,5,6,5,6,9,10,3,8,1,4,6]);let K,G;function $(){t.gl.useProgram(G.shaderProgram);let e=t.gl.getUniformLocation(G.shaderProgram,"time");const r=t.gl.getUniformLocation(G.shaderProgram,"projection"),n=t.gl.getUniformLocation(G.shaderProgram,"modelView"),o=t.gl.getUniformLocation(G.shaderProgram,"world");t.gl.bindVertexArray(K),t.gl.uniformMatrix4fv(r,!1,new Float32Array(a.matrProj.a().join().split(","))),t.gl.uniformMatrix4fv(n,!1,new Float32Array(a.matrView.a().join().split(",")));let h=new i;t.gl.uniformMatrix4fv(o,!1,new Float32Array(h.rotateX(Date.now()/10).mul(h.translate(new s(-3,0,0))).a().join().split(",")));const l=t.gl.getUniformLocation(G.shaderProgram,"camLoc"),c=t.gl.getUniformLocation(G.shaderProgram,"lightDir");t.gl.uniform3f(c,1,1,1),t.gl.uniform3f(l,a.loc.x,a.loc.y,a.loc.z);const u=t.gl.getUniformLocation(G.shaderProgram,"ka"),d=t.gl.getUniformLocation(G.shaderProgram,"kd"),g=t.gl.getUniformLocation(G.shaderProgram,"ks"),f=t.gl.getUniformLocation(G.shaderProgram,"ph");t.gl.uniform3f(u,Math.sin(Date.now()/500)/4+.25,Math.cos(Date.now()/300)/4+.25,Math.sin(Date.now()/1e3+5)/4+.25),t.gl.uniform3f(d,.07568,.61424,.07568),t.gl.uniform3f(g,.633,.727811,.633),t.gl.uniform1f(f,76.8),t.gl.uniform1f(e,Date.now()),t.gl.drawElements(t.gl.TRIANGLES,60,t.gl.UNSIGNED_SHORT,0)}async function Q(){G=await R("withLight"),K=t.gl.createVertexArray(),t.gl.bindVertexArray(K),P(G,X,W),t.gl.bindVertexArray(null)}const J=new Float32Array([0,1,0,0,0,.5,0,0,-.5,0,1,0,.5,0,0,-.5,0,0]);let Z,tt,et,st,rt=[];function it(){t.gl.useProgram(st.shaderProgram),t.gl.bindVertexArray(et);const e=t.gl.getUniformLocation(st.shaderProgram,"projection"),s=t.gl.getUniformLocation(st.shaderProgram,"modelView");Z=t.gl.getUniformLocation(st.shaderProgram,"world"),tt=t.gl.getUniformLocation(st.shaderProgram,"color"),t.gl.uniformMatrix4fv(e,!1,new Float32Array(a.matrProj.a().join().split(","))),t.gl.uniformMatrix4fv(s,!1,new Float32Array(a.matrView.a().join().split(",")));let i=new r(.8,.47,.3,1);t.gl.uniform4f(tt,i.x,i.y,i.z,i.w),rt.forEach((e=>{t.gl.uniformMatrix4fv(Z,!1,e),t.gl.drawArrays(t.gl.TRIANGLES,0,6)})),rt=[]}async function nt(){st=await R("markers"),et=t.gl.createVertexArray(),t.gl.bindVertexArray(et),P(st,J),t.gl.bindVertexArray(null)}function ot(t=new s(0),e=new s(100),r=1){let n=new i,o=new s(0,1,0),a=e.sub(t);rt.push(new Float32Array(n.scale(new s(r,a.len(),r)).mul(n.rotate(180,a.normalize().lerp(o,.5).normalize())).mul(n.translate(t)).a().join().split(",")))}function at(){ot(new s(0,0,0),a.userLoc.sub(new s(0,1,0)),1),ot(new s(0,0,0),new s(10,10,10),1)}async function ht(){}function lt(){for(let t=0;t<300;t++)ot(new s(3*t,0,0),new s(3*t,t,Math.sin(t)*t*2),.1*t);ot(new s(0,0,0),new s(1,1,1),1),ot(new s(0,0,0),new s(-1,-1,-1),1)}async function ct(){}let ut=[];class dt{constructor(t="Name not set",e=new s(.25,.25,.25),r=new s(.4,.4,.4),i=new s(.774597,.774597,.774597),n=76.8,o=1,a=null,h=[null]){this.ka=e,this.kd=r,this.ks=i,this.ph=n,this.trans=o,this.shaderName=a,this.tex=[...h],this.name=t}}function gt(t){let e=t.target.files[0],s=new FileReader;s.readAsText(e),s.onload=t=>{ft(t.target.result).then((t=>ut.push(t)))},s.onerror=function(){console.log(s.error)}}async function ft(t){let r=[0],i=[],n=[],o=t.split("\n");for(let t=0;t<o.length;t++){let e=o[t].split(" ");if("v"==e[0]){let t=+e[1],i=+e[2],n=+e[3];r.push(new s(t,i,n))}else if("f"==e[0])i.push(+e[1].split("/")[0]),i.push(+e[2].split("/")[0]),i.push(+e[3].split("/")[0]);else if("vn"==e[0]){let t=+e[1],r=+e[2],i=+e[3];n.push(new s(t,r,i))}}0==n.length&&(n=E(r,i));let a=[];r.forEach(((t,s)=>a.push(new pt(t,new e,n[s]))));let h=new mt(a,i);return h.mtl=new dt,h.mtl.shaderName="withLight",await h.create(),h}class pt{constructor(t=new s,i=new e,n=new s,o=new r){this.p=t,this.t=i,this.n=n,this.c=o}}class mt{constructor(e,s=null,r=null,n=new i,o=t.gl.TRIANGLES,a=null){this.va=a,this.mtl=r,this.vBuf=e,this.iBuf=s,this.trans=n,this.type=o}draw(e,...s){t.gl.useProgram(this.shader.shaderProgram);let r=t.gl.getUniformLocation(this.shader.shaderProgram,"time");const i=t.gl.getUniformLocation(this.shader.shaderProgram,"projection"),n=t.gl.getUniformLocation(this.shader.shaderProgram,"modelView"),o=t.gl.getUniformLocation(this.shader.shaderProgram,"lightDir"),h=t.gl.getUniformLocation(this.shader.shaderProgram,"camLoc"),l=t.gl.getUniformLocation(this.shader.shaderProgram,"world");t.gl.bindVertexArray(this.va),t.gl.uniformMatrix4fv(i,!1,new Float32Array(a.matrProj.a().join().split(","))),t.gl.uniformMatrix4fv(n,!1,new Float32Array(a.matrView.a().join().split(",")));for(let e=0;e<8;e++){const r=t.gl.getUniformLocation(this.shader.shaderProgram,"shdAddon"+e);-1!=r&&null!=r&&t.gl.uniform1i(r,s[e])}t.gl.uniform1f(r,Date.now()),t.gl.uniform3f(o,1,2,3),t.gl.uniform3f(h,a.loc.x,a.loc.y,a.loc.z),t.gl.uniformMatrix4fv(l,!1,new Float32Array(e.a().join().split(",")));const c=t.gl.getUniformLocation(this.shader.shaderProgram,"ka"),u=t.gl.getUniformLocation(this.shader.shaderProgram,"kd"),d=t.gl.getUniformLocation(this.shader.shaderProgram,"ks"),g=t.gl.getUniformLocation(this.shader.shaderProgram,"ph");t.gl.uniform3f(c,this.mtl.ka.x,this.mtl.ka.y,this.mtl.ka.z),t.gl.uniform3f(u,this.mtl.kd.x,this.mtl.kd.y,this.mtl.kd.z),t.gl.uniform3f(d,this.mtl.ks.x,this.mtl.ks.y,this.mtl.ks.z),t.gl.uniform1f(g,this.mtl.ph),t.gl.bindTexture(t.gl.TEXTURE_2D,null),this.mtl.tex.forEach(((e,s)=>{if(e&&null!=e&&-1!=e){t.gl.activeTexture(t.gl.TEXTURE0+s),t.gl.bindTexture(t.gl.TEXTURE_2D,e);let r=t.gl.getUniformLocation(this.shader.shaderProgram,"tex"+s);t.gl.uniform1i(r,s)}})),null!=this.iBuf?t.gl.drawElements(t.gl.TRIANGLES,this.iBuf.length,t.gl.UNSIGNED_SHORT,0):t.gl.drawArrays(t.gl.type,0,this.vBuf.length)}async create(){this.shader=await R(this.mtl.shaderName),this.va=t.gl.createVertexArray(),t.gl.bindVertexArray(this.va),P(this.shader,new Float32Array(this.vBuf.map((t=>[t.p.x,t.p.y,t.p.z])).flat()),new Uint16Array(this.iBuf),new Float32Array(this.vBuf.map((t=>[t.n.x,t.n.y,t.n.z])).flat()),new Float32Array(this.vBuf.map((t=>[t.t.x,t.t.y])).flat()),new Float32Array(this.vBuf.map((t=>[t.c.x,t.c.y,t.c.z,t.c.w])).flat())),t.gl.bindVertexArray(null)}}class yt{constructor(t){this.numOfPrims=t,this.trans=new i,this.minBB=this.maxBB=new s(0),this.prims=[]}draw(t,...e){const s=this.trans.mul(t);for(let t=0;t<this.numOfPrims;t++)this.prims[t].draw(s,this.numOfPrims,t,...e)}async create(){for(let t of this.prims)await t.create()}}function wt(e,s,r){let i=t.gl.createTexture();return t.gl.bindTexture(t.gl.TEXTURE_2D,i),t.gl.texImage2D(t.gl.TEXTURE_2D,0,t.gl.RGBA,s,r,0,t.gl.RGBA,t.gl.UNSIGNED_BYTE,e),t.gl.texParameteri(t.gl.TEXTURE_2D,t.gl.TEXTURE_MAG_FILTER,t.gl.NEAREST),t.gl.texParameteri(t.gl.TEXTURE_2D,t.gl.TEXTURE_MIN_FILTER,t.gl.NEAREST),i}async function bt(t){const i=await fetch(t);let n=await i.arrayBuffer(),o=new Uint8Array(n),a=[],h=[],l=0;if("G3DM"!==o.slice(l,l+=4).reduce(((t,e)=>t+String.fromCharCode(e)),""))return null;let[c,u,d]=new Uint32Array(n.slice(l,l+=12)),g=new yt(c);for(let t=0;t<c;t++){let[i,o,a]=new Uint32Array(n.slice(l,l+=12)),h=new Float32Array(n.slice(l,l+=48*i)),c=new Uint32Array(n.slice(l,l+=4*o)),u=[];for(let t=0;t<h.length;t+=12)u.push(new pt(new s(h[t],h[t+1],h[t+2]),new e(h[t+3],h[t+4]),new s(h[t+5],h[t+6],h[t+7]),new r(h[t+8],h[t+9],h[t+10],h[t+11])));g.prims.push(new mt(u,c)),g.prims[t].mtlNo=a}for(let t=0;t<u;t++){const e=o.slice(l,l+=300).reduce(((t,e)=>t+(0==e?"":String.fromCharCode(e))),"");let r=new Float32Array(n.slice(l,l+=44)),i=new Int32Array(n.slice(l,l+=32)),h=new dt(e,new s(r[0],r[1],r[2]),new s(r[3],r[4],r[5]),new s(r[6],r[7],r[8]),r[9],r[10],"tex");h.texNo=[];for(let t=0;t<8;t++)h.texNo[t]=i[t];a[t]=h,l+=304}for(let t=0;t<d;t++){o.slice(l,l+=300).reduce(((t,e)=>t+(0==e?"":String.fromCharCode(e))),"");let[e,s,r]=new Uint32Array(n.slice(l,l+=12)),i=o.slice(l,l+=e*s*r);for(let t=0;t<i.length;t+=4){const e=i[t];i[t]=i[t+2],i[t+2]=e}h[t]=wt(i,e,s)}for(let t of a)for(let e=0;e<8;e++)t.tex[e]=-1==t.texNo[e]?-1:h[t.texNo[e]];for(let t of g.prims)t.mtl=null!=t.mtlNo?a[t.mtlNo]:new dt;return await g.create(),g}function xt(){ut.forEach((t=>t.draw(t.trans)))}async function At(){}const Et=new Float32Array([10,-5,10,-10,-5,-10,10,-5,-10,10,-5,10,-10,-5,10,-10,-5,-10]);for(let t=0;t<18;t+=3)Et[t]*=100,Et[t+1]=0,Et[t+2]*=100;let Lt,vt,Rt;function Pt(){t.gl.useProgram(vt.shaderProgram);let e=t.gl.getUniformLocation(vt.shaderProgram,"time");const r=t.gl.getUniformLocation(vt.shaderProgram,"projection"),n=t.gl.getUniformLocation(vt.shaderProgram,"modelView"),o=t.gl.getUniformLocation(vt.shaderProgram,"world");t.gl.bindVertexArray(Lt),t.gl.uniformMatrix4fv(r,!1,new Float32Array(a.matrProj.a().join().split(","))),t.gl.uniformMatrix4fv(n,!1,new Float32Array(a.matrView.a().join().split(",")));let h=new i;t.gl.uniformMatrix4fv(o,!1,new Float32Array(h.translate(new s(-3,0,0)).a().join().split(",")));const l=t.gl.getUniformLocation(vt.shaderProgram,"camLoc"),c=t.gl.getUniformLocation(vt.shaderProgram,"lightDir");t.gl.uniform3f(c,1,1,1),t.gl.uniform3f(l,a.loc.x,a.loc.y,a.loc.z);const u=t.gl.getUniformLocation(vt.shaderProgram,"ka"),d=t.gl.getUniformLocation(vt.shaderProgram,"kd"),g=t.gl.getUniformLocation(vt.shaderProgram,"ks"),f=t.gl.getUniformLocation(vt.shaderProgram,"ph");t.gl.uniform3f(u,.01,.3,.1),t.gl.uniform3f(d,.07568,.61424,.07568),t.gl.uniform3f(g,.633,.727811,.633),t.gl.uniform1f(f,76.8),t.gl.uniform1f(e,Date.now()),t.gl.drawArrays(t.gl.TRIANGLES,0,6)}async function Tt(){vt=await R("withLight"),Lt=t.gl.createVertexArray(),t.gl.bindVertexArray(Lt),P(vt,Et),t.gl.bindVertexArray(null)}let kt,_t=new i;function Bt(){Rt.mtl.ka.x=Math.sin(Date.now()/100),Rt.draw(_t.scale(new s(1*(Math.sin(Date.now()/500)+2),1*(Math.cos(Date.now()/200)+2),1*(Math.sin(Date.now()/300+5)+2))).mul(_t.translate(new s(0,-3,0))))}async function Dt(){let t;const e=fetch("bin/models/dode.obj").then((t=>t.text())).then((e=>{t=e}));await e.then((()=>{ft(t).then((t=>Rt=t))}))}let Ut,Mt=new i,St=1;function Ct(){if(St){kt.draw(Mt.scale(new s(.2*(Math.sin(Date.now()/200)/5+1.2),.2*(Math.cos(Date.now()/300)/5+1.2),.2*(Math.sin(Date.now()/400+5)/5+1.2))).mul(Mt.translate(new s(0,-3,0))).mul(Mt.translate(new s(-10,0,0))));let t=40;for(let e=0;e<t*t;e++)kt.mtl.ka=new s(.4*(Math.sin(Date.now()/200+e)/5+1.2),.4*(Math.cos(Date.now()/300+e)/5+1.2),.4*(Math.sin(Date.now()/400+5+e)/5+1.2)),kt.draw(Mt.scale(new s(.2*(Math.sin(Date.now()/200+e)/5+1.2),.2*(Math.cos(Date.now()/300+e)/5+1.2),.2*(Math.sin(Date.now()/400+5+e)/5+1.2))).mul(Mt.translate(new s(0,5*Math.floor(e/t),-e%t*5))))}}async function Ft(){let t;await fetch("bin/models/cow1.obj").then((t=>t.text())).then((e=>{t=e})).catch((()=>St=0)),kt=await ft(t),kt.mtl.shaderName="withLightSmooth",await kt.create()}let zt,Nt,Ot=new i,It=new s(0,0,-1);function jt(){a.mode=2,Ut.draw(Ot.rotateY(180*It.angle(a.userDir)/Math.PI).mul(Ot.translate(new s(a.userLoc.x,.5,a.userLoc.z))));for(let e of t.users)if(null!=e&&a.id!=e.id){let r=Ot.rotateY(180*It.angle(new s(e.userDir.x,e.userDir.y,e.userDir.z))/Math.PI).mul(Ot.translate(new s(e.userLoc.x,.5,e.userLoc.z)));Ut.draw(r);let i=new s(e.userLoc.x,e.userLoc.y,e.userLoc.z);if(a.dir.angle(i.sub(a.loc))>1.57||a.dir.angle(i.sub(a.loc))<-1.57)continue;i=i.mulMatr(a.matrView).mulMatr(a.matrProj);let n=(.5*i.x+.5)*t.gl.canvas.width,o=(-.5*i.y+.5)*t.gl.canvas.height,h=document.createElement("span");const l=document.createTextNode(e.userName);h.appendChild(l),h.className="place",h.style.left=Math.floor(n)+"px",h.style.top=Math.floor(o)+"px",h.style.position="absolute",h.style.fontSize="24px",h.style.color="green",h.style.fontFamily="impact",h.style.backgroundColor="black",h.style.borderRadius="10px",h.style.paddingRight=h.style.paddingLeft="3px",zt.appendChild(h)}}async function Vt(){zt=document.getElementById("places"),Ut=await bt("bin/models/bike.g3dm"),Ut.prims.forEach((t=>{t.mtl.shaderName="bike"})),await Ut.create()}let qt,Ht=new i,Yt=new s(0,0,-1);function Xt(){a.mode=1,Nt.draw(Ht.rotateY(180*Yt.angle(a.userDir)/Math.PI+180).mul(Ht.scale(new s(2,2,2))).mul(Ht.translate(new s(a.userLoc.x,0,a.userLoc.z))),!0),a.userLoc.copy();for(let e of t.users)if(null!=e&&a.id!=e.id){let r=Ht.rotateY(180*Yt.angle(new s(e.right.x,e.right.y,e.right.z))/Math.PI+180).mul(Ht.scale(new s(2,2,2))).mul(Ht.translate(new s(e.userLoc.x,0,e.userLoc.z)));Nt.draw(r);let i=new s(e.userLoc.x,e.userLoc.y,e.userLoc.z);if(a.userDir.angle(i.sub(a.loc))>1.57||a.userDir.angle(i.sub(a.loc))<-1.57)continue;i=i.mulMatr(a.matrView).mulMatr(a.matrProj);let n=(.5*i.x+.5)*t.gl.canvas.width,o=(-.5*i.y+.5)*t.gl.canvas.height,h=document.createElement("span");const l=document.createTextNode(e.userName);h.appendChild(l),h.className="place",h.style.left=Math.floor(n)+"px",h.style.top=Math.floor(o)+"px",h.style.position="absolute",h.style.fontSize="24px",h.style.color="green",h.style.fontFamily="impact",h.style.backgroundColor="black",h.style.borderRadius="10px",h.style.paddingRight=h.style.paddingLeft="3px",qt.appendChild(h)}}async function Wt(){qt=document.getElementById("places"),Nt=await bt("bin/models/mer.g3dm"),Nt.prims.forEach((t=>{t.mtl.shaderName="user",t.create()})),await Nt.create()}a.userLoc.copy();let Kt=11,Gt=20,$t=16;const Qt=new Float32Array([Gt/2,0,Gt/2,-Gt/2,0,Gt/2,Gt/2,0,-Gt/2,Gt/2,0,-Gt/2,-Gt/2,0,Gt/2,-Gt/2,0,-Gt/2]),Jt=new Float32Array([1,1,0,1,1,0,1,0,0,1,0,0]);let Zt,te,ee,se=[],re=new s(0,1e3,0),ie=$t*$t,ne=5*ie;const oe=function(t,e){return Math.floor((t+180)/360*Math.pow(2,e))}(30.3350986,Kt),ae=function(t,e){return Math.floor((1-Math.log(Math.tan(t*Math.PI/180)+1/Math.cos(t*Math.PI/180))/Math.PI)/2*Math.pow(2,e))}(59.9342802,Kt);async function he(t,e,s,r,i=i,n){{let o=fe(s-5,i),a=pe(r-5,i),h=fe(s+5,i),l=pe(r+5,i),c="49a02e9955fe4bd38881e3ec2c56f795";c="12b046bb99314b748355834551cd58d0";let u=`https://api.geoapify.com/v2/places?categories=${e}&filter=rect%3A${o}%2C${a}%2C${h}%2C${l}&limit=${n}&apiKey=`;u=`https://api.geoapify.com/v2/places?categories=${e}&filter=rect%3A${o}%2C${a}%2C${h}%2C${l}&limit=${n}&apiKey=${c}`;try{let e=await fetch(u,{method:"GET"}),s=await e.json();return t.push(...s.features.map((t=>({name:t.properties.name,x:de(t.properties.lon,i)-oe,y:ge(t.properties.lat,i)-ae}))).filter((t=>t.name))),!0}catch(t){return!1}}}class le{constructor(t){this.blockPos=t,this.places=[],this.loadCounter=0}async load(){let e=0,s=0;e=oe+this.blockPos.x,s=ae+this.blockPos.z;let r=`https://api.mapbox.com/v4/mapbox.satellite/11/${e}/${s}.png?access_token=pk.eyJ1IjoibHM0IiwiYSI6ImNsaXluYmYyODA1bnAzcXQ4amlweGowc3gifQ.6cQiQQxsiO3WUIbKFOQrmw`;e%5==0&&s%5==0&&(he(this.places,"populated_place.city",e,s,Kt,10),he(this.places,"populated_place.county",e,s,Kt,10),he(this.places,"natural.mountain",e,s,Kt,10),he(this.places,"natural.water",e,s,Kt,10));try{let e=await fetch(r);if(e.ok){let s=await e.blob(),r=await createImageBitmap(s);this.texture=t.gl.createTexture(),t.gl.bindTexture(t.gl.TEXTURE_2D,this.texture),t.gl.texImage2D(t.gl.TEXTURE_2D,0,t.gl.RGBA,r.width,r.height,0,t.gl.RGBA,t.gl.UNSIGNED_BYTE,r),t.gl.texParameteri(t.gl.TEXTURE_2D,t.gl.TEXTURE_MIN_FILTER,t.gl.NEAREST),t.gl.texParameteri(t.gl.TEXTURE_2D,t.gl.TEXTURE_MAG_FILTER,t.gl.NEAREST),t.gl.texParameteri(t.gl.TEXTURE_2D,t.gl.TEXTURE_WRAP_S,t.gl.CLAMP_TO_EDGE),t.gl.texParameteri(t.gl.TEXTURE_2D,t.gl.TEXTURE_WRAP_T,t.gl.CLAMP_TO_EDGE),this.isLoaded=!0}else this.loadCounter++<3?this.load():console.log(`At url ${r} was an HTTP error: `+e.status)}catch(t){this.loadCounter++<3?this.load():console.log(`At url ${r} was an HTTP error: `+t)}return this}}function ce(){t.gl.useProgram(ee.shaderProgram);let e=t.gl.getUniformLocation(ee.shaderProgram,"time");const r=t.gl.getUniformLocation(ee.shaderProgram,"projection"),n=t.gl.getUniformLocation(ee.shaderProgram,"modelView"),o=t.gl.getUniformLocation(ee.shaderProgram,"world");t.gl.bindVertexArray(te),t.gl.uniformMatrix4fv(r,!1,new Float32Array(a.matrProj.a().join().split(","))),t.gl.uniformMatrix4fv(n,!1,new Float32Array(a.matrView.a().join().split(",")));let h=new i;const l=t.gl.getUniformLocation(ee.shaderProgram,"camLoc"),c=t.gl.getUniformLocation(ee.shaderProgram,"lightDir");t.gl.uniform3f(c,1,1,1),t.gl.uniform3f(l,a.loc.x,a.loc.y,a.loc.z);const u=t.gl.getUniformLocation(ee.shaderProgram,"ka"),d=t.gl.getUniformLocation(ee.shaderProgram,"kd"),g=t.gl.getUniformLocation(ee.shaderProgram,"ks"),f=t.gl.getUniformLocation(ee.shaderProgram,"ph");t.gl.uniform3f(u,.01,.3,.1),t.gl.uniform3f(d,.07568,.61424,.07568),t.gl.uniform3f(g,.633,.727811,.633),t.gl.uniform1f(f,76.8),t.gl.uniform1f(e,Date.now());const p=t.gl.getUniformLocation(ee.shaderProgram,"tex0");re.sub(a.userLoc).len2()>Gt*Gt*10&&(!function(){a.userBlockPos=new s(Math.floor(a.userLoc.x/Gt),0,Math.floor(a.userLoc.z/Gt)),se=se.filter((t=>(t.blockPos.x-a.userBlockPos.x)*(t.blockPos.x-a.userBlockPos.x)+(t.blockPos.z-a.userBlockPos.z)*(t.blockPos.z-a.userBlockPos.z)<ne));for(let t=1-$t;t<$t;t++)for(let e=1-$t;e<$t;e++)if(t*t+e*e<ie&&!se.find((s=>s.blockPos.x==t+a.userBlockPos.x&&s.blockPos.z==e+a.userBlockPos.z))){let r=new le(new s(t+a.userBlockPos.x,0,e+a.userBlockPos.z));r.load(),se.push(r)}}(),re=a.userLoc.copy()),Zt.innerHTML="";for(let e=0;e<se.length;e++){let r=h.translate(new s(se[e].blockPos.x*Gt,0,se[e].blockPos.z*Gt));t.gl.uniformMatrix4fv(o,!1,new Float32Array(r.a().join().split(","))),t.gl.activeTexture(t.gl.TEXTURE0+0),t.gl.bindTexture(t.gl.TEXTURE_2D,se[e].texture),t.gl.uniform1i(p,0),t.gl.drawArrays(t.gl.TRIANGLES,0,6);for(let r=0;r<se[e].places.length;r++){let i=new s(se[e].places[r].x*Gt,0,se[e].places[r].y*Gt);if(a.dir.angle(i.sub(a.loc))>1.57||a.dir.angle(i.sub(a.loc))<-1.57)continue;i=i.mulMatr(a.matrView).mulMatr(a.matrProj);let n=(.5*i.x+.5)*t.gl.canvas.width,o=(-.5*i.y+.5)*t.gl.canvas.height,h=document.createElement("span");const l=document.createTextNode(se[e].places[r].name);h.appendChild(l),h.className="place",h.style.left=Math.floor(n)+"px",h.style.top=Math.floor(o)+"px",h.style.position="absolute",h.style.color="red",h.style.fontFamily="impact",h.style.backgroundColor="black",h.style.borderRadius="10px",h.style.paddingRight=h.style.paddingLeft="3px",Zt.appendChild(h)}}}async function ue(){ee=await R("map"),te=t.gl.createVertexArray(),t.gl.bindVertexArray(te),P(ee,Qt);const e=t.gl.getAttribLocation(ee.shaderProgram,"texCoord"),r=t.gl.createBuffer();t.gl.bindBuffer(t.gl.ARRAY_BUFFER,r),t.gl.bufferData(t.gl.ARRAY_BUFFER,Jt,t.gl.STATIC_DRAW),t.gl.enableVertexAttribArray(e),t.gl.vertexAttribPointer(e,2,t.gl.FLOAT,!1,0,0),t.gl.bindVertexArray(null),a.userBlockPos=new s(Math.floor(a.userLoc.x/Gt),0,Math.floor(a.userLoc.z/Gt)),Zt=document.getElementById("places")}function de(t,e){return(t+180)/360*Math.pow(2,e)}function ge(t,e){return(1-Math.log(Math.tan(t*Math.PI/180)+1/Math.cos(t*Math.PI/180))/Math.PI)/2*Math.pow(2,e)}function fe(t,e){return t/Math.pow(2,e)*360-180}function pe(t,e){var s=Math.PI-2*Math.PI*t/Math.pow(2,e);return 180/Math.PI*Math.atan(.5*(Math.exp(s)-Math.exp(-s)))}let me,ye,we,be=[];const xe=document.getElementById("rcoeff"),Ae=document.getElementById("gcoeff"),Ee=document.getElementById("bcoeff"),Le=document.getElementById("a"),ve=document.getElementById("b");let Re,Pe,Te,ke,_e,Be,De=Date.now(),Ue=6;function Me(){t.gl.disable(t.gl.DEPTH_TEST),t.gl.bindFramebuffer(t.gl.FRAMEBUFFER,Te),t.gl.viewport(0,0,Re,Pe),t.gl.bindVertexArray(we),t.gl.useProgram(me.shaderProgram);let e=t.gl.getUniformLocation(me.shaderProgram,"time"),s=t.gl.getUniformLocation(me.shaderProgram,"x"),r=t.gl.getUniformLocation(me.shaderProgram,"y"),i=t.gl.getUniformLocation(me.shaderProgram,"zoom"),n=t.gl.getUniformLocation(me.shaderProgram,"rcoeff"),o=t.gl.getUniformLocation(me.shaderProgram,"gcoeff"),h=t.gl.getUniformLocation(me.shaderProgram,"bcoeff"),l=t.gl.getUniformLocation(me.shaderProgram,"a"),c=t.gl.getUniformLocation(me.shaderProgram,"b");t.gl.uniform1f(e,(Date.now()-De)/1e3),t.gl.uniform1f(r,.4),t.gl.uniform1f(s,.4),t.gl.uniform1f(i,1),t.gl.uniform1f(n,xe.value),t.gl.uniform1f(o,Ae.value),t.gl.uniform1f(h,Ee.value),t.gl.uniform1f(l,Le.value),t.gl.uniform1f(c,5*ve.value),t.gl.useProgram(me.shaderProgram),t.gl.drawArrays(t.gl.TRIANGLE_STRIP,0,4),t.gl.useProgram(ye.shaderProgram);const u=t.gl.getUniformLocation(ye.shaderProgram,"tex0");t.gl.bindFramebuffer(t.gl.FRAMEBUFFER,null),t.gl.viewport(0,0,a.frameW,a.frameH),t.gl.activeTexture(t.gl.TEXTURE0+Ue),t.gl.bindTexture(t.gl.TEXTURE_2D,ke),t.gl.uniform1i(u,Ue);let d=t.gl.getUniformLocation(ye.shaderProgram,"camDir"),g=t.gl.getUniformLocation(ye.shaderProgram,"camUp"),f=t.gl.getUniformLocation(ye.shaderProgram,"camRight"),p=t.gl.getUniformLocation(ye.shaderProgram,"projDist"),m=t.gl.getUniformLocation(ye.shaderProgram,"frameW"),y=t.gl.getUniformLocation(ye.shaderProgram,"frameH");t.gl.uniform3f(d,a.dir.x,a.dir.y,a.dir.z),t.gl.uniform3f(g,a.up.x,a.up.y,a.up.z),t.gl.uniform3f(f,a.right.x,a.right.y,a.right.z),t.gl.uniform1f(p,a.projDist),t.gl.uniform1f(m,a.frameW),t.gl.uniform1f(y,a.frameH),t.gl.useProgram(ye.shaderProgram),t.gl.drawArrays(t.gl.TRIANGLE_STRIP,0,4),t.gl.enable(t.gl.DEPTH_TEST)}async function Se(){we=t.gl.createVertexArray(),t.gl.bindVertexArray(we),me=await R("mandelbrot"),be=[-1,-1,0,-1,1,0,1,-1,0,1,1,0];let e=t.gl.getAttribLocation(me.shaderProgram,"in_pos"),s=t.gl.createBuffer();t.gl.bindBuffer(t.gl.ARRAY_BUFFER,s),t.gl.bufferData(t.gl.ARRAY_BUFFER,new Float32Array(be),t.gl.STATIC_DRAW),t.gl.enableVertexAttribArray(e),t.gl.vertexAttribPointer(e,3,t.gl.FLOAT,!1,0,0),ye=await R("sky"),e=t.gl.getAttribLocation(me.shaderProgram,"in_pos"),s=t.gl.createBuffer(),t.gl.bindBuffer(t.gl.ARRAY_BUFFER,s),t.gl.bufferData(t.gl.ARRAY_BUFFER,new Float32Array(be),t.gl.STATIC_DRAW),t.gl.enableVertexAttribArray(e),t.gl.vertexAttribPointer(e,3,t.gl.FLOAT,!1,0,0),Re=3*a.frameW,Pe=3*a.frameH,ke=t.gl.createTexture(),t.gl.bindTexture(t.gl.TEXTURE_2D,ke),t.gl.texImage2D(t.gl.TEXTURE_2D,0,t.gl.RGBA,Re,Pe,0,t.gl.RGBA,t.gl.UNSIGNED_BYTE,null),t.gl.texParameteri(t.gl.TEXTURE_2D,t.gl.TEXTURE_MIN_FILTER,t.gl.LINEAR),_e=t.gl.createRenderbuffer(),t.gl.bindRenderbuffer(t.gl.RENDERBUFFER,_e),t.gl.renderbufferStorage(t.gl.RENDERBUFFER,t.gl.DEPTH_COMPONENT16,Re,Pe),Te=t.gl.createFramebuffer(),t.gl.bindFramebuffer(t.gl.FRAMEBUFFER,Te),t.gl.framebufferTexture2D(t.gl.FRAMEBUFFER,t.gl.COLOR_ATTACHMENT0,t.gl.TEXTURE_2D,ke,0),t.gl.framebufferRenderbuffer(t.gl.FRAMEBUFFER,t.gl.DEPTH_ATTACHMENT,t.gl.RENDERBUFFER,_e),t.gl.bindVertexArray(null),t.gl.bindFramebuffer(t.gl.FRAMEBUFFER,null),t.gl.bindRenderbuffer(t.gl.RENDERBUFFER,null)}function Ce(){document.getElementById("infoButton").onclick=()=>{document.getElementById("info").style.visibility="visible"==document.getElementById("info").style.visibility?"hidden":"visible"},document.getElementById("info").style.color="black";let t=new s(0,0,-1);document.getElementById("compassBox").style.backgroundPosition=1800*t.angle(new s(a.dir.x,0,a.dir.z))/Math.PI+400+"px 0px",Be.innerHTML="LocX: "+a.loc.x.toString().slice(0,5)+" LocY: "+a.loc.y.toString().slice(0,5)+" LocZ: "+a.loc.z.toString().slice(0,5)+"<br /> Dir X: "+a.dir.x.toString().slice(0,5)+" Dir Y: "+a.dir.y.toString().slice(0,5)+" Dir Z: "+a.dir.z.toString().slice(0,5)+"<br /> Up X: "+a.up.x.toString().slice(0,5)+" Up Y: "+a.up.y.toString().slice(0,5)+" Up Z: "+a.up.z.toString().slice(0,5)+"<br /> At X: "+a.at.x.toString().slice(0,5)+" At Y: "+a.at.y.toString().slice(0,5)+" At Z: "+a.at.z.toString().slice(0,5)+"<br /> UserDir X: "+a.userDir.x.toString().slice(0,5)+" userDir: "+a.userDir.y.toString().slice(0,5)+" userDir Z: "+a.userDir.z.toString().slice(0,5)+"<br /> UserLoc X: "+a.userLoc.x.toString().slice(0,5)+" userLoc: "+a.userLoc.y.toString().slice(0,5)+" userLoc Z: "+a.userLoc.z.toString().slice(0,5)+"<br />"}async function Fe(){Be=document.getElementById("coords")}const ze=new class{constructor(){this.w=0,this.h=0,this.size=.1,this.numOfConstraints=0,this.constraints=[],this.p=[],this.oldP=[],this.forces=[],this.wind=new s(0,0,0),this.weight=0,this.friction=0,this.stiffness=0,this.handleCollisions=null,this.handleHardConstraints=null,this.numIterations=1}createDefault(t=10,e=10,r=.01,i=1,n=.99,o=.99){this.w=t,this.h=e,this.weight=r,this.friction=n,this.stiffness=o,this.size=i;let a=0;for(let r=0;r<e;r++)for(let n=0;n<t;n++)n<t-1&&(this.constraints[a]={particleA:r*t+n,particleB:r*t+(n+1),restLength:i,damper:0,stretch:new s},a++),r<e-1&&(this.constraints[a]={particleA:r*t+n,particleB:(r+1)*t+n,restLength:i,damper:0,stretch:new s},a++);this.numOfConstraints=a;for(let r=0;r<e;r++)for(let e=0;e<t;e++){const n=new s(e*i,0,r*i);this.p[r*t+e]=n,this.oldP[r*t+e]=n.copy()}}accumulateForces(){for(let t=0;t<this.w*this.h;t++)this.forces[t]=this.wind.add(new s(0,-this.weight,0))}verletStep(){for(let t=0;t<this.w*this.h;t++){const e=this.p[t].copy(),s=this.p[t].add(this.p[t].sub(this.oldP[t]).mul(this.friction)).add(this.forces[t].mul(10));this.p[t]=s.copy(),this.oldP[t]=e.copy()}}satisfyConstraints(){for(let t=0;t<this.numIterations;t++){null!==this.handleCollisions&&this.handleCollisions(this);for(let t=0;t<this.numOfConstraints;t++){const e=this.constraints[t];let s=this.p[e.particleB].sub(this.p[e.particleA]);s=s.mul(this.stiffness*e.restLength/(s.len()+e.restLength)-.5),this.p[e.particleA]=this.p[e.particleA].sub(s),this.p[e.particleB]=this.p[e.particleB].add(s)}}null!==this.handleHardConstraints&&this.handleHardConstraints(this)}update(t=1){this.accumulateForces(),this.verletStep();for(let e=0;e<t;e++)this.satisfyConstraints()}draw(){for(let t=0;t<this.h;t++)for(let e=0;e<this.w;e++)ot(this.p[this.constraints[t*this.w+e].particleA],this.p[this.constraints[t*this.w+e].particleB],this.size/3);for(let t=0;t<this.h-1;t++)for(let e=0;e<this.w;e++){const s=this.constraints[this.h*(this.w-1)+t*this.w+e];ot(this.p[s.particleA],this.p[s.particleB],this.size/3)}}};function Ne(t){t.p[0]=a.userLoc.add(new s(0,1,0)).sub(a.userDir.mul(.5)),t.p[9]=a.userLoc.add(new s(0,1.8,0)).sub(a.userDir)}function Oe(){n.Space||ze.update(10),ze.wind=new s(3e-4*Math.sin(Date.now()/10),0,0),ze.draw(),ot(a.userLoc,a.userLoc.add(new s(0,1.8,0)).sub(a.userDir),.1)}async function Ie(){ze.createDefault(10,10,1e-4,.08,.98,1),ze.handleHardConstraints=Ne}class je{constructor(t,e,s){this.init=t,this.render=e,this.isToRender=!0,this.name=s}}let Ve=[];async function qe(){He(Se,Me,"Fractal sky"),He(Ie,Oe,"cloth"),He(Fe,Ce,"Interface"),He(At,xt,"Obj"),He(Tt,Pt,"Plane"),He(Q,$,"Icosahedron"),He(U,D,"cube"),He(N,z,"Tetrahedron"),He(H,q,"Octahedron"),He(Dt,Bt,"Dodecahedron"),He(ht,at,"Debug"),He(Ft,Ct,"cows"),He(ct,lt,"markers"),He(ue,ce,"Map"),He(Wt,Xt,"user"),He(Vt,jt,"Bike"),He(nt,it,"Marker system");for(let t=0;t<Ve.length;t++)await Ve[t].init();for(let t=0;t<Ve.length;t++){let e=document.createElement("input");e.type="checkbox";let s="unit"+t;e.id=s;let r=document.createElement("label");r.appendChild(e),r.innerHTML+=Ve[t].name,document.getElementById("unitsChecker").appendChild(r),document.getElementById("unitsChecker").innerHTML+="<br />"}Ve.forEach(((t,e)=>{switch(t.name){case"Plane":case"user":case"cows":case"markers":case"Icosahedron":case"Tetrahedron":case"cube":case"Debug":case"Octahedron":break;default:document.getElementById("unit"+e).checked=!0}}))}function He(t,e,s){Ve.push(new je(t,e,s))}const Ye=Object.create(null);Ye.open="0",Ye.close="1",Ye.ping="2",Ye.pong="3",Ye.message="4",Ye.upgrade="5",Ye.noop="6";const Xe=Object.create(null);Object.keys(Ye).forEach((t=>{Xe[Ye[t]]=t}));const We={type:"error",data:"parser error"},Ke="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===Object.prototype.toString.call(Blob),Ge="function"==typeof ArrayBuffer,$e=({type:t,data:e},s,r)=>{return Ke&&e instanceof Blob?s?r(e):Qe(e,r):Ge&&(e instanceof ArrayBuffer||(i=e,"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(i):i&&i.buffer instanceof ArrayBuffer))?s?r(e):Qe(new Blob([e]),r):r(Ye[t]+(e||""));var i},Qe=(t,e)=>{const s=new FileReader;return s.onload=function(){const t=s.result.split(",")[1];e("b"+(t||""))},s.readAsDataURL(t)},Je="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",Ze="undefined"==typeof Uint8Array?[]:new Uint8Array(256);for(let t=0;t<64;t++)Ze[Je.charCodeAt(t)]=t;const ts="function"==typeof ArrayBuffer,es=(t,e)=>{if("string"!=typeof t)return{type:"message",data:rs(t,e)};const s=t.charAt(0);if("b"===s)return{type:"message",data:ss(t.substring(1),e)};return Xe[s]?t.length>1?{type:Xe[s],data:t.substring(1)}:{type:Xe[s]}:We},ss=(t,e)=>{if(ts){const s=(t=>{let e,s,r,i,n,o=.75*t.length,a=t.length,h=0;"="===t[t.length-1]&&(o--,"="===t[t.length-2]&&o--);const l=new ArrayBuffer(o),c=new Uint8Array(l);for(e=0;e<a;e+=4)s=Ze[t.charCodeAt(e)],r=Ze[t.charCodeAt(e+1)],i=Ze[t.charCodeAt(e+2)],n=Ze[t.charCodeAt(e+3)],c[h++]=s<<2|r>>4,c[h++]=(15&r)<<4|i>>2,c[h++]=(3&i)<<6|63&n;return l})(t);return rs(s,e)}return{base64:!0,data:t}},rs=(t,e)=>"blob"===e&&t instanceof ArrayBuffer?new Blob([t]):t,is=String.fromCharCode(30);function ns(t){if(t)return function(t){for(var e in ns.prototype)t[e]=ns.prototype[e];return t}(t)}ns.prototype.on=ns.prototype.addEventListener=function(t,e){return this._callbacks=this._callbacks||{},(this._callbacks["$"+t]=this._callbacks["$"+t]||[]).push(e),this},ns.prototype.once=function(t,e){function s(){this.off(t,s),e.apply(this,arguments)}return s.fn=e,this.on(t,s),this},ns.prototype.off=ns.prototype.removeListener=ns.prototype.removeAllListeners=ns.prototype.removeEventListener=function(t,e){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var s,r=this._callbacks["$"+t];if(!r)return this;if(1==arguments.length)return delete this._callbacks["$"+t],this;for(var i=0;i<r.length;i++)if((s=r[i])===e||s.fn===e){r.splice(i,1);break}return 0===r.length&&delete this._callbacks["$"+t],this},ns.prototype.emit=function(t){this._callbacks=this._callbacks||{};for(var e=new Array(arguments.length-1),s=this._callbacks["$"+t],r=1;r<arguments.length;r++)e[r-1]=arguments[r];if(s){r=0;for(var i=(s=s.slice(0)).length;r<i;++r)s[r].apply(this,e)}return this},ns.prototype.emitReserved=ns.prototype.emit,ns.prototype.listeners=function(t){return this._callbacks=this._callbacks||{},this._callbacks["$"+t]||[]},ns.prototype.hasListeners=function(t){return!!this.listeners(t).length};const os="undefined"!=typeof self?self:"undefined"!=typeof window?window:Function("return this")();function as(t,...e){return e.reduce(((e,s)=>(t.hasOwnProperty(s)&&(e[s]=t[s]),e)),{})}const hs=os.setTimeout,ls=os.clearTimeout;function cs(t,e){e.useNativeTimers?(t.setTimeoutFn=hs.bind(os),t.clearTimeoutFn=ls.bind(os)):(t.setTimeoutFn=os.setTimeout.bind(os),t.clearTimeoutFn=os.clearTimeout.bind(os))}class us extends Error{constructor(t,e,s){super(t),this.description=e,this.context=s,this.type="TransportError"}}class ds extends ns{constructor(t){super(),this.writable=!1,cs(this,t),this.opts=t,this.query=t.query,this.socket=t.socket}onError(t,e,s){return super.emitReserved("error",new us(t,e,s)),this}open(){return this.readyState="opening",this.doOpen(),this}close(){return"opening"!==this.readyState&&"open"!==this.readyState||(this.doClose(),this.onClose()),this}send(t){"open"===this.readyState&&this.write(t)}onOpen(){this.readyState="open",this.writable=!0,super.emitReserved("open")}onData(t){const e=es(t,this.socket.binaryType);this.onPacket(e)}onPacket(t){super.emitReserved("packet",t)}onClose(t){this.readyState="closed",super.emitReserved("close",t)}pause(t){}}const gs="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(""),fs=64,ps={};let ms,ys=0,ws=0;function bs(t){let e="";do{e=gs[t%fs]+e,t=Math.floor(t/fs)}while(t>0);return e}function xs(){const t=bs(+new Date);return t!==ms?(ys=0,ms=t):t+"."+bs(ys++)}for(;ws<fs;ws++)ps[gs[ws]]=ws;function As(t){let e="";for(let s in t)t.hasOwnProperty(s)&&(e.length&&(e+="&"),e+=encodeURIComponent(s)+"="+encodeURIComponent(t[s]));return e}let Es=!1;try{Es="undefined"!=typeof XMLHttpRequest&&"withCredentials"in new XMLHttpRequest}catch(t){}const Ls=Es;function vs(t){const e=t.xdomain;try{if("undefined"!=typeof XMLHttpRequest&&(!e||Ls))return new XMLHttpRequest}catch(t){}if(!e)try{return new(os[["Active"].concat("Object").join("X")])("Microsoft.XMLHTTP")}catch(t){}}function Rs(){}const Ps=null!=new vs({xdomain:!1}).responseType;class Ts extends ns{constructor(t,e){super(),cs(this,e),this.opts=e,this.method=e.method||"GET",this.uri=t,this.async=!1!==e.async,this.data=void 0!==e.data?e.data:null,this.create()}create(){const t=as(this.opts,"agent","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized","autoUnref");t.xdomain=!!this.opts.xd,t.xscheme=!!this.opts.xs;const e=this.xhr=new vs(t);try{e.open(this.method,this.uri,this.async);try{if(this.opts.extraHeaders){e.setDisableHeaderCheck&&e.setDisableHeaderCheck(!0);for(let t in this.opts.extraHeaders)this.opts.extraHeaders.hasOwnProperty(t)&&e.setRequestHeader(t,this.opts.extraHeaders[t])}}catch(t){}if("POST"===this.method)try{e.setRequestHeader("Content-type","text/plain;charset=UTF-8")}catch(t){}try{e.setRequestHeader("Accept","*/*")}catch(t){}"withCredentials"in e&&(e.withCredentials=this.opts.withCredentials),this.opts.requestTimeout&&(e.timeout=this.opts.requestTimeout),e.onreadystatechange=()=>{4===e.readyState&&(200===e.status||1223===e.status?this.onLoad():this.setTimeoutFn((()=>{this.onError("number"==typeof e.status?e.status:0)}),0))},e.send(this.data)}catch(t){return void this.setTimeoutFn((()=>{this.onError(t)}),0)}"undefined"!=typeof document&&(this.index=Ts.requestsCount++,Ts.requests[this.index]=this)}onError(t){this.emitReserved("error",t,this.xhr),this.cleanup(!0)}cleanup(t){if(void 0!==this.xhr&&null!==this.xhr){if(this.xhr.onreadystatechange=Rs,t)try{this.xhr.abort()}catch(t){}"undefined"!=typeof document&&delete Ts.requests[this.index],this.xhr=null}}onLoad(){const t=this.xhr.responseText;null!==t&&(this.emitReserved("data",t),this.emitReserved("success"),this.cleanup())}abort(){this.cleanup()}}if(Ts.requestsCount=0,Ts.requests={},"undefined"!=typeof document)if("function"==typeof attachEvent)attachEvent("onunload",ks);else if("function"==typeof addEventListener){addEventListener("onpagehide"in os?"pagehide":"unload",ks,!1)}function ks(){for(let t in Ts.requests)Ts.requests.hasOwnProperty(t)&&Ts.requests[t].abort()}const _s="function"==typeof Promise&&"function"==typeof Promise.resolve?t=>Promise.resolve().then(t):(t,e)=>e(t,0),Bs=os.WebSocket||os.MozWebSocket,Ds="undefined"!=typeof navigator&&"string"==typeof navigator.product&&"reactnative"===navigator.product.toLowerCase();const Us={websocket:class extends ds{constructor(t){super(t),this.supportsBinary=!t.forceBase64}get name(){return"websocket"}doOpen(){if(!this.check())return;const t=this.uri(),e=this.opts.protocols,s=Ds?{}:as(this.opts,"agent","perMessageDeflate","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized","localAddress","protocolVersion","origin","maxPayload","family","checkServerIdentity");this.opts.extraHeaders&&(s.headers=this.opts.extraHeaders);try{this.ws=Ds?new Bs(t,e,s):e?new Bs(t,e):new Bs(t)}catch(t){return this.emitReserved("error",t)}this.ws.binaryType=this.socket.binaryType||"arraybuffer",this.addEventListeners()}addEventListeners(){this.ws.onopen=()=>{this.opts.autoUnref&&this.ws._socket.unref(),this.onOpen()},this.ws.onclose=t=>this.onClose({description:"websocket connection closed",context:t}),this.ws.onmessage=t=>this.onData(t.data),this.ws.onerror=t=>this.onError("websocket error",t)}write(t){this.writable=!1;for(let e=0;e<t.length;e++){const s=t[e],r=e===t.length-1;$e(s,this.supportsBinary,(t=>{try{this.ws.send(t)}catch(t){}r&&_s((()=>{this.writable=!0,this.emitReserved("drain")}),this.setTimeoutFn)}))}}doClose(){void 0!==this.ws&&(this.ws.close(),this.ws=null)}uri(){let t=this.query||{};const e=this.opts.secure?"wss":"ws";let s="";this.opts.port&&("wss"===e&&443!==Number(this.opts.port)||"ws"===e&&80!==Number(this.opts.port))&&(s=":"+this.opts.port),this.opts.timestampRequests&&(t[this.opts.timestampParam]=xs()),this.supportsBinary||(t.b64=1);const r=As(t);return e+"://"+(-1!==this.opts.hostname.indexOf(":")?"["+this.opts.hostname+"]":this.opts.hostname)+s+this.opts.path+(r.length?"?"+r:"")}check(){return!!Bs}},polling:class extends ds{constructor(t){if(super(t),this.polling=!1,"undefined"!=typeof location){const e="https:"===location.protocol;let s=location.port;s||(s=e?"443":"80"),this.xd="undefined"!=typeof location&&t.hostname!==location.hostname||s!==t.port,this.xs=t.secure!==e}const e=t&&t.forceBase64;this.supportsBinary=Ps&&!e}get name(){return"polling"}doOpen(){this.poll()}pause(t){this.readyState="pausing";const e=()=>{this.readyState="paused",t()};if(this.polling||!this.writable){let t=0;this.polling&&(t++,this.once("pollComplete",(function(){--t||e()}))),this.writable||(t++,this.once("drain",(function(){--t||e()})))}else e()}poll(){this.polling=!0,this.doPoll(),this.emitReserved("poll")}onData(t){((t,e)=>{const s=t.split(is),r=[];for(let t=0;t<s.length;t++){const i=es(s[t],e);if(r.push(i),"error"===i.type)break}return r})(t,this.socket.binaryType).forEach((t=>{if("opening"===this.readyState&&"open"===t.type&&this.onOpen(),"close"===t.type)return this.onClose({description:"transport closed by the server"}),!1;this.onPacket(t)})),"closed"!==this.readyState&&(this.polling=!1,this.emitReserved("pollComplete"),"open"===this.readyState&&this.poll())}doClose(){const t=()=>{this.write([{type:"close"}])};"open"===this.readyState?t():this.once("open",t)}write(t){this.writable=!1,((t,e)=>{const s=t.length,r=new Array(s);let i=0;t.forEach(((t,n)=>{$e(t,!1,(t=>{r[n]=t,++i===s&&e(r.join(is))}))}))})(t,(t=>{this.doWrite(t,(()=>{this.writable=!0,this.emitReserved("drain")}))}))}uri(){let t=this.query||{};const e=this.opts.secure?"https":"http";let s="";!1!==this.opts.timestampRequests&&(t[this.opts.timestampParam]=xs()),this.supportsBinary||t.sid||(t.b64=1),this.opts.port&&("https"===e&&443!==Number(this.opts.port)||"http"===e&&80!==Number(this.opts.port))&&(s=":"+this.opts.port);const r=As(t);return e+"://"+(-1!==this.opts.hostname.indexOf(":")?"["+this.opts.hostname+"]":this.opts.hostname)+s+this.opts.path+(r.length?"?"+r:"")}request(t={}){return Object.assign(t,{xd:this.xd,xs:this.xs},this.opts),new Ts(this.uri(),t)}doWrite(t,e){const s=this.request({method:"POST",data:t});s.on("success",e),s.on("error",((t,e)=>{this.onError("xhr post error",t,e)}))}doPoll(){const t=this.request();t.on("data",this.onData.bind(this)),t.on("error",((t,e)=>{this.onError("xhr poll error",t,e)})),this.pollXhr=t}}},Ms=/^(?:(?![^:@\/?#]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@\/?#]*)(?::([^:@\/?#]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/,Ss=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"];function Cs(t){const e=t,s=t.indexOf("["),r=t.indexOf("]");-1!=s&&-1!=r&&(t=t.substring(0,s)+t.substring(s,r).replace(/:/g,";")+t.substring(r,t.length));let i=Ms.exec(t||""),n={},o=14;for(;o--;)n[Ss[o]]=i[o]||"";return-1!=s&&-1!=r&&(n.source=e,n.host=n.host.substring(1,n.host.length-1).replace(/;/g,":"),n.authority=n.authority.replace("[","").replace("]","").replace(/;/g,":"),n.ipv6uri=!0),n.pathNames=function(t,e){const s=/\/{2,9}/g,r=e.replace(s,"/").split("/");"/"!=e.slice(0,1)&&0!==e.length||r.splice(0,1);"/"==e.slice(-1)&&r.splice(r.length-1,1);return r}(0,n.path),n.queryKey=function(t,e){const s={};return e.replace(/(?:^|&)([^&=]*)=?([^&]*)/g,(function(t,e,r){e&&(s[e]=r)})),s}(0,n.query),n}let Fs=class t extends ns{constructor(t,e={}){super(),this.writeBuffer=[],t&&"object"==typeof t&&(e=t,t=null),t?(t=Cs(t),e.hostname=t.host,e.secure="https"===t.protocol||"wss"===t.protocol,e.port=t.port,t.query&&(e.query=t.query)):e.host&&(e.hostname=Cs(e.host).host),cs(this,e),this.secure=null!=e.secure?e.secure:"undefined"!=typeof location&&"https:"===location.protocol,e.hostname&&!e.port&&(e.port=this.secure?"443":"80"),this.hostname=e.hostname||("undefined"!=typeof location?location.hostname:"localhost"),this.port=e.port||("undefined"!=typeof location&&location.port?location.port:this.secure?"443":"80"),this.transports=e.transports||["polling","websocket"],this.writeBuffer=[],this.prevBufferLen=0,this.opts=Object.assign({path:"/engine.io",agent:!1,withCredentials:!1,upgrade:!0,timestampParam:"t",rememberUpgrade:!1,addTrailingSlash:!0,rejectUnauthorized:!0,perMessageDeflate:{threshold:1024},transportOptions:{},closeOnBeforeunload:!0},e),this.opts.path=this.opts.path.replace(/\/$/,"")+(this.opts.addTrailingSlash?"/":""),"string"==typeof this.opts.query&&(this.opts.query=function(t){let e={},s=t.split("&");for(let t=0,r=s.length;t<r;t++){let r=s[t].split("=");e[decodeURIComponent(r[0])]=decodeURIComponent(r[1])}return e}(this.opts.query)),this.id=null,this.upgrades=null,this.pingInterval=null,this.pingTimeout=null,this.pingTimeoutTimer=null,"function"==typeof addEventListener&&(this.opts.closeOnBeforeunload&&(this.beforeunloadEventListener=()=>{this.transport&&(this.transport.removeAllListeners(),this.transport.close())},addEventListener("beforeunload",this.beforeunloadEventListener,!1)),"localhost"!==this.hostname&&(this.offlineEventListener=()=>{this.onClose("transport close",{description:"network connection lost"})},addEventListener("offline",this.offlineEventListener,!1))),this.open()}createTransport(t){const e=Object.assign({},this.opts.query);e.EIO=4,e.transport=t,this.id&&(e.sid=this.id);const s=Object.assign({},this.opts.transportOptions[t],this.opts,{query:e,socket:this,hostname:this.hostname,secure:this.secure,port:this.port});return new Us[t](s)}open(){let e;if(this.opts.rememberUpgrade&&t.priorWebsocketSuccess&&-1!==this.transports.indexOf("websocket"))e="websocket";else{if(0===this.transports.length)return void this.setTimeoutFn((()=>{this.emitReserved("error","No transports available")}),0);e=this.transports[0]}this.readyState="opening";try{e=this.createTransport(e)}catch(t){return this.transports.shift(),void this.open()}e.open(),this.setTransport(e)}setTransport(t){this.transport&&this.transport.removeAllListeners(),this.transport=t,t.on("drain",this.onDrain.bind(this)).on("packet",this.onPacket.bind(this)).on("error",this.onError.bind(this)).on("close",(t=>this.onClose("transport close",t)))}probe(e){let s=this.createTransport(e),r=!1;t.priorWebsocketSuccess=!1;const i=()=>{r||(s.send([{type:"ping",data:"probe"}]),s.once("packet",(e=>{if(!r)if("pong"===e.type&&"probe"===e.data){if(this.upgrading=!0,this.emitReserved("upgrading",s),!s)return;t.priorWebsocketSuccess="websocket"===s.name,this.transport.pause((()=>{r||"closed"!==this.readyState&&(c(),this.setTransport(s),s.send([{type:"upgrade"}]),this.emitReserved("upgrade",s),s=null,this.upgrading=!1,this.flush())}))}else{const t=new Error("probe error");t.transport=s.name,this.emitReserved("upgradeError",t)}})))};function n(){r||(r=!0,c(),s.close(),s=null)}const o=t=>{const e=new Error("probe error: "+t);e.transport=s.name,n(),this.emitReserved("upgradeError",e)};function a(){o("transport closed")}function h(){o("socket closed")}function l(t){s&&t.name!==s.name&&n()}const c=()=>{s.removeListener("open",i),s.removeListener("error",o),s.removeListener("close",a),this.off("close",h),this.off("upgrading",l)};s.once("open",i),s.once("error",o),s.once("close",a),this.once("close",h),this.once("upgrading",l),s.open()}onOpen(){if(this.readyState="open",t.priorWebsocketSuccess="websocket"===this.transport.name,this.emitReserved("open"),this.flush(),"open"===this.readyState&&this.opts.upgrade){let t=0;const e=this.upgrades.length;for(;t<e;t++)this.probe(this.upgrades[t])}}onPacket(t){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState)switch(this.emitReserved("packet",t),this.emitReserved("heartbeat"),t.type){case"open":this.onHandshake(JSON.parse(t.data));break;case"ping":this.resetPingTimeout(),this.sendPacket("pong"),this.emitReserved("ping"),this.emitReserved("pong");break;case"error":const e=new Error("server error");e.code=t.data,this.onError(e);break;case"message":this.emitReserved("data",t.data),this.emitReserved("message",t.data)}}onHandshake(t){this.emitReserved("handshake",t),this.id=t.sid,this.transport.query.sid=t.sid,this.upgrades=this.filterUpgrades(t.upgrades),this.pingInterval=t.pingInterval,this.pingTimeout=t.pingTimeout,this.maxPayload=t.maxPayload,this.onOpen(),"closed"!==this.readyState&&this.resetPingTimeout()}resetPingTimeout(){this.clearTimeoutFn(this.pingTimeoutTimer),this.pingTimeoutTimer=this.setTimeoutFn((()=>{this.onClose("ping timeout")}),this.pingInterval+this.pingTimeout),this.opts.autoUnref&&this.pingTimeoutTimer.unref()}onDrain(){this.writeBuffer.splice(0,this.prevBufferLen),this.prevBufferLen=0,0===this.writeBuffer.length?this.emitReserved("drain"):this.flush()}flush(){if("closed"!==this.readyState&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length){const t=this.getWritablePackets();this.transport.send(t),this.prevBufferLen=t.length,this.emitReserved("flush")}}getWritablePackets(){if(!(this.maxPayload&&"polling"===this.transport.name&&this.writeBuffer.length>1))return this.writeBuffer;let t=1;for(let s=0;s<this.writeBuffer.length;s++){const r=this.writeBuffer[s].data;if(r&&(t+="string"==typeof(e=r)?function(t){let e=0,s=0;for(let r=0,i=t.length;r<i;r++)e=t.charCodeAt(r),e<128?s+=1:e<2048?s+=2:e<55296||e>=57344?s+=3:(r++,s+=4);return s}(e):Math.ceil(1.33*(e.byteLength||e.size))),s>0&&t>this.maxPayload)return this.writeBuffer.slice(0,s);t+=2}var e;return this.writeBuffer}write(t,e,s){return this.sendPacket("message",t,e,s),this}send(t,e,s){return this.sendPacket("message",t,e,s),this}sendPacket(t,e,s,r){if("function"==typeof e&&(r=e,e=void 0),"function"==typeof s&&(r=s,s=null),"closing"===this.readyState||"closed"===this.readyState)return;(s=s||{}).compress=!1!==s.compress;const i={type:t,data:e,options:s};this.emitReserved("packetCreate",i),this.writeBuffer.push(i),r&&this.once("flush",r),this.flush()}close(){const t=()=>{this.onClose("forced close"),this.transport.close()},e=()=>{this.off("upgrade",e),this.off("upgradeError",e),t()},s=()=>{this.once("upgrade",e),this.once("upgradeError",e)};return"opening"!==this.readyState&&"open"!==this.readyState||(this.readyState="closing",this.writeBuffer.length?this.once("drain",(()=>{this.upgrading?s():t()})):this.upgrading?s():t()),this}onError(e){t.priorWebsocketSuccess=!1,this.emitReserved("error",e),this.onClose("transport error",e)}onClose(t,e){"opening"!==this.readyState&&"open"!==this.readyState&&"closing"!==this.readyState||(this.clearTimeoutFn(this.pingTimeoutTimer),this.transport.removeAllListeners("close"),this.transport.close(),this.transport.removeAllListeners(),"function"==typeof removeEventListener&&(removeEventListener("beforeunload",this.beforeunloadEventListener,!1),removeEventListener("offline",this.offlineEventListener,!1)),this.readyState="closed",this.id=null,this.emitReserved("close",t,e),this.writeBuffer=[],this.prevBufferLen=0)}filterUpgrades(t){const e=[];let s=0;const r=t.length;for(;s<r;s++)~this.transports.indexOf(t[s])&&e.push(t[s]);return e}};Fs.protocol=4;const zs="function"==typeof ArrayBuffer,Ns=t=>"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(t):t.buffer instanceof ArrayBuffer,Os=Object.prototype.toString,Is="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===Os.call(Blob),js="function"==typeof File||"undefined"!=typeof File&&"[object FileConstructor]"===Os.call(File);function Vs(t){return zs&&(t instanceof ArrayBuffer||Ns(t))||Is&&t instanceof Blob||js&&t instanceof File}function qs(t,e){if(!t||"object"!=typeof t)return!1;if(Array.isArray(t)){for(let e=0,s=t.length;e<s;e++)if(qs(t[e]))return!0;return!1}if(Vs(t))return!0;if(t.toJSON&&"function"==typeof t.toJSON&&1===arguments.length)return qs(t.toJSON(),!0);for(const e in t)if(Object.prototype.hasOwnProperty.call(t,e)&&qs(t[e]))return!0;return!1}function Hs(t){const e=[],s=t.data,r=t;return r.data=Ys(s,e),r.attachments=e.length,{packet:r,buffers:e}}function Ys(t,e){if(!t)return t;if(Vs(t)){const s={_placeholder:!0,num:e.length};return e.push(t),s}if(Array.isArray(t)){const s=new Array(t.length);for(let r=0;r<t.length;r++)s[r]=Ys(t[r],e);return s}if("object"==typeof t&&!(t instanceof Date)){const s={};for(const r in t)Object.prototype.hasOwnProperty.call(t,r)&&(s[r]=Ys(t[r],e));return s}return t}function Xs(t,e){return t.data=Ws(t.data,e),delete t.attachments,t}function Ws(t,e){if(!t)return t;if(t&&!0===t._placeholder){if("number"==typeof t.num&&t.num>=0&&t.num<e.length)return e[t.num];throw new Error("illegal attachments")}if(Array.isArray(t))for(let s=0;s<t.length;s++)t[s]=Ws(t[s],e);else if("object"==typeof t)for(const s in t)Object.prototype.hasOwnProperty.call(t,s)&&(t[s]=Ws(t[s],e));return t}const Ks=["connect","connect_error","disconnect","disconnecting","newListener","removeListener"];var Gs;!function(t){t[t.CONNECT=0]="CONNECT",t[t.DISCONNECT=1]="DISCONNECT",t[t.EVENT=2]="EVENT",t[t.ACK=3]="ACK",t[t.CONNECT_ERROR=4]="CONNECT_ERROR",t[t.BINARY_EVENT=5]="BINARY_EVENT",t[t.BINARY_ACK=6]="BINARY_ACK"}(Gs||(Gs={}));function $s(t){return"[object Object]"===Object.prototype.toString.call(t)}class Qs extends ns{constructor(t){super(),this.reviver=t}add(t){let e;if("string"==typeof t){if(this.reconstructor)throw new Error("got plaintext data when reconstructing a packet");e=this.decodeString(t);const s=e.type===Gs.BINARY_EVENT;s||e.type===Gs.BINARY_ACK?(e.type=s?Gs.EVENT:Gs.ACK,this.reconstructor=new Js(e),0===e.attachments&&super.emitReserved("decoded",e)):super.emitReserved("decoded",e)}else{if(!Vs(t)&&!t.base64)throw new Error("Unknown type: "+t);if(!this.reconstructor)throw new Error("got binary data when not reconstructing a packet");e=this.reconstructor.takeBinaryData(t),e&&(this.reconstructor=null,super.emitReserved("decoded",e))}}decodeString(t){let e=0;const s={type:Number(t.charAt(0))};if(void 0===Gs[s.type])throw new Error("unknown packet type "+s.type);if(s.type===Gs.BINARY_EVENT||s.type===Gs.BINARY_ACK){const r=e+1;for(;"-"!==t.charAt(++e)&&e!=t.length;);const i=t.substring(r,e);if(i!=Number(i)||"-"!==t.charAt(e))throw new Error("Illegal attachments");s.attachments=Number(i)}if("/"===t.charAt(e+1)){const r=e+1;for(;++e;){if(","===t.charAt(e))break;if(e===t.length)break}s.nsp=t.substring(r,e)}else s.nsp="/";const r=t.charAt(e+1);if(""!==r&&Number(r)==r){const r=e+1;for(;++e;){const s=t.charAt(e);if(null==s||Number(s)!=s){--e;break}if(e===t.length)break}s.id=Number(t.substring(r,e+1))}if(t.charAt(++e)){const r=this.tryParse(t.substr(e));if(!Qs.isPayloadValid(s.type,r))throw new Error("invalid payload");s.data=r}return s}tryParse(t){try{return JSON.parse(t,this.reviver)}catch(t){return!1}}static isPayloadValid(t,e){switch(t){case Gs.CONNECT:return $s(e);case Gs.DISCONNECT:return void 0===e;case Gs.CONNECT_ERROR:return"string"==typeof e||$s(e);case Gs.EVENT:case Gs.BINARY_EVENT:return Array.isArray(e)&&("number"==typeof e[0]||"string"==typeof e[0]&&-1===Ks.indexOf(e[0]));case Gs.ACK:case Gs.BINARY_ACK:return Array.isArray(e)}}destroy(){this.reconstructor&&(this.reconstructor.finishedReconstruction(),this.reconstructor=null)}}class Js{constructor(t){this.packet=t,this.buffers=[],this.reconPack=t}takeBinaryData(t){if(this.buffers.push(t),this.buffers.length===this.reconPack.attachments){const t=Xs(this.reconPack,this.buffers);return this.finishedReconstruction(),t}return null}finishedReconstruction(){this.reconPack=null,this.buffers=[]}}var Zs=Object.freeze({__proto__:null,Decoder:Qs,Encoder:class{constructor(t){this.replacer=t}encode(t){return t.type!==Gs.EVENT&&t.type!==Gs.ACK||!qs(t)?[this.encodeAsString(t)]:this.encodeAsBinary({type:t.type===Gs.EVENT?Gs.BINARY_EVENT:Gs.BINARY_ACK,nsp:t.nsp,data:t.data,id:t.id})}encodeAsString(t){let e=""+t.type;return t.type!==Gs.BINARY_EVENT&&t.type!==Gs.BINARY_ACK||(e+=t.attachments+"-"),t.nsp&&"/"!==t.nsp&&(e+=t.nsp+","),null!=t.id&&(e+=t.id),null!=t.data&&(e+=JSON.stringify(t.data,this.replacer)),e}encodeAsBinary(t){const e=Hs(t),s=this.encodeAsString(e.packet),r=e.buffers;return r.unshift(s),r}},get PacketType(){return Gs},protocol:5});function tr(t,e,s){return t.on(e,s),function(){t.off(e,s)}}const er=Object.freeze({connect:1,connect_error:1,disconnect:1,disconnecting:1,newListener:1,removeListener:1});class sr extends ns{constructor(t,e,s){super(),this.connected=!1,this.recovered=!1,this.receiveBuffer=[],this.sendBuffer=[],this._queue=[],this._queueSeq=0,this.ids=0,this.acks={},this.flags={},this.io=t,this.nsp=e,s&&s.auth&&(this.auth=s.auth),this._opts=Object.assign({},s),this.io._autoConnect&&this.open()}get disconnected(){return!this.connected}subEvents(){if(this.subs)return;const t=this.io;this.subs=[tr(t,"open",this.onopen.bind(this)),tr(t,"packet",this.onpacket.bind(this)),tr(t,"error",this.onerror.bind(this)),tr(t,"close",this.onclose.bind(this))]}get active(){return!!this.subs}connect(){return this.connected||(this.subEvents(),this.io._reconnecting||this.io.open(),"open"===this.io._readyState&&this.onopen()),this}open(){return this.connect()}send(...t){return t.unshift("message"),this.emit.apply(this,t),this}emit(t,...e){if(er.hasOwnProperty(t))throw new Error('"'+t.toString()+'" is a reserved event name');if(e.unshift(t),this._opts.retries&&!this.flags.fromQueue&&!this.flags.volatile)return this._addToQueue(e),this;const s={type:Gs.EVENT,data:e,options:{}};if(s.options.compress=!1!==this.flags.compress,"function"==typeof e[e.length-1]){const t=this.ids++,r=e.pop();this._registerAckCallback(t,r),s.id=t}const r=this.io.engine&&this.io.engine.transport&&this.io.engine.transport.writable;return this.flags.volatile&&(!r||!this.connected)||(this.connected?(this.notifyOutgoingListeners(s),this.packet(s)):this.sendBuffer.push(s)),this.flags={},this}_registerAckCallback(t,e){var s;const r=null!==(s=this.flags.timeout)&&void 0!==s?s:this._opts.ackTimeout;if(void 0===r)return void(this.acks[t]=e);const i=this.io.setTimeoutFn((()=>{delete this.acks[t];for(let e=0;e<this.sendBuffer.length;e++)this.sendBuffer[e].id===t&&this.sendBuffer.splice(e,1);e.call(this,new Error("operation has timed out"))}),r);this.acks[t]=(...t)=>{this.io.clearTimeoutFn(i),e.apply(this,[null,...t])}}emitWithAck(t,...e){const s=void 0!==this.flags.timeout||void 0!==this._opts.ackTimeout;return new Promise(((r,i)=>{e.push(((t,e)=>s?t?i(t):r(e):r(t))),this.emit(t,...e)}))}_addToQueue(t){let e;"function"==typeof t[t.length-1]&&(e=t.pop());const s={id:this._queueSeq++,tryCount:0,pending:!1,args:t,flags:Object.assign({fromQueue:!0},this.flags)};t.push(((t,...r)=>{if(s!==this._queue[0])return;return null!==t?s.tryCount>this._opts.retries&&(this._queue.shift(),e&&e(t)):(this._queue.shift(),e&&e(null,...r)),s.pending=!1,this._drainQueue()})),this._queue.push(s),this._drainQueue()}_drainQueue(t=!1){if(!this.connected||0===this._queue.length)return;const e=this._queue[0];e.pending&&!t||(e.pending=!0,e.tryCount++,this.flags=e.flags,this.emit.apply(this,e.args))}packet(t){t.nsp=this.nsp,this.io._packet(t)}onopen(){"function"==typeof this.auth?this.auth((t=>{this._sendConnectPacket(t)})):this._sendConnectPacket(this.auth)}_sendConnectPacket(t){this.packet({type:Gs.CONNECT,data:this._pid?Object.assign({pid:this._pid,offset:this._lastOffset},t):t})}onerror(t){this.connected||this.emitReserved("connect_error",t)}onclose(t,e){this.connected=!1,delete this.id,this.emitReserved("disconnect",t,e)}onpacket(t){if(t.nsp===this.nsp)switch(t.type){case Gs.CONNECT:t.data&&t.data.sid?this.onconnect(t.data.sid,t.data.pid):this.emitReserved("connect_error",new Error("It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)"));break;case Gs.EVENT:case Gs.BINARY_EVENT:this.onevent(t);break;case Gs.ACK:case Gs.BINARY_ACK:this.onack(t);break;case Gs.DISCONNECT:this.ondisconnect();break;case Gs.CONNECT_ERROR:this.destroy();const e=new Error(t.data.message);e.data=t.data.data,this.emitReserved("connect_error",e)}}onevent(t){const e=t.data||[];null!=t.id&&e.push(this.ack(t.id)),this.connected?this.emitEvent(e):this.receiveBuffer.push(Object.freeze(e))}emitEvent(t){if(this._anyListeners&&this._anyListeners.length){const e=this._anyListeners.slice();for(const s of e)s.apply(this,t)}super.emit.apply(this,t),this._pid&&t.length&&"string"==typeof t[t.length-1]&&(this._lastOffset=t[t.length-1])}ack(t){const e=this;let s=!1;return function(...r){s||(s=!0,e.packet({type:Gs.ACK,id:t,data:r}))}}onack(t){const e=this.acks[t.id];"function"==typeof e&&(e.apply(this,t.data),delete this.acks[t.id])}onconnect(t,e){this.id=t,this.recovered=e&&this._pid===e,this._pid=e,this.connected=!0,this.emitBuffered(),this.emitReserved("connect"),this._drainQueue(!0)}emitBuffered(){this.receiveBuffer.forEach((t=>this.emitEvent(t))),this.receiveBuffer=[],this.sendBuffer.forEach((t=>{this.notifyOutgoingListeners(t),this.packet(t)})),this.sendBuffer=[]}ondisconnect(){this.destroy(),this.onclose("io server disconnect")}destroy(){this.subs&&(this.subs.forEach((t=>t())),this.subs=void 0),this.io._destroy(this)}disconnect(){return this.connected&&this.packet({type:Gs.DISCONNECT}),this.destroy(),this.connected&&this.onclose("io client disconnect"),this}close(){return this.disconnect()}compress(t){return this.flags.compress=t,this}get volatile(){return this.flags.volatile=!0,this}timeout(t){return this.flags.timeout=t,this}onAny(t){return this._anyListeners=this._anyListeners||[],this._anyListeners.push(t),this}prependAny(t){return this._anyListeners=this._anyListeners||[],this._anyListeners.unshift(t),this}offAny(t){if(!this._anyListeners)return this;if(t){const e=this._anyListeners;for(let s=0;s<e.length;s++)if(t===e[s])return e.splice(s,1),this}else this._anyListeners=[];return this}listenersAny(){return this._anyListeners||[]}onAnyOutgoing(t){return this._anyOutgoingListeners=this._anyOutgoingListeners||[],this._anyOutgoingListeners.push(t),this}prependAnyOutgoing(t){return this._anyOutgoingListeners=this._anyOutgoingListeners||[],this._anyOutgoingListeners.unshift(t),this}offAnyOutgoing(t){if(!this._anyOutgoingListeners)return this;if(t){const e=this._anyOutgoingListeners;for(let s=0;s<e.length;s++)if(t===e[s])return e.splice(s,1),this}else this._anyOutgoingListeners=[];return this}listenersAnyOutgoing(){return this._anyOutgoingListeners||[]}notifyOutgoingListeners(t){if(this._anyOutgoingListeners&&this._anyOutgoingListeners.length){const e=this._anyOutgoingListeners.slice();for(const s of e)s.apply(this,t.data)}}}function rr(t){t=t||{},this.ms=t.min||100,this.max=t.max||1e4,this.factor=t.factor||2,this.jitter=t.jitter>0&&t.jitter<=1?t.jitter:0,this.attempts=0}rr.prototype.duration=function(){var t=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var e=Math.random(),s=Math.floor(e*this.jitter*t);t=0==(1&Math.floor(10*e))?t-s:t+s}return 0|Math.min(t,this.max)},rr.prototype.reset=function(){this.attempts=0},rr.prototype.setMin=function(t){this.ms=t},rr.prototype.setMax=function(t){this.max=t},rr.prototype.setJitter=function(t){this.jitter=t};class ir extends ns{constructor(t,e){var s;super(),this.nsps={},this.subs=[],t&&"object"==typeof t&&(e=t,t=void 0),(e=e||{}).path=e.path||"/socket.io",this.opts=e,cs(this,e),this.reconnection(!1!==e.reconnection),this.reconnectionAttempts(e.reconnectionAttempts||1/0),this.reconnectionDelay(e.reconnectionDelay||1e3),this.reconnectionDelayMax(e.reconnectionDelayMax||5e3),this.randomizationFactor(null!==(s=e.randomizationFactor)&&void 0!==s?s:.5),this.backoff=new rr({min:this.reconnectionDelay(),max:this.reconnectionDelayMax(),jitter:this.randomizationFactor()}),this.timeout(null==e.timeout?2e4:e.timeout),this._readyState="closed",this.uri=t;const r=e.parser||Zs;this.encoder=new r.Encoder,this.decoder=new r.Decoder,this._autoConnect=!1!==e.autoConnect,this._autoConnect&&this.open()}reconnection(t){return arguments.length?(this._reconnection=!!t,this):this._reconnection}reconnectionAttempts(t){return void 0===t?this._reconnectionAttempts:(this._reconnectionAttempts=t,this)}reconnectionDelay(t){var e;return void 0===t?this._reconnectionDelay:(this._reconnectionDelay=t,null===(e=this.backoff)||void 0===e||e.setMin(t),this)}randomizationFactor(t){var e;return void 0===t?this._randomizationFactor:(this._randomizationFactor=t,null===(e=this.backoff)||void 0===e||e.setJitter(t),this)}reconnectionDelayMax(t){var e;return void 0===t?this._reconnectionDelayMax:(this._reconnectionDelayMax=t,null===(e=this.backoff)||void 0===e||e.setMax(t),this)}timeout(t){return arguments.length?(this._timeout=t,this):this._timeout}maybeReconnectOnOpen(){!this._reconnecting&&this._reconnection&&0===this.backoff.attempts&&this.reconnect()}open(t){if(~this._readyState.indexOf("open"))return this;this.engine=new Fs(this.uri,this.opts);const e=this.engine,s=this;this._readyState="opening",this.skipReconnect=!1;const r=tr(e,"open",(function(){s.onopen(),t&&t()})),i=tr(e,"error",(e=>{s.cleanup(),s._readyState="closed",this.emitReserved("error",e),t?t(e):s.maybeReconnectOnOpen()}));if(!1!==this._timeout){const t=this._timeout;0===t&&r();const s=this.setTimeoutFn((()=>{r(),e.close(),e.emit("error",new Error("timeout"))}),t);this.opts.autoUnref&&s.unref(),this.subs.push((function(){clearTimeout(s)}))}return this.subs.push(r),this.subs.push(i),this}connect(t){return this.open(t)}onopen(){this.cleanup(),this._readyState="open",this.emitReserved("open");const t=this.engine;this.subs.push(tr(t,"ping",this.onping.bind(this)),tr(t,"data",this.ondata.bind(this)),tr(t,"error",this.onerror.bind(this)),tr(t,"close",this.onclose.bind(this)),tr(this.decoder,"decoded",this.ondecoded.bind(this)))}onping(){this.emitReserved("ping")}ondata(t){try{this.decoder.add(t)}catch(t){this.onclose("parse error",t)}}ondecoded(t){_s((()=>{this.emitReserved("packet",t)}),this.setTimeoutFn)}onerror(t){this.emitReserved("error",t)}socket(t,e){let s=this.nsps[t];return s?this._autoConnect&&!s.active&&s.connect():(s=new sr(this,t,e),this.nsps[t]=s),s}_destroy(t){const e=Object.keys(this.nsps);for(const t of e){if(this.nsps[t].active)return}this._close()}_packet(t){const e=this.encoder.encode(t);for(let s=0;s<e.length;s++)this.engine.write(e[s],t.options)}cleanup(){this.subs.forEach((t=>t())),this.subs.length=0,this.decoder.destroy()}_close(){this.skipReconnect=!0,this._reconnecting=!1,this.onclose("forced close"),this.engine&&this.engine.close()}disconnect(){return this._close()}onclose(t,e){this.cleanup(),this.backoff.reset(),this._readyState="closed",this.emitReserved("close",t,e),this._reconnection&&!this.skipReconnect&&this.reconnect()}reconnect(){if(this._reconnecting||this.skipReconnect)return this;const t=this;if(this.backoff.attempts>=this._reconnectionAttempts)this.backoff.reset(),this.emitReserved("reconnect_failed"),this._reconnecting=!1;else{const e=this.backoff.duration();this._reconnecting=!0;const s=this.setTimeoutFn((()=>{t.skipReconnect||(this.emitReserved("reconnect_attempt",t.backoff.attempts),t.skipReconnect||t.open((e=>{e?(t._reconnecting=!1,t.reconnect(),this.emitReserved("reconnect_error",e)):t.onreconnect()})))}),e);this.opts.autoUnref&&s.unref(),this.subs.push((function(){clearTimeout(s)}))}}onreconnect(){const t=this.backoff.attempts;this._reconnecting=!1,this.backoff.reset(),this.emitReserved("reconnect",t)}}const nr={};function or(t,e){"object"==typeof t&&(e=t,t=void 0);const s=function(t,e="",s){let r=t;s=s||"undefined"!=typeof location&&location,null==t&&(t=s.protocol+"//"+s.host),"string"==typeof t&&("/"===t.charAt(0)&&(t="/"===t.charAt(1)?s.protocol+t:s.host+t),/^(https?|wss?):\/\//.test(t)||(t=void 0!==s?s.protocol+"//"+t:"https://"+t),r=Cs(t)),r.port||(/^(http|ws)$/.test(r.protocol)?r.port="80":/^(http|ws)s$/.test(r.protocol)&&(r.port="443")),r.path=r.path||"/";const i=-1!==r.host.indexOf(":")?"["+r.host+"]":r.host;return r.id=r.protocol+"://"+i+":"+r.port+e,r.href=r.protocol+"://"+i+(s&&s.port===r.port?"":":"+r.port),r}(t,(e=e||{}).path||"/socket.io"),r=s.source,i=s.id,n=s.path,o=nr[i]&&n in nr[i].nsps;let a;return e.forceNew||e["force new connection"]||!1===e.multiplex||o?a=new ir(r,e):(nr[i]||(nr[i]=new ir(r,e)),a=nr[i]),s.query&&!e.query&&(e.query=s.queryKey),a.socket(s.path,e)}Object.assign(or,{Manager:ir,Socket:sr,io:or,connect:or});const ar=or();let hr,lr;function cr(e){t.users=e}function ur(t){lr.innerHTML=t.map((t=>`<li class="message" id="${t.sender.userName==ar.userName?"user":"notUser"}">${t.sender.userName+" : "+t.text}\n        <button class="deleteMessage" id="${t._id.toString()}" style="\n        float: right; border-radius: 10px;"> Delete</button><span style="\n        float: right;">${t.date}</span>\n        </li>`)).join(""),lr.scrollTo(0,lr.scrollHeight),window.scrollTo(0,lr.scrollHeight),document.getElementById("msgbox").scrollTop=document.getElementById("msgbox").scrollHeight;for(let t of document.getElementsByClassName("deleteMessage"))t.onclick=()=>{ar.emit("deleteMessage",t.id)}}function dr(){let t=prompt("Enter your name");console.log(ar.id),ar.emit("reloadRequest"),ar.emit("auth",t),ar.userName=t}t.gl=void 0,t.users=[],window.addEventListener("load",(()=>{function e(t){var e=t.changedTouches[0],s="";switch(t.type){case"touchstart":s="mousedown";break;case"touchmove":s="mousemove";break;case"touchend":s="mouseup";break;default:return}var r=document.createEvent("MouseEvent");r.initMouseEvent(s,!0,!0,window,1,e.screenX,e.screenY,e.clientX,e.clientY,!1,!1,!1,!1,0,null),e.target.dispatchEvent(r),t.preventDefault()}lr=document.getElementById("messages"),document.getElementById("id1").onkeyup=t=>{if("Enter"===t.code){const t=document.getElementById("id1").value;console.log(t),document.getElementById("id1").value="",ar.emit("MessageToServer",t)}},document.getElementById("clearButton").onclick=()=>{ar.emit("clearAllMessages")},ar.on("connect",dr),ar.on("userReloadResponse",cr),ar.on("msgReloadResponse",ur),ar.on("disconnect",(()=>{console.log("disconnected")})),hr=document.getElementById("glCanvas"),t.gl=hr.getContext("webgl2"),fr(),window.onmousemove=h,window.onmousedown=l,window.onmouseup=c,window.addEventListener("contextmenu",(t=>t.preventDefault())),window.addEventListener("wheel",(t=>{!function(t){o.dz=t.deltaY}(t)})),window.onscroll=()=>window.scroll(0,0),window.addEventListener("keyup",(t=>{!function(t){n[t.code]=0}(t)})),window.addEventListener("keydown",(t=>{!function(t){n[t.code]=1}(t)})),document.querySelector("#file").addEventListener("change",gt),document.addEventListener("touchstart",e,!0),document.addEventListener("touchmove",e,!0),document.addEventListener("touchend",e,!0),document.addEventListener("touchcancel",e,!0)}));const gr=()=>{t.gl.clearColor(.8,.47,.3,1),t.gl.clear(t.gl.COLOR_BUFFER_BIT|t.gl.DEPTH_BUFFER_BIT),hr.width=window.innerWidth,hr.height=window.innerHeight,t.gl.viewport(0,0,a.frameW,a.frameH),Ve.forEach(((t,e)=>{document.getElementById("unit"+e).checked&&t.render()})),A(),a.setSize(hr.width,hr.height),a.camSet(a.loc,a.at,a.up,a.pos,a.userLoc),ar.emit("reloadRequest",a),o.dx=o.dy=o.dz=0,window.requestAnimationFrame(gr)};async function fr(){t.gl.clearColor(1,1,0,1),t.gl.clear(t.gl.COLOR_BUFFER_BIT),t.gl.enable(t.gl.DEPTH_TEST),t.gl.viewport(0,0,t.gl.canvas.width,t.gl.canvas.height),hr.width=window.innerWidth,hr.height=window.innerHeight,A(),a.setSize(hr.width,hr.height),a.camSet(a.loc,a.at,a.up,a.pos,a.userLoc),await R("default"),await qe(),document.getElementById("loading").style.visibility="hidden",gr()}t.initGL=fr}({});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
