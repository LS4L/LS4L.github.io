!function(t){"use strict";class e{constructor(t=0,e=0){this.x=t,this.y=e}add(t){return new e(this.x+t.x,this.y+t.y)}sub(t){return new e(this.x-t.x,this.y-t.y)}mul(t){return new e(this.x*t,this.y*t)}div(t){return new e(this.x/t,this.y/t)}neg(){return new e(-this.x,-this.y)}dot(t){return this.x*t.x+this.y*t.y}cross(t){return this.x*t.y-this.y*t.x}len2(){return this.x*this.x+this.y*this.y}len(){return Math.sqrt(this.len2())}normalize(){return this.div(this.len())}lerp(t,s){return new e(this.x+(t.x-this.x)*s,this.y+(t.y-this.y)*s)}}class s{constructor(t=0,e=0,s=0){this.x=t,this.y=e,this.z=s}add(t){return new s(this.x+t.x,this.y+t.y,this.z+t.z)}sub(t){return new s(this.x-t.x,this.y-t.y,this.z-t.z)}mul(t){return new s(this.x*t,this.y*t,this.z*t)}div(t){return 0!=t?new s(this.x/t,this.y/t,this.z/t):new s}neg(){return new s(-this.x,-this.y,-this.z)}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}cross(t){return new s(this.y*t.z-this.z*t.y,this.z*t.x-this.x*t.z,this.x*t.y-this.y*t.x)}len2(){return this.x*this.x+this.y*this.y+this.z*this.z}len(){return Math.sqrt(this.len2())}normalize(){return this.div(this.len())}lerp(t,e){return new s(this.x+(t.x-this.x)*e,this.y+(t.y-this.y)*e,this.z+(t.z-this.z)*e)}mulMatr(t){let e=this.x*t[0][3]+this.y*t[1][3]+this.z*t[2][3]+t[3][3];return new s((this.x*t[0][0]+this.y*t[1][0]+this.z*t[2][0]+t[3][0])/e,(this.x*t[0][1]+this.y*t[1][1]+this.z*t[2][1]+t[3][1])/e,(this.x*t[0][2]+this.y*t[1][2]+this.z*t[2][2]+t[3][2])/e)}angle(t){return 0==t.len2()||0==this.len2()?0:Math.acos(this.dot(t)/(this.len()*t.len()))}get xxx(){return new s(this.x,this.x,this.x)}get yyy(){return new s(this.y,this.y,this.y)}get zzz(){return new s(this.z,this.z,this.z)}}class i{constructor(t=0,e=0,s=0,i=0){this.x=t,this.y=e,this.z=s,this.w=i}add(t){return new i(this.x+t.x,this.y+t.y,this.z+t.z,this.w+t.w)}sub(t){return new i(this.x-t.x,this.y-t.y,this.z-t.z,this.w-t.w)}mul(t){return new i(this.x*t,this.y*t,this.z*t,this.w*t)}div(t){return new i(this.x/t,this.y/t,this.z/t,this.w/t)}neg(){return new i(-this.x,-this.y,-this.z,-this.w)}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z+this.w*this.w}len2(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}len(){return Math.sqrt(this.len2())}normalize(){return this.div(this.len())}lerp(t,e){return new s(this.x+(t.x-this.x)*e,this.y+(t.y-this.y)*e,this.z+(t.z-this.z)*e,this.w+(t.w-this.w)*e)}}class r{constructor(t=[[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]]){this[0]=[],this[1]=[],this[2]=[],this[3]=[],this[0][0]=t[0][0],this[0][1]=t[0][1],this[0][2]=t[0][2],this[0][3]=t[0][3],this[1][0]=t[1][0],this[1][1]=t[1][1],this[1][2]=t[1][2],this[1][3]=t[1][3],this[2][0]=t[2][0],this[2][1]=t[2][1],this[2][2]=t[2][2],this[2][3]=t[2][3],this[3][0]=t[3][0],this[3][1]=t[3][1],this[3][2]=t[3][2],this[3][3]=t[3][3]}a(){return[[this[0][0],this[0][1],this[0][2],this[0][3]],[this[1][0],this[1][1],this[1][2],this[1][3]],[this[2][0],this[2][1],this[2][2],this[2][3]],[this[3][0],this[3][1],this[3][2],this[3][3]]]}translate(t){return new r([[1,0,0,0],[0,1,0,0],[0,0,1,0],[t.x,t.y,t.z,1]])}scale(t){return new r([[t.x,0,0,0],[0,t.y,0,0],[0,0,t.z,0],[0,0,0,1]])}rotateX(t){let e=new r,s=t/180*Math.PI,i=Math.sin(s),n=Math.cos(s);return e[1][1]=n,e[2][2]=n,e[1][2]=i,e[2][1]=-i,e}rotateY(t){let e=new r,s=t/180*Math.PI,i=Math.sin(s),n=Math.cos(s);return e[0][0]=n,e[2][2]=n,e[0][2]=-i,e[2][0]=i,e}rotateZ(t){let e=new r,s=t/180*Math.PI,i=Math.sin(s),n=Math.cos(s);return e[0][0]=n,e[1][1]=n,e[0][1]=i,e[1][0]=-i,e}rotate(t,e){let s=t/180*Math.PI,i=Math.sin(s),n=Math.cos(s);return new r([[n+e.x*e.x*(1-n),e.x*e.y*(1-n)+e.z*i,e.x*e.z*(1-n)-e.y*i,0],[e.y*e.x*(1-n)-e.z*i,n+e.y*e.y*(1-n),e.y*e.z*(1-n)+e.x*i,0],[e.z*e.x*(1-n)+e.y*i,e.z*e.y*(1-n)-e.x*i,n+e.z*e.z*(1-n),0],[0,0,0,1]])}transpose(){let t=new r;return t[0][0]=this[0][0],t[0][1]=this[1][0],t[0][2]=this[2][0],t[0][3]=this[3][0],t[1][0]=this[0][1],t[1][1]=this[1][1],t[1][2]=this[2][1],t[1][3]=this[3][1],t[2][0]=this[0][2],t[2][1]=this[1][2],t[2][2]=this[2][2],t[2][3]=this[3][2],t[3][0]=this[0][3],t[3][1]=this[1][3],t[3][2]=this[2][3],t[3][3]=this[3][3],t}determ3x3(t,e,s,i,r,n,o,h,a){return t*r*a+e*n*o+s*i*h-t*n*h-e*i*a-s*r*o}determ(){return+this[0][0]*this.determ3x3(this[1][1],this[1][2],this[1][3],this[2][1],this[2][2],this[2][3],this[3][1],this[3][2],this[3][3])+-this[0][1]*this.determ3x3(this[1][0],this[1][2],this[1][3],this[2][0],this[2][2],this[2][3],this[3][0],this[3][2],this[3][3])+ +this[0][2]*this.determ3x3(this[1][0],this[1][1],this[1][3],this[2][0],this[2][1],this[2][3],this[3][0],this[3][1],this[3][3])+-this[0][3]*this.determ3x3(this[1][0],this[1][1],this[1][2],this[2][0],this[2][1],this[2][2],this[3][0],this[3][1],this[3][2])}inverse(){let t=this.determ(),e=new r;return 0==t?new r:(e[0][0]=+this.determ3x3(this[1][1],this[1][2],this[1][3],this[2][1],this[2][2],this[2][3],this[3][1],this[3][2],this[3][3])/t,e[1][0]=-this.determ3x3(this[1][0],this[1][2],this[1][3],this[2][0],this[2][2],this[2][3],this[3][0],this[3][2],this[3][3])/t,e[2][0]=+this.determ3x3(this[1][0],this[1][1],this[1][3],this[2][0],this[2][1],this[2][3],this[3][0],this[3][1],this[3][3])/t,e[3][0]=-this.determ3x3(this[1][0],this[1][1],this[1][2],this[2][0],this[2][1],this[2][2],this[3][0],this[3][1],this[3][2])/t,e[0][1]=-this.determ3x3(this[0][1],this[0][2],this[0][3],this[2][1],this[2][2],this[2][3],this[3][1],this[3][2],this[3][3])/t,e[1][1]=+this.determ3x3(this[0][0],this[0][2],this[0][3],this[2][0],this[2][2],this[2][3],this[3][0],this[3][2],this[3][3])/t,e[2][1]=-this.determ3x3(this[0][0],this[0][1],this[0][3],this[2][0],this[2][1],this[2][3],this[3][0],this[3][1],this[3][3])/t,e[3][1]=+this.determ3x3(this[0][0],this[0][1],this[0][2],this[2][0],this[2][1],this[2][2],this[3][0],this[3][1],this[3][2])/t,e[0][2]=+this.determ3x3(this[0][1],this[0][2],this[0][3],this[1][1],this[1][2],this[1][3],this[3][1],this[3][2],this[3][3])/t,e[1][2]=-this.determ3x3(this[0][0],this[0][2],this[0][3],this[1][0],this[1][2],this[1][3],this[3][0],this[3][2],this[3][3])/t,e[2][2]=+this.determ3x3(this[0][0],this[0][1],this[0][3],this[1][0],this[1][1],this[1][3],this[3][0],this[3][1],this[3][3])/t,e[3][2]=-this.determ3x3(this[0][0],this[0][1],this[0][2],this[1][0],this[1][1],this[1][2],this[3][0],this[3][1],this[3][2])/t,e[0][3]=-this.determ3x3(this[0][1],this[0][2],this[0][3],this[1][1],this[1][2],this[1][3],this[2][1],this[2][2],this[2][3])/t,e[1][3]=+this.determ3x3(this[0][0],this[0][2],this[0][3],this[1][0],this[1][2],this[1][3],this[2][0],this[2][2],this[2][3])/t,e[2][3]=-this.determ3x3(this[0][0],this[0][1],this[0][3],this[1][0],this[1][1],this[1][3],this[2][0],this[2][1],this[2][3])/t,e[3][3]=+this.determ3x3(this[0][0],this[0][1],this[0][2],this[1][0],this[1][1],this[1][2],this[2][0],this[2][1],this[2][2])/t,e)}add(t){let e=new r;return e[0][0]=this[0][0]+t[0][0],e[0][1]=this[0][1]+t[0][1],e[0][2]=this[0][2]+t[0][2],e[0][3]=this[0][3]+t[0][3],e[1][0]=this[1][0]+t[1][0],e[1][1]=this[1][1]+t[1][1],e[1][2]=this[1][2]+t[1][2],e[1][3]=this[1][3]+t[1][3],e[2][0]=this[2][0]+t[2][0],e[2][1]=this[2][1]+t[2][1],e[2][2]=this[2][2]+t[2][2],e[2][3]=this[2][3]+t[2][3],e[3][0]=this[3][0]+t[3][0],e[3][1]=this[3][1]+t[3][1],e[3][2]=this[3][2]+t[3][2],e[3][3]=this[3][3]+t[3][3],e}mul(t){let e=new r;return e[0][0]=this[0][0]*t[0][0]+this[0][1]*t[1][0]+this[0][2]*t[2][0]+this[0][3]*t[3][0],e[0][1]=this[0][0]*t[0][1]+this[0][1]*t[1][1]+this[0][2]*t[2][1]+this[0][3]*t[3][1],e[0][2]=this[0][0]*t[0][2]+this[0][1]*t[1][2]+this[0][2]*t[2][2]+this[0][3]*t[3][2],e[0][3]=this[0][0]*t[0][3]+this[0][1]*t[1][3]+this[0][2]*t[2][3]+this[0][3]*t[3][3],e[1][0]=this[1][0]*t[0][0]+this[1][1]*t[1][0]+this[1][2]*t[2][0]+this[1][3]*t[3][0],e[1][1]=this[1][0]*t[0][1]+this[1][1]*t[1][1]+this[1][2]*t[2][1]+this[1][3]*t[3][1],e[1][2]=this[1][0]*t[0][2]+this[1][1]*t[1][2]+this[1][2]*t[2][2]+this[1][3]*t[3][2],e[1][3]=this[1][0]*t[0][3]+this[1][1]*t[1][3]+this[1][2]*t[2][3]+this[1][3]*t[3][3],e[2][0]=this[2][0]*t[0][0]+this[2][1]*t[1][0]+this[2][2]*t[2][0]+this[2][3]*t[3][0],e[2][1]=this[2][0]*t[0][1]+this[2][1]*t[1][1]+this[2][2]*t[2][1]+this[2][3]*t[3][1],e[2][2]=this[2][0]*t[0][2]+this[2][1]*t[1][2]+this[2][2]*t[2][2]+this[2][3]*t[3][2],e[2][3]=this[2][0]*t[0][3]+this[2][1]*t[1][3]+this[2][2]*t[2][3]+this[2][3]*t[3][3],e[3][0]=this[3][0]*t[0][0]+this[3][1]*t[1][0]+this[3][2]*t[2][0]+this[3][3]*t[3][0],e[3][1]=this[3][0]*t[0][1]+this[3][1]*t[1][1]+this[3][2]*t[2][1]+this[3][3]*t[3][1],e[3][2]=this[3][0]*t[0][2]+this[3][1]*t[1][2]+this[3][2]*t[2][2]+this[3][3]*t[3][2],e[3][3]=this[3][0]*t[0][3]+this[3][1]*t[1][3]+this[3][2]*t[2][3]+this[3][3]*t[3][3],e}view(t,e,s){let i=e.sub(t).normalize(),n=i.cross(s).normalize(),o=n.cross(i);return new r([[n.x,o.x,-i.x,0],[n.y,o.y,-i.y,0],[n.z,o.z,-i.z,0],[-t.dot(n),-t.dot(o),t.dot(i),1]])}ortho(t,e,s,i,n,o){return new r([[2/(e-t),0,0,0],[0,2/(i-s),0,0],[0,0,-2/(o-n),0],[-(e+t)/(e-t),-(i+s)/(i-s),-(o+n)/(o-n),1]])}frustum(t,e,s,i,n,o){return new r([[2*n/(e-t),0,0,0],[0,2*n/(i-s),0,0],[(e+t)/(e-t),(i+s)/(i-s),-(o+n)/(o-n),-1],[0,0,-2*n*o/(o-n),0]])}}let n=[],o={x:0,y:0,savedX:0,savedY:0,zoom:1,dx:0,dy:0,dz:0,isDown:!1,isRDown:!1},h=new class{constructor(){this.projSize=.1,this.projDist=.1,this.projFarClip=18e3,this.frameW=30,this.frameH=30,this.matrView=new r,this.matrProj=new r,this.matrVP=new r,this.setDef()}camSet(t,e,i,n,o){let h=new r;return this.matrView=h.view(t,e,i),this.loc=t,this.at=e,this.dir=new s(-this.matrView[0][2],-this.matrView[1][2],-this.matrView[2][2]),this.up=new s(this.matrView[0][1],this.matrView[1][1],this.matrView[2][1]),this.right=new s(this.matrView[0][0],this.matrView[1][0],this.matrView[2][0]),this.pos=n,this.userLoc=o,this.matrVP=this.matrView.mul(this.matrProj),this}setProj(t,e,s){let i,n;i=n=t,this.projDist=e,this.projSize=t,this.projFarClip=s,this.frameW>this.frameH?i*=this.FrameW/this.frameH:n*=this.frameH/this.frameW;let o=new r;return this.matrProj=o.frustum(-i/2,i/2,-n/2,n/2,e,s),this.matrVP=this.matrView.mul(this.matrProj),this}setSize(t,e){return this.frameW=t,this.frameH=e,this.setProj(this.projSize,this.projDist,this.projFarClip),this}setDef(){return this.loc=new s(0,0,1),this.at=new s(0,0,0),this.dir=new s(0,0,-1),this.up=new s(0,1,0),this.right=new s(1,0,0),this.projDist=.1,this.projSize=.1,this.projFarClip=1e4,this.frameW=30,this.frameH=30,this.camSet(this.loc,this.at,this.up,this.pos,this.userLoc),this.setProj(this.projSize,this.projDist,this.projFarClip),this.setSize(this.frameW,this.frameH),this}};function a(t){o.dx=t.pageX-o.x,o.dy=t.pageY-o.y,o.x=t.pageX,o.y=t.pageY}function c(t){0==t.button?o.isDown=!0:2==t.button&&(o.isRDown=!0)}function l(t){0==t.button?o.isDown=!1:2==t.button&&(o.isRDown=!1)}h.camSet(new s(0,2.5,0),new s(0,0,-6),new s(0,1,0),new s(1,1,1),new s(0,2,0));let u=.05,d=1;function p(){!function(){h.pos=h.pos.add(h.pos.mul(.01*-o.dz));let t=new r;h.pos=h.pos.mulMatr(t.rotateY(-o.isDown*u*o.dx)),h.pos=h.pos.mulMatr(t.rotateX(-o.isDown*u*o.dy)),h.userDir=h.pos.neg().normalize(),h.userDir.y=0,h.userLoc=h.userLoc.add(h.userDir.mul(!!n.w*!n.Control*d)).add(h.userDir.mul(-!!n.s*d)).add(h.userDir.mulMatr(t.rotateY(90)).mul(!!n.a*d)).add(h.userDir.mulMatr(t.rotateY(90)).mul(-!!n.d*d)),h.at=h.userLoc,h.dir=h.pos.neg().normalize(),h.loc=h.userLoc.add(h.pos),h.right=h.userDir.cross(new s(0,1,0)),h.up=h.right.cross(h.dir)}()}function f(t,e=null){let i=[],r=0;null==e&&(e=[...Array(t.length/3).keys()]);for(let e=0;e<t.length;e+=3)i[r++]=new s(t[e],t[e+1],t[e+2]);let n=[];for(let t=0;t<i.length;t++)n[t]=new s;for(let t=0;t<e.length;t+=3){let s=i[e[t]],r=i[e[t+1]],o=i[e[t+2]],h=r.sub(s).cross(o.sub(s)).normalize();n[e[t]]=n[e[t]].add(h),n[e[t+1]]=n[e[t+1]].add(h),n[e[t+2]]=n[e[t+2]].add(h)}for(let t=0;t<i.length;t++)n[t]=n[t].normalize();r=0;let o=[];for(let t=0;t<n.length;t++)o[r++]=n[t].x,o[r++]=n[t].y,o[r++]=n[t].z;return o}const g=[];class m{constructor(t,e,s){this.vs=t,this.fs=e,this.shaderProgram=s}}async function y(e=null){let s,i,r;if(null==e)return g[0];function n(t,e,s){const i=t.createShader(e);return t.shaderSource(i,s),t.compileShader(i,s),i}const o=fetch(`bin/shaders/${e}/vert.glsl`).then((t=>t.text())).then((t=>{s=t})),h=fetch(`bin/shaders/${e}/frag.glsl`).then((t=>t.text())).then((t=>{i=t})),a=Promise.all([o,h]);return await a.then((()=>{const e=n(t.gl,t.gl.VERTEX_SHADER,s),o=n(t.gl,t.gl.FRAGMENT_SHADER,i);let h=t.gl.createProgram();if(t.gl.attachShader(h,e),t.gl.attachShader(h,o),t.gl.linkProgram(h),!t.gl.getProgramParameter(h,t.gl.LINK_STATUS)){const e=t.gl.getProgramInfoLog(h);console.log(e)}r=new m(s,i,h),g.push(r)})),r}function w(e,s,i=null,r=null){let n=t.gl.getAttribLocation(e.shaderProgram,"in_pos");const o=t.gl.createBuffer();t.gl.bindBuffer(t.gl.ARRAY_BUFFER,o),t.gl.bufferData(t.gl.ARRAY_BUFFER,s,t.gl.STATIC_DRAW),t.gl.enableVertexAttribArray(n),t.gl.vertexAttribPointer(n,3,t.gl.FLOAT,!1,0,0);const h=t.gl.getAttribLocation(e.shaderProgram,"normal"),a=t.gl.createBuffer();if(t.gl.bindBuffer(t.gl.ARRAY_BUFFER,a),null==r&&(r=new Float32Array(f(s,i))),t.gl.bufferData(t.gl.ARRAY_BUFFER,r,t.gl.STATIC_DRAW),t.gl.enableVertexAttribArray(h),t.gl.vertexAttribPointer(h,3,t.gl.FLOAT,!1,0,0),null!=i){const e=t.gl.createBuffer();t.gl.bindBuffer(t.gl.ELEMENT_ARRAY_BUFFER,e),t.gl.bufferData(t.gl.ELEMENT_ARRAY_BUFFER,i,t.gl.STATIC_DRAW)}}const b=1.6180339887,v=new Float32Array([0,1,b,1,b,0,b,0,1,0,-1,b,-1,b,0,b,0,-1,0,1,-b,1,-b,0,-b,0,1,0,-1,-b,-1,-b,0,-b,0,-1]),x=new Uint16Array([0,2,1,0,1,4,0,4,8,0,8,3,0,3,2,11,8,4,11,4,6,11,6,9,11,9,10,11,10,9,7,3,10,7,10,9,7,9,5,7,5,2,7,2,3,2,5,1,1,5,6,5,6,9,10,3,8,1,4,6]);let E,A;function _(){t.gl.useProgram(A.shaderProgram);let e=t.gl.getUniformLocation(A.shaderProgram,"time");const i=t.gl.getUniformLocation(A.shaderProgram,"projection"),n=t.gl.getUniformLocation(A.shaderProgram,"modelView"),o=t.gl.getUniformLocation(A.shaderProgram,"world");t.gl.bindVertexArray(E),t.gl.uniformMatrix4fv(i,!1,new Float32Array(h.matrProj.a().join().split(","))),t.gl.uniformMatrix4fv(n,!1,new Float32Array(h.matrView.a().join().split(",")));let a=new r;t.gl.uniformMatrix4fv(o,!1,new Float32Array(a.rotateX(Date.now()/10).mul(a.translate(new s(-3,0,0))).a().join().split(",")));const c=t.gl.getUniformLocation(A.shaderProgram,"camLoc"),l=t.gl.getUniformLocation(A.shaderProgram,"lightDir");t.gl.uniform3f(l,1,1,1),t.gl.uniform3f(c,h.loc.x,h.loc.y,h.loc.z);const u=t.gl.getUniformLocation(A.shaderProgram,"ka"),d=t.gl.getUniformLocation(A.shaderProgram,"kd"),p=t.gl.getUniformLocation(A.shaderProgram,"ks"),f=t.gl.getUniformLocation(A.shaderProgram,"ph");t.gl.uniform3f(u,Math.sin(Date.now()/500)/4+.25,Math.cos(Date.now()/300)/4+.25,Math.sin(Date.now()/1e3+5)/4+.25),t.gl.uniform3f(d,.07568,.61424,.07568),t.gl.uniform3f(p,.633,.727811,.633),t.gl.uniform1f(f,76.8),t.gl.uniform1f(e,Date.now()),t.gl.drawElements(t.gl.TRIANGLES,60,t.gl.UNSIGNED_SHORT,0)}async function R(){A=await y("withLight"),E=t.gl.createVertexArray(),t.gl.bindVertexArray(E),w(A,v,x),t.gl.bindVertexArray(null)}let k=[];class T{constructor(t=new s(.25,.25,.25),e=new s(.4,.4,.4),i=new s(.774597,.774597,.774597),r=76.8,n=null,o=[null]){this.ka=t,this.kd=e,this.ks=i,this.ph=r,this.shaderName=n,this.tex=[...o]}}function L(t){let e=t.target.files[0],s=new FileReader;s.readAsText(e),s.onload=t=>{P(t.target.result).then((t=>k.push(t)))},s.onerror=function(){console.log(s.error)}}async function P(t){let e=[0],i=[],r=[0],n=t.split("\n");for(let t=0;t<n.length;t++){let o=n[t].split(" ");if("v"==o[0]){let t=+o[1],i=+o[2],r=+o[3];e.push(new s(t,i,r))}else if("f"==o[0])i.push(+o[1].split("/")[0]),i.push(+o[2].split("/")[0]),i.push(+o[3].split("/")[0]);else if("vn"==o[0]){let t=+o[1],e=+o[2],i=+o[3];r.push(new s(t,e,i))}}0==r.length&&(r=f(e,i));let o=[];e.forEach(((t,e)=>o.push(new B(t,r[e]))));let h=new S(o,i);return h.mtl=new T,h.mtl.shaderName="withLight",await h.create(),h}class B{constructor(t=new s,r=new s,n=new e,o=new i){this.p=t,this.n=r,this.t=n,this.c=o}}class S{constructor(e,s=null,i=0,n=new r,o=t.gl.TRIANGLES,h=null){this.va=h,this.mtl=i,this.vBuf=e,this.iBuf=s,this.trans=n,this.type=o}draw(e){t.gl.useProgram(this.shader.shaderProgram);let s=t.gl.getUniformLocation(this.shader.shaderProgram,"time");const i=t.gl.getUniformLocation(this.shader.shaderProgram,"projection"),r=t.gl.getUniformLocation(this.shader.shaderProgram,"modelView"),n=t.gl.getUniformLocation(this.shader.shaderProgram,"lightDir"),o=t.gl.getUniformLocation(this.shader.shaderProgram,"camLoc"),a=t.gl.getUniformLocation(this.shader.shaderProgram,"world");t.gl.bindVertexArray(this.va),t.gl.uniformMatrix4fv(i,!1,new Float32Array(h.matrProj.a().join().split(","))),t.gl.uniformMatrix4fv(r,!1,new Float32Array(h.matrView.a().join().split(","))),t.gl.uniform1f(s,Date.now()),t.gl.uniform3f(n,1,2,3),t.gl.uniform3f(o,h.loc.x,h.loc.y,h.loc.z),t.gl.uniformMatrix4fv(a,!1,new Float32Array(e.a().join().split(",")));const c=t.gl.getUniformLocation(this.shader.shaderProgram,"ka"),l=t.gl.getUniformLocation(this.shader.shaderProgram,"kd"),u=t.gl.getUniformLocation(this.shader.shaderProgram,"ks"),d=t.gl.getUniformLocation(this.shader.shaderProgram,"ph");t.gl.uniform3f(c,this.mtl.ka.x,this.mtl.ka.y,this.mtl.ka.z),t.gl.uniform3f(l,this.mtl.kd.x,this.mtl.kd.y,this.mtl.kd.z),t.gl.uniform3f(u,this.mtl.ks.x,this.mtl.ks.y,this.mtl.ks.z),t.gl.uniform1f(d,this.mtl.ph),null!=this.iBuf?t.gl.drawElements(t.gl.TRIANGLES,this.iBuf.length,t.gl.UNSIGNED_SHORT,0):t.gl.drawArrays(t.gl.type,0,this.vBuf.length)}async create(){this.shader=await y(this.mtl.shaderName),this.va=t.gl.createVertexArray(),t.gl.bindVertexArray(this.va),w(this.shader,new Float32Array(this.vBuf.map((t=>[t.p.x,t.p.y,t.p.z])).flat()),new Uint16Array(this.iBuf),new Float32Array(this.vBuf.map((t=>[t.n.x,t.n.y,t.n.z])).flat())),t.gl.bindVertexArray(null)}}function O(){k.forEach((t=>t.draw(t.trans)))}async function C(){}const D=new Float32Array([10,-5,10,-10,-5,-10,10,-5,-10,10,-5,10,-10,-5,10,-10,-5,-10]);for(let t=0;t<18;t+=3)D[t]*=100,D[t+1]=0,D[t+2]*=100;let z;new r;let N,F=new r,U=1;function M(){if(U){z.draw(F.scale(new s(.2*(Math.sin(Date.now()/200)/5+1.2),.2*(Math.cos(Date.now()/300)/5+1.2),.2*(Math.sin(Date.now()/400+5)/5+1.2))).mul(F.translate(new s(0,-3,0))).mul(F.translate(new s(-10,0,0))));let t=40;for(let e=0;e<t*t;e++)z.mtl.ka=new s(.4*(Math.sin(Date.now()/200+e)/5+1.2),.4*(Math.cos(Date.now()/300+e)/5+1.2),.4*(Math.sin(Date.now()/400+5+e)/5+1.2)),z.draw(F.scale(new s(.2*(Math.sin(Date.now()/200+e)/5+1.2),.2*(Math.cos(Date.now()/300+e)/5+1.2),.2*(Math.sin(Date.now()/400+5+e)/5+1.2))).mul(F.translate(new s(0,5*Math.floor(e/t),-e%t*5))))}}async function j(){let t;await fetch("bin/models/cow1.obj").then((t=>t.text())).then((e=>{t=e})).catch((()=>U=0)),z=await P(t),z.mtl.shaderName="withLightSmooth",await z.create()}let I=new r,V=1,q=new s(-1,0,0);function H(){V&&N.draw(I.rotateY(180*q.angle(h.right)/Math.PI).mul(I.scale(new s(1,1,1))).mul(I.translate(new s(h.userLoc.x,0,h.userLoc.z))));for(let e of t.users)N.draw(I.rotateY(180*q.angle(e.right)/Math.PI).mul(I.scale(new s(1,1,1))).mul(I.translate(e.userLoc)))}async function Y(){let t;await fetch("bin/models/me1.obj").then((t=>t.text())).then((e=>{t=e})).catch((()=>V=0)),N=await P(t),N.mtl.shaderName="withLightSmooth",await N.create()}let W,X,K,G=[];const $=document.getElementById("rcoeff"),J=document.getElementById("gcoeff"),Q=document.getElementById("bcoeff"),Z=document.getElementById("a"),tt=document.getElementById("b");let et,st,it,rt,nt,ot=Date.now(),ht=6;function at(){t.gl.disable(t.gl.DEPTH_TEST),t.gl.bindFramebuffer(t.gl.FRAMEBUFFER,it),t.gl.viewport(0,0,et,st),t.gl.bindVertexArray(K),t.gl.useProgram(W.shaderProgram);let e=t.gl.getUniformLocation(W.shaderProgram,"time"),s=t.gl.getUniformLocation(W.shaderProgram,"x"),i=t.gl.getUniformLocation(W.shaderProgram,"y"),r=t.gl.getUniformLocation(W.shaderProgram,"zoom"),n=t.gl.getUniformLocation(W.shaderProgram,"rcoeff"),o=t.gl.getUniformLocation(W.shaderProgram,"gcoeff"),a=t.gl.getUniformLocation(W.shaderProgram,"bcoeff"),c=t.gl.getUniformLocation(W.shaderProgram,"a"),l=t.gl.getUniformLocation(W.shaderProgram,"b");t.gl.uniform1f(e,(Date.now()-ot)/1e3),t.gl.uniform1f(i,.4),t.gl.uniform1f(s,.4),t.gl.uniform1f(r,1),t.gl.uniform1f(n,$.value),t.gl.uniform1f(o,J.value),t.gl.uniform1f(a,Q.value),t.gl.uniform1f(c,Z.value),t.gl.uniform1f(l,5*tt.value),t.gl.useProgram(W.shaderProgram),t.gl.drawArrays(t.gl.TRIANGLE_STRIP,0,4),t.gl.useProgram(X.shaderProgram);const u=t.gl.getUniformLocation(X.shaderProgram,"tex0");t.gl.bindFramebuffer(t.gl.FRAMEBUFFER,null),t.gl.viewport(0,0,Math.max(t.gl.canvas.width,t.gl.canvas.height),Math.max(t.gl.canvas.width,t.gl.canvas.height)),t.gl.activeTexture(t.gl.TEXTURE0+ht),t.gl.bindTexture(t.gl.TEXTURE_2D,rt),t.gl.uniform1i(u,ht);let d=t.gl.getUniformLocation(X.shaderProgram,"camDir"),p=t.gl.getUniformLocation(X.shaderProgram,"camUp"),f=t.gl.getUniformLocation(X.shaderProgram,"camRight"),g=t.gl.getUniformLocation(X.shaderProgram,"projDist"),m=t.gl.getUniformLocation(X.shaderProgram,"frameW"),y=t.gl.getUniformLocation(X.shaderProgram,"frameH");t.gl.uniform3f(d,h.dir.x,h.dir.y,h.dir.z),t.gl.uniform3f(p,h.up.x,h.up.y,h.up.z),t.gl.uniform3f(f,h.right.x,h.right.y,h.right.z),t.gl.uniform1f(g,h.projDist),t.gl.uniform1f(m,h.frameW),t.gl.uniform1f(y,h.frameH),t.gl.useProgram(X.shaderProgram),t.gl.drawArrays(t.gl.TRIANGLE_STRIP,0,4),t.gl.enable(t.gl.DEPTH_TEST)}async function ct(){K=t.gl.createVertexArray(),t.gl.bindVertexArray(K),W=await y("mandelbrot"),G=[-1,-1,0,-1,1,0,1,-1,0,1,1,0];let e=t.gl.getAttribLocation(W.shaderProgram,"in_pos"),s=t.gl.createBuffer();t.gl.bindBuffer(t.gl.ARRAY_BUFFER,s),t.gl.bufferData(t.gl.ARRAY_BUFFER,new Float32Array(G),t.gl.STATIC_DRAW),t.gl.enableVertexAttribArray(e),t.gl.vertexAttribPointer(e,3,t.gl.FLOAT,!1,0,0),X=await y("sky"),e=t.gl.getAttribLocation(W.shaderProgram,"in_pos"),s=t.gl.createBuffer(),t.gl.bindBuffer(t.gl.ARRAY_BUFFER,s),t.gl.bufferData(t.gl.ARRAY_BUFFER,new Float32Array(G),t.gl.STATIC_DRAW),t.gl.enableVertexAttribArray(e),t.gl.vertexAttribPointer(e,3,t.gl.FLOAT,!1,0,0),et=3*h.frameW,st=3*h.frameH,rt=t.gl.createTexture(),t.gl.bindTexture(t.gl.TEXTURE_2D,rt),t.gl.texImage2D(t.gl.TEXTURE_2D,0,t.gl.RGBA,et,st,0,t.gl.RGBA,t.gl.UNSIGNED_BYTE,null),t.gl.texParameteri(t.gl.TEXTURE_2D,t.gl.TEXTURE_MIN_FILTER,t.gl.LINEAR),nt=t.gl.createRenderbuffer(),t.gl.bindRenderbuffer(t.gl.RENDERBUFFER,nt),t.gl.renderbufferStorage(t.gl.RENDERBUFFER,t.gl.DEPTH_COMPONENT16,et,st),it=t.gl.createFramebuffer(),t.gl.bindFramebuffer(t.gl.FRAMEBUFFER,it),t.gl.framebufferTexture2D(t.gl.FRAMEBUFFER,t.gl.COLOR_ATTACHMENT0,t.gl.TEXTURE_2D,rt,0),t.gl.framebufferRenderbuffer(t.gl.FRAMEBUFFER,t.gl.DEPTH_ATTACHMENT,t.gl.RENDERBUFFER,nt),t.gl.bindVertexArray(null)}class lt{constructor(t,e){this.init=t,this.render=e}}let ut=[];async function dt(){pt(ct,at),pt(j,M),pt(R,_),pt(Y,H),pt(C,O);for(let t=0;t<ut.length;t++)await ut[t].init()}function pt(t,e){ut.push(new lt(t,e))}const ft=Object.create(null);ft.open="0",ft.close="1",ft.ping="2",ft.pong="3",ft.message="4",ft.upgrade="5",ft.noop="6";const gt=Object.create(null);Object.keys(ft).forEach((t=>{gt[ft[t]]=t}));const mt={type:"error",data:"parser error"},yt="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===Object.prototype.toString.call(Blob),wt="function"==typeof ArrayBuffer,bt=({type:t,data:e},s,i)=>{return yt&&e instanceof Blob?s?i(e):vt(e,i):wt&&(e instanceof ArrayBuffer||(r=e,"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(r):r&&r.buffer instanceof ArrayBuffer))?s?i(e):vt(new Blob([e]),i):i(ft[t]+(e||""));var r},vt=(t,e)=>{const s=new FileReader;return s.onload=function(){const t=s.result.split(",")[1];e("b"+(t||""))},s.readAsDataURL(t)},xt="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",Et="undefined"==typeof Uint8Array?[]:new Uint8Array(256);for(let t=0;t<64;t++)Et[xt.charCodeAt(t)]=t;const At="function"==typeof ArrayBuffer,_t=(t,e)=>{if("string"!=typeof t)return{type:"message",data:kt(t,e)};const s=t.charAt(0);if("b"===s)return{type:"message",data:Rt(t.substring(1),e)};return gt[s]?t.length>1?{type:gt[s],data:t.substring(1)}:{type:gt[s]}:mt},Rt=(t,e)=>{if(At){const s=(t=>{let e,s,i,r,n,o=.75*t.length,h=t.length,a=0;"="===t[t.length-1]&&(o--,"="===t[t.length-2]&&o--);const c=new ArrayBuffer(o),l=new Uint8Array(c);for(e=0;e<h;e+=4)s=Et[t.charCodeAt(e)],i=Et[t.charCodeAt(e+1)],r=Et[t.charCodeAt(e+2)],n=Et[t.charCodeAt(e+3)],l[a++]=s<<2|i>>4,l[a++]=(15&i)<<4|r>>2,l[a++]=(3&r)<<6|63&n;return c})(t);return kt(s,e)}return{base64:!0,data:t}},kt=(t,e)=>"blob"===e&&t instanceof ArrayBuffer?new Blob([t]):t,Tt=String.fromCharCode(30);function Lt(t){if(t)return function(t){for(var e in Lt.prototype)t[e]=Lt.prototype[e];return t}(t)}Lt.prototype.on=Lt.prototype.addEventListener=function(t,e){return this._callbacks=this._callbacks||{},(this._callbacks["$"+t]=this._callbacks["$"+t]||[]).push(e),this},Lt.prototype.once=function(t,e){function s(){this.off(t,s),e.apply(this,arguments)}return s.fn=e,this.on(t,s),this},Lt.prototype.off=Lt.prototype.removeListener=Lt.prototype.removeAllListeners=Lt.prototype.removeEventListener=function(t,e){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var s,i=this._callbacks["$"+t];if(!i)return this;if(1==arguments.length)return delete this._callbacks["$"+t],this;for(var r=0;r<i.length;r++)if((s=i[r])===e||s.fn===e){i.splice(r,1);break}return 0===i.length&&delete this._callbacks["$"+t],this},Lt.prototype.emit=function(t){this._callbacks=this._callbacks||{};for(var e=new Array(arguments.length-1),s=this._callbacks["$"+t],i=1;i<arguments.length;i++)e[i-1]=arguments[i];if(s){i=0;for(var r=(s=s.slice(0)).length;i<r;++i)s[i].apply(this,e)}return this},Lt.prototype.emitReserved=Lt.prototype.emit,Lt.prototype.listeners=function(t){return this._callbacks=this._callbacks||{},this._callbacks["$"+t]||[]},Lt.prototype.hasListeners=function(t){return!!this.listeners(t).length};const Pt="undefined"!=typeof self?self:"undefined"!=typeof window?window:Function("return this")();function Bt(t,...e){return e.reduce(((e,s)=>(t.hasOwnProperty(s)&&(e[s]=t[s]),e)),{})}const St=Pt.setTimeout,Ot=Pt.clearTimeout;function Ct(t,e){e.useNativeTimers?(t.setTimeoutFn=St.bind(Pt),t.clearTimeoutFn=Ot.bind(Pt)):(t.setTimeoutFn=Pt.setTimeout.bind(Pt),t.clearTimeoutFn=Pt.clearTimeout.bind(Pt))}class Dt extends Error{constructor(t,e,s){super(t),this.description=e,this.context=s,this.type="TransportError"}}class zt extends Lt{constructor(t){super(),this.writable=!1,Ct(this,t),this.opts=t,this.query=t.query,this.socket=t.socket}onError(t,e,s){return super.emitReserved("error",new Dt(t,e,s)),this}open(){return this.readyState="opening",this.doOpen(),this}close(){return"opening"!==this.readyState&&"open"!==this.readyState||(this.doClose(),this.onClose()),this}send(t){"open"===this.readyState&&this.write(t)}onOpen(){this.readyState="open",this.writable=!0,super.emitReserved("open")}onData(t){const e=_t(t,this.socket.binaryType);this.onPacket(e)}onPacket(t){super.emitReserved("packet",t)}onClose(t){this.readyState="closed",super.emitReserved("close",t)}pause(t){}}const Nt="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(""),Ft=64,Ut={};let Mt,jt=0,It=0;function Vt(t){let e="";do{e=Nt[t%Ft]+e,t=Math.floor(t/Ft)}while(t>0);return e}function qt(){const t=Vt(+new Date);return t!==Mt?(jt=0,Mt=t):t+"."+Vt(jt++)}for(;It<Ft;It++)Ut[Nt[It]]=It;function Ht(t){let e="";for(let s in t)t.hasOwnProperty(s)&&(e.length&&(e+="&"),e+=encodeURIComponent(s)+"="+encodeURIComponent(t[s]));return e}let Yt=!1;try{Yt="undefined"!=typeof XMLHttpRequest&&"withCredentials"in new XMLHttpRequest}catch(t){}const Wt=Yt;function Xt(t){const e=t.xdomain;try{if("undefined"!=typeof XMLHttpRequest&&(!e||Wt))return new XMLHttpRequest}catch(t){}if(!e)try{return new(Pt[["Active"].concat("Object").join("X")])("Microsoft.XMLHTTP")}catch(t){}}function Kt(){}const Gt=null!=new Xt({xdomain:!1}).responseType;class $t extends Lt{constructor(t,e){super(),Ct(this,e),this.opts=e,this.method=e.method||"GET",this.uri=t,this.async=!1!==e.async,this.data=void 0!==e.data?e.data:null,this.create()}create(){const t=Bt(this.opts,"agent","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized","autoUnref");t.xdomain=!!this.opts.xd,t.xscheme=!!this.opts.xs;const e=this.xhr=new Xt(t);try{e.open(this.method,this.uri,this.async);try{if(this.opts.extraHeaders){e.setDisableHeaderCheck&&e.setDisableHeaderCheck(!0);for(let t in this.opts.extraHeaders)this.opts.extraHeaders.hasOwnProperty(t)&&e.setRequestHeader(t,this.opts.extraHeaders[t])}}catch(t){}if("POST"===this.method)try{e.setRequestHeader("Content-type","text/plain;charset=UTF-8")}catch(t){}try{e.setRequestHeader("Accept","*/*")}catch(t){}"withCredentials"in e&&(e.withCredentials=this.opts.withCredentials),this.opts.requestTimeout&&(e.timeout=this.opts.requestTimeout),e.onreadystatechange=()=>{4===e.readyState&&(200===e.status||1223===e.status?this.onLoad():this.setTimeoutFn((()=>{this.onError("number"==typeof e.status?e.status:0)}),0))},e.send(this.data)}catch(t){return void this.setTimeoutFn((()=>{this.onError(t)}),0)}"undefined"!=typeof document&&(this.index=$t.requestsCount++,$t.requests[this.index]=this)}onError(t){this.emitReserved("error",t,this.xhr),this.cleanup(!0)}cleanup(t){if(void 0!==this.xhr&&null!==this.xhr){if(this.xhr.onreadystatechange=Kt,t)try{this.xhr.abort()}catch(t){}"undefined"!=typeof document&&delete $t.requests[this.index],this.xhr=null}}onLoad(){const t=this.xhr.responseText;null!==t&&(this.emitReserved("data",t),this.emitReserved("success"),this.cleanup())}abort(){this.cleanup()}}if($t.requestsCount=0,$t.requests={},"undefined"!=typeof document)if("function"==typeof attachEvent)attachEvent("onunload",Jt);else if("function"==typeof addEventListener){addEventListener("onpagehide"in Pt?"pagehide":"unload",Jt,!1)}function Jt(){for(let t in $t.requests)$t.requests.hasOwnProperty(t)&&$t.requests[t].abort()}const Qt="function"==typeof Promise&&"function"==typeof Promise.resolve?t=>Promise.resolve().then(t):(t,e)=>e(t,0),Zt=Pt.WebSocket||Pt.MozWebSocket,te="undefined"!=typeof navigator&&"string"==typeof navigator.product&&"reactnative"===navigator.product.toLowerCase();const ee={websocket:class extends zt{constructor(t){super(t),this.supportsBinary=!t.forceBase64}get name(){return"websocket"}doOpen(){if(!this.check())return;const t=this.uri(),e=this.opts.protocols,s=te?{}:Bt(this.opts,"agent","perMessageDeflate","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized","localAddress","protocolVersion","origin","maxPayload","family","checkServerIdentity");this.opts.extraHeaders&&(s.headers=this.opts.extraHeaders);try{this.ws=te?new Zt(t,e,s):e?new Zt(t,e):new Zt(t)}catch(t){return this.emitReserved("error",t)}this.ws.binaryType=this.socket.binaryType||"arraybuffer",this.addEventListeners()}addEventListeners(){this.ws.onopen=()=>{this.opts.autoUnref&&this.ws._socket.unref(),this.onOpen()},this.ws.onclose=t=>this.onClose({description:"websocket connection closed",context:t}),this.ws.onmessage=t=>this.onData(t.data),this.ws.onerror=t=>this.onError("websocket error",t)}write(t){this.writable=!1;for(let e=0;e<t.length;e++){const s=t[e],i=e===t.length-1;bt(s,this.supportsBinary,(t=>{try{this.ws.send(t)}catch(t){}i&&Qt((()=>{this.writable=!0,this.emitReserved("drain")}),this.setTimeoutFn)}))}}doClose(){void 0!==this.ws&&(this.ws.close(),this.ws=null)}uri(){let t=this.query||{};const e=this.opts.secure?"wss":"ws";let s="";this.opts.port&&("wss"===e&&443!==Number(this.opts.port)||"ws"===e&&80!==Number(this.opts.port))&&(s=":"+this.opts.port),this.opts.timestampRequests&&(t[this.opts.timestampParam]=qt()),this.supportsBinary||(t.b64=1);const i=Ht(t);return e+"://"+(-1!==this.opts.hostname.indexOf(":")?"["+this.opts.hostname+"]":this.opts.hostname)+s+this.opts.path+(i.length?"?"+i:"")}check(){return!!Zt}},polling:class extends zt{constructor(t){if(super(t),this.polling=!1,"undefined"!=typeof location){const e="https:"===location.protocol;let s=location.port;s||(s=e?"443":"80"),this.xd="undefined"!=typeof location&&t.hostname!==location.hostname||s!==t.port,this.xs=t.secure!==e}const e=t&&t.forceBase64;this.supportsBinary=Gt&&!e}get name(){return"polling"}doOpen(){this.poll()}pause(t){this.readyState="pausing";const e=()=>{this.readyState="paused",t()};if(this.polling||!this.writable){let t=0;this.polling&&(t++,this.once("pollComplete",(function(){--t||e()}))),this.writable||(t++,this.once("drain",(function(){--t||e()})))}else e()}poll(){this.polling=!0,this.doPoll(),this.emitReserved("poll")}onData(t){((t,e)=>{const s=t.split(Tt),i=[];for(let t=0;t<s.length;t++){const r=_t(s[t],e);if(i.push(r),"error"===r.type)break}return i})(t,this.socket.binaryType).forEach((t=>{if("opening"===this.readyState&&"open"===t.type&&this.onOpen(),"close"===t.type)return this.onClose({description:"transport closed by the server"}),!1;this.onPacket(t)})),"closed"!==this.readyState&&(this.polling=!1,this.emitReserved("pollComplete"),"open"===this.readyState&&this.poll())}doClose(){const t=()=>{this.write([{type:"close"}])};"open"===this.readyState?t():this.once("open",t)}write(t){this.writable=!1,((t,e)=>{const s=t.length,i=new Array(s);let r=0;t.forEach(((t,n)=>{bt(t,!1,(t=>{i[n]=t,++r===s&&e(i.join(Tt))}))}))})(t,(t=>{this.doWrite(t,(()=>{this.writable=!0,this.emitReserved("drain")}))}))}uri(){let t=this.query||{};const e=this.opts.secure?"https":"http";let s="";!1!==this.opts.timestampRequests&&(t[this.opts.timestampParam]=qt()),this.supportsBinary||t.sid||(t.b64=1),this.opts.port&&("https"===e&&443!==Number(this.opts.port)||"http"===e&&80!==Number(this.opts.port))&&(s=":"+this.opts.port);const i=Ht(t);return e+"://"+(-1!==this.opts.hostname.indexOf(":")?"["+this.opts.hostname+"]":this.opts.hostname)+s+this.opts.path+(i.length?"?"+i:"")}request(t={}){return Object.assign(t,{xd:this.xd,xs:this.xs},this.opts),new $t(this.uri(),t)}doWrite(t,e){const s=this.request({method:"POST",data:t});s.on("success",e),s.on("error",((t,e)=>{this.onError("xhr post error",t,e)}))}doPoll(){const t=this.request();t.on("data",this.onData.bind(this)),t.on("error",((t,e)=>{this.onError("xhr poll error",t,e)})),this.pollXhr=t}}},se=/^(?:(?![^:@\/?#]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@\/?#]*)(?::([^:@\/?#]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/,ie=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"];function re(t){const e=t,s=t.indexOf("["),i=t.indexOf("]");-1!=s&&-1!=i&&(t=t.substring(0,s)+t.substring(s,i).replace(/:/g,";")+t.substring(i,t.length));let r=se.exec(t||""),n={},o=14;for(;o--;)n[ie[o]]=r[o]||"";return-1!=s&&-1!=i&&(n.source=e,n.host=n.host.substring(1,n.host.length-1).replace(/;/g,":"),n.authority=n.authority.replace("[","").replace("]","").replace(/;/g,":"),n.ipv6uri=!0),n.pathNames=function(t,e){const s=/\/{2,9}/g,i=e.replace(s,"/").split("/");"/"!=e.slice(0,1)&&0!==e.length||i.splice(0,1);"/"==e.slice(-1)&&i.splice(i.length-1,1);return i}(0,n.path),n.queryKey=function(t,e){const s={};return e.replace(/(?:^|&)([^&=]*)=?([^&]*)/g,(function(t,e,i){e&&(s[e]=i)})),s}(0,n.query),n}let ne=class t extends Lt{constructor(t,e={}){super(),this.writeBuffer=[],t&&"object"==typeof t&&(e=t,t=null),t?(t=re(t),e.hostname=t.host,e.secure="https"===t.protocol||"wss"===t.protocol,e.port=t.port,t.query&&(e.query=t.query)):e.host&&(e.hostname=re(e.host).host),Ct(this,e),this.secure=null!=e.secure?e.secure:"undefined"!=typeof location&&"https:"===location.protocol,e.hostname&&!e.port&&(e.port=this.secure?"443":"80"),this.hostname=e.hostname||("undefined"!=typeof location?location.hostname:"localhost"),this.port=e.port||("undefined"!=typeof location&&location.port?location.port:this.secure?"443":"80"),this.transports=e.transports||["polling","websocket"],this.writeBuffer=[],this.prevBufferLen=0,this.opts=Object.assign({path:"/engine.io",agent:!1,withCredentials:!1,upgrade:!0,timestampParam:"t",rememberUpgrade:!1,addTrailingSlash:!0,rejectUnauthorized:!0,perMessageDeflate:{threshold:1024},transportOptions:{},closeOnBeforeunload:!0},e),this.opts.path=this.opts.path.replace(/\/$/,"")+(this.opts.addTrailingSlash?"/":""),"string"==typeof this.opts.query&&(this.opts.query=function(t){let e={},s=t.split("&");for(let t=0,i=s.length;t<i;t++){let i=s[t].split("=");e[decodeURIComponent(i[0])]=decodeURIComponent(i[1])}return e}(this.opts.query)),this.id=null,this.upgrades=null,this.pingInterval=null,this.pingTimeout=null,this.pingTimeoutTimer=null,"function"==typeof addEventListener&&(this.opts.closeOnBeforeunload&&(this.beforeunloadEventListener=()=>{this.transport&&(this.transport.removeAllListeners(),this.transport.close())},addEventListener("beforeunload",this.beforeunloadEventListener,!1)),"localhost"!==this.hostname&&(this.offlineEventListener=()=>{this.onClose("transport close",{description:"network connection lost"})},addEventListener("offline",this.offlineEventListener,!1))),this.open()}createTransport(t){const e=Object.assign({},this.opts.query);e.EIO=4,e.transport=t,this.id&&(e.sid=this.id);const s=Object.assign({},this.opts.transportOptions[t],this.opts,{query:e,socket:this,hostname:this.hostname,secure:this.secure,port:this.port});return new ee[t](s)}open(){let e;if(this.opts.rememberUpgrade&&t.priorWebsocketSuccess&&-1!==this.transports.indexOf("websocket"))e="websocket";else{if(0===this.transports.length)return void this.setTimeoutFn((()=>{this.emitReserved("error","No transports available")}),0);e=this.transports[0]}this.readyState="opening";try{e=this.createTransport(e)}catch(t){return this.transports.shift(),void this.open()}e.open(),this.setTransport(e)}setTransport(t){this.transport&&this.transport.removeAllListeners(),this.transport=t,t.on("drain",this.onDrain.bind(this)).on("packet",this.onPacket.bind(this)).on("error",this.onError.bind(this)).on("close",(t=>this.onClose("transport close",t)))}probe(e){let s=this.createTransport(e),i=!1;t.priorWebsocketSuccess=!1;const r=()=>{i||(s.send([{type:"ping",data:"probe"}]),s.once("packet",(e=>{if(!i)if("pong"===e.type&&"probe"===e.data){if(this.upgrading=!0,this.emitReserved("upgrading",s),!s)return;t.priorWebsocketSuccess="websocket"===s.name,this.transport.pause((()=>{i||"closed"!==this.readyState&&(l(),this.setTransport(s),s.send([{type:"upgrade"}]),this.emitReserved("upgrade",s),s=null,this.upgrading=!1,this.flush())}))}else{const t=new Error("probe error");t.transport=s.name,this.emitReserved("upgradeError",t)}})))};function n(){i||(i=!0,l(),s.close(),s=null)}const o=t=>{const e=new Error("probe error: "+t);e.transport=s.name,n(),this.emitReserved("upgradeError",e)};function h(){o("transport closed")}function a(){o("socket closed")}function c(t){s&&t.name!==s.name&&n()}const l=()=>{s.removeListener("open",r),s.removeListener("error",o),s.removeListener("close",h),this.off("close",a),this.off("upgrading",c)};s.once("open",r),s.once("error",o),s.once("close",h),this.once("close",a),this.once("upgrading",c),s.open()}onOpen(){if(this.readyState="open",t.priorWebsocketSuccess="websocket"===this.transport.name,this.emitReserved("open"),this.flush(),"open"===this.readyState&&this.opts.upgrade){let t=0;const e=this.upgrades.length;for(;t<e;t++)this.probe(this.upgrades[t])}}onPacket(t){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState)switch(this.emitReserved("packet",t),this.emitReserved("heartbeat"),t.type){case"open":this.onHandshake(JSON.parse(t.data));break;case"ping":this.resetPingTimeout(),this.sendPacket("pong"),this.emitReserved("ping"),this.emitReserved("pong");break;case"error":const e=new Error("server error");e.code=t.data,this.onError(e);break;case"message":this.emitReserved("data",t.data),this.emitReserved("message",t.data)}}onHandshake(t){this.emitReserved("handshake",t),this.id=t.sid,this.transport.query.sid=t.sid,this.upgrades=this.filterUpgrades(t.upgrades),this.pingInterval=t.pingInterval,this.pingTimeout=t.pingTimeout,this.maxPayload=t.maxPayload,this.onOpen(),"closed"!==this.readyState&&this.resetPingTimeout()}resetPingTimeout(){this.clearTimeoutFn(this.pingTimeoutTimer),this.pingTimeoutTimer=this.setTimeoutFn((()=>{this.onClose("ping timeout")}),this.pingInterval+this.pingTimeout),this.opts.autoUnref&&this.pingTimeoutTimer.unref()}onDrain(){this.writeBuffer.splice(0,this.prevBufferLen),this.prevBufferLen=0,0===this.writeBuffer.length?this.emitReserved("drain"):this.flush()}flush(){if("closed"!==this.readyState&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length){const t=this.getWritablePackets();this.transport.send(t),this.prevBufferLen=t.length,this.emitReserved("flush")}}getWritablePackets(){if(!(this.maxPayload&&"polling"===this.transport.name&&this.writeBuffer.length>1))return this.writeBuffer;let t=1;for(let s=0;s<this.writeBuffer.length;s++){const i=this.writeBuffer[s].data;if(i&&(t+="string"==typeof(e=i)?function(t){let e=0,s=0;for(let i=0,r=t.length;i<r;i++)e=t.charCodeAt(i),e<128?s+=1:e<2048?s+=2:e<55296||e>=57344?s+=3:(i++,s+=4);return s}(e):Math.ceil(1.33*(e.byteLength||e.size))),s>0&&t>this.maxPayload)return this.writeBuffer.slice(0,s);t+=2}var e;return this.writeBuffer}write(t,e,s){return this.sendPacket("message",t,e,s),this}send(t,e,s){return this.sendPacket("message",t,e,s),this}sendPacket(t,e,s,i){if("function"==typeof e&&(i=e,e=void 0),"function"==typeof s&&(i=s,s=null),"closing"===this.readyState||"closed"===this.readyState)return;(s=s||{}).compress=!1!==s.compress;const r={type:t,data:e,options:s};this.emitReserved("packetCreate",r),this.writeBuffer.push(r),i&&this.once("flush",i),this.flush()}close(){const t=()=>{this.onClose("forced close"),this.transport.close()},e=()=>{this.off("upgrade",e),this.off("upgradeError",e),t()},s=()=>{this.once("upgrade",e),this.once("upgradeError",e)};return"opening"!==this.readyState&&"open"!==this.readyState||(this.readyState="closing",this.writeBuffer.length?this.once("drain",(()=>{this.upgrading?s():t()})):this.upgrading?s():t()),this}onError(e){t.priorWebsocketSuccess=!1,this.emitReserved("error",e),this.onClose("transport error",e)}onClose(t,e){"opening"!==this.readyState&&"open"!==this.readyState&&"closing"!==this.readyState||(this.clearTimeoutFn(this.pingTimeoutTimer),this.transport.removeAllListeners("close"),this.transport.close(),this.transport.removeAllListeners(),"function"==typeof removeEventListener&&(removeEventListener("beforeunload",this.beforeunloadEventListener,!1),removeEventListener("offline",this.offlineEventListener,!1)),this.readyState="closed",this.id=null,this.emitReserved("close",t,e),this.writeBuffer=[],this.prevBufferLen=0)}filterUpgrades(t){const e=[];let s=0;const i=t.length;for(;s<i;s++)~this.transports.indexOf(t[s])&&e.push(t[s]);return e}};ne.protocol=4;const oe="function"==typeof ArrayBuffer,he=t=>"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(t):t.buffer instanceof ArrayBuffer,ae=Object.prototype.toString,ce="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===ae.call(Blob),le="function"==typeof File||"undefined"!=typeof File&&"[object FileConstructor]"===ae.call(File);function ue(t){return oe&&(t instanceof ArrayBuffer||he(t))||ce&&t instanceof Blob||le&&t instanceof File}function de(t,e){if(!t||"object"!=typeof t)return!1;if(Array.isArray(t)){for(let e=0,s=t.length;e<s;e++)if(de(t[e]))return!0;return!1}if(ue(t))return!0;if(t.toJSON&&"function"==typeof t.toJSON&&1===arguments.length)return de(t.toJSON(),!0);for(const e in t)if(Object.prototype.hasOwnProperty.call(t,e)&&de(t[e]))return!0;return!1}function pe(t){const e=[],s=t.data,i=t;return i.data=fe(s,e),i.attachments=e.length,{packet:i,buffers:e}}function fe(t,e){if(!t)return t;if(ue(t)){const s={_placeholder:!0,num:e.length};return e.push(t),s}if(Array.isArray(t)){const s=new Array(t.length);for(let i=0;i<t.length;i++)s[i]=fe(t[i],e);return s}if("object"==typeof t&&!(t instanceof Date)){const s={};for(const i in t)Object.prototype.hasOwnProperty.call(t,i)&&(s[i]=fe(t[i],e));return s}return t}function ge(t,e){return t.data=me(t.data,e),delete t.attachments,t}function me(t,e){if(!t)return t;if(t&&!0===t._placeholder){if("number"==typeof t.num&&t.num>=0&&t.num<e.length)return e[t.num];throw new Error("illegal attachments")}if(Array.isArray(t))for(let s=0;s<t.length;s++)t[s]=me(t[s],e);else if("object"==typeof t)for(const s in t)Object.prototype.hasOwnProperty.call(t,s)&&(t[s]=me(t[s],e));return t}const ye=["connect","connect_error","disconnect","disconnecting","newListener","removeListener"];var we;!function(t){t[t.CONNECT=0]="CONNECT",t[t.DISCONNECT=1]="DISCONNECT",t[t.EVENT=2]="EVENT",t[t.ACK=3]="ACK",t[t.CONNECT_ERROR=4]="CONNECT_ERROR",t[t.BINARY_EVENT=5]="BINARY_EVENT",t[t.BINARY_ACK=6]="BINARY_ACK"}(we||(we={}));function be(t){return"[object Object]"===Object.prototype.toString.call(t)}class ve extends Lt{constructor(t){super(),this.reviver=t}add(t){let e;if("string"==typeof t){if(this.reconstructor)throw new Error("got plaintext data when reconstructing a packet");e=this.decodeString(t);const s=e.type===we.BINARY_EVENT;s||e.type===we.BINARY_ACK?(e.type=s?we.EVENT:we.ACK,this.reconstructor=new xe(e),0===e.attachments&&super.emitReserved("decoded",e)):super.emitReserved("decoded",e)}else{if(!ue(t)&&!t.base64)throw new Error("Unknown type: "+t);if(!this.reconstructor)throw new Error("got binary data when not reconstructing a packet");e=this.reconstructor.takeBinaryData(t),e&&(this.reconstructor=null,super.emitReserved("decoded",e))}}decodeString(t){let e=0;const s={type:Number(t.charAt(0))};if(void 0===we[s.type])throw new Error("unknown packet type "+s.type);if(s.type===we.BINARY_EVENT||s.type===we.BINARY_ACK){const i=e+1;for(;"-"!==t.charAt(++e)&&e!=t.length;);const r=t.substring(i,e);if(r!=Number(r)||"-"!==t.charAt(e))throw new Error("Illegal attachments");s.attachments=Number(r)}if("/"===t.charAt(e+1)){const i=e+1;for(;++e;){if(","===t.charAt(e))break;if(e===t.length)break}s.nsp=t.substring(i,e)}else s.nsp="/";const i=t.charAt(e+1);if(""!==i&&Number(i)==i){const i=e+1;for(;++e;){const s=t.charAt(e);if(null==s||Number(s)!=s){--e;break}if(e===t.length)break}s.id=Number(t.substring(i,e+1))}if(t.charAt(++e)){const i=this.tryParse(t.substr(e));if(!ve.isPayloadValid(s.type,i))throw new Error("invalid payload");s.data=i}return s}tryParse(t){try{return JSON.parse(t,this.reviver)}catch(t){return!1}}static isPayloadValid(t,e){switch(t){case we.CONNECT:return be(e);case we.DISCONNECT:return void 0===e;case we.CONNECT_ERROR:return"string"==typeof e||be(e);case we.EVENT:case we.BINARY_EVENT:return Array.isArray(e)&&("number"==typeof e[0]||"string"==typeof e[0]&&-1===ye.indexOf(e[0]));case we.ACK:case we.BINARY_ACK:return Array.isArray(e)}}destroy(){this.reconstructor&&(this.reconstructor.finishedReconstruction(),this.reconstructor=null)}}class xe{constructor(t){this.packet=t,this.buffers=[],this.reconPack=t}takeBinaryData(t){if(this.buffers.push(t),this.buffers.length===this.reconPack.attachments){const t=ge(this.reconPack,this.buffers);return this.finishedReconstruction(),t}return null}finishedReconstruction(){this.reconPack=null,this.buffers=[]}}var Ee=Object.freeze({__proto__:null,Decoder:ve,Encoder:class{constructor(t){this.replacer=t}encode(t){return t.type!==we.EVENT&&t.type!==we.ACK||!de(t)?[this.encodeAsString(t)]:this.encodeAsBinary({type:t.type===we.EVENT?we.BINARY_EVENT:we.BINARY_ACK,nsp:t.nsp,data:t.data,id:t.id})}encodeAsString(t){let e=""+t.type;return t.type!==we.BINARY_EVENT&&t.type!==we.BINARY_ACK||(e+=t.attachments+"-"),t.nsp&&"/"!==t.nsp&&(e+=t.nsp+","),null!=t.id&&(e+=t.id),null!=t.data&&(e+=JSON.stringify(t.data,this.replacer)),e}encodeAsBinary(t){const e=pe(t),s=this.encodeAsString(e.packet),i=e.buffers;return i.unshift(s),i}},get PacketType(){return we},protocol:5});function Ae(t,e,s){return t.on(e,s),function(){t.off(e,s)}}const _e=Object.freeze({connect:1,connect_error:1,disconnect:1,disconnecting:1,newListener:1,removeListener:1});class Re extends Lt{constructor(t,e,s){super(),this.connected=!1,this.recovered=!1,this.receiveBuffer=[],this.sendBuffer=[],this._queue=[],this._queueSeq=0,this.ids=0,this.acks={},this.flags={},this.io=t,this.nsp=e,s&&s.auth&&(this.auth=s.auth),this._opts=Object.assign({},s),this.io._autoConnect&&this.open()}get disconnected(){return!this.connected}subEvents(){if(this.subs)return;const t=this.io;this.subs=[Ae(t,"open",this.onopen.bind(this)),Ae(t,"packet",this.onpacket.bind(this)),Ae(t,"error",this.onerror.bind(this)),Ae(t,"close",this.onclose.bind(this))]}get active(){return!!this.subs}connect(){return this.connected||(this.subEvents(),this.io._reconnecting||this.io.open(),"open"===this.io._readyState&&this.onopen()),this}open(){return this.connect()}send(...t){return t.unshift("message"),this.emit.apply(this,t),this}emit(t,...e){if(_e.hasOwnProperty(t))throw new Error('"'+t.toString()+'" is a reserved event name');if(e.unshift(t),this._opts.retries&&!this.flags.fromQueue&&!this.flags.volatile)return this._addToQueue(e),this;const s={type:we.EVENT,data:e,options:{}};if(s.options.compress=!1!==this.flags.compress,"function"==typeof e[e.length-1]){const t=this.ids++,i=e.pop();this._registerAckCallback(t,i),s.id=t}const i=this.io.engine&&this.io.engine.transport&&this.io.engine.transport.writable;return this.flags.volatile&&(!i||!this.connected)||(this.connected?(this.notifyOutgoingListeners(s),this.packet(s)):this.sendBuffer.push(s)),this.flags={},this}_registerAckCallback(t,e){var s;const i=null!==(s=this.flags.timeout)&&void 0!==s?s:this._opts.ackTimeout;if(void 0===i)return void(this.acks[t]=e);const r=this.io.setTimeoutFn((()=>{delete this.acks[t];for(let e=0;e<this.sendBuffer.length;e++)this.sendBuffer[e].id===t&&this.sendBuffer.splice(e,1);e.call(this,new Error("operation has timed out"))}),i);this.acks[t]=(...t)=>{this.io.clearTimeoutFn(r),e.apply(this,[null,...t])}}emitWithAck(t,...e){const s=void 0!==this.flags.timeout||void 0!==this._opts.ackTimeout;return new Promise(((i,r)=>{e.push(((t,e)=>s?t?r(t):i(e):i(t))),this.emit(t,...e)}))}_addToQueue(t){let e;"function"==typeof t[t.length-1]&&(e=t.pop());const s={id:this._queueSeq++,tryCount:0,pending:!1,args:t,flags:Object.assign({fromQueue:!0},this.flags)};t.push(((t,...i)=>{if(s!==this._queue[0])return;return null!==t?s.tryCount>this._opts.retries&&(this._queue.shift(),e&&e(t)):(this._queue.shift(),e&&e(null,...i)),s.pending=!1,this._drainQueue()})),this._queue.push(s),this._drainQueue()}_drainQueue(t=!1){if(!this.connected||0===this._queue.length)return;const e=this._queue[0];e.pending&&!t||(e.pending=!0,e.tryCount++,this.flags=e.flags,this.emit.apply(this,e.args))}packet(t){t.nsp=this.nsp,this.io._packet(t)}onopen(){"function"==typeof this.auth?this.auth((t=>{this._sendConnectPacket(t)})):this._sendConnectPacket(this.auth)}_sendConnectPacket(t){this.packet({type:we.CONNECT,data:this._pid?Object.assign({pid:this._pid,offset:this._lastOffset},t):t})}onerror(t){this.connected||this.emitReserved("connect_error",t)}onclose(t,e){this.connected=!1,delete this.id,this.emitReserved("disconnect",t,e)}onpacket(t){if(t.nsp===this.nsp)switch(t.type){case we.CONNECT:t.data&&t.data.sid?this.onconnect(t.data.sid,t.data.pid):this.emitReserved("connect_error",new Error("It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)"));break;case we.EVENT:case we.BINARY_EVENT:this.onevent(t);break;case we.ACK:case we.BINARY_ACK:this.onack(t);break;case we.DISCONNECT:this.ondisconnect();break;case we.CONNECT_ERROR:this.destroy();const e=new Error(t.data.message);e.data=t.data.data,this.emitReserved("connect_error",e)}}onevent(t){const e=t.data||[];null!=t.id&&e.push(this.ack(t.id)),this.connected?this.emitEvent(e):this.receiveBuffer.push(Object.freeze(e))}emitEvent(t){if(this._anyListeners&&this._anyListeners.length){const e=this._anyListeners.slice();for(const s of e)s.apply(this,t)}super.emit.apply(this,t),this._pid&&t.length&&"string"==typeof t[t.length-1]&&(this._lastOffset=t[t.length-1])}ack(t){const e=this;let s=!1;return function(...i){s||(s=!0,e.packet({type:we.ACK,id:t,data:i}))}}onack(t){const e=this.acks[t.id];"function"==typeof e&&(e.apply(this,t.data),delete this.acks[t.id])}onconnect(t,e){this.id=t,this.recovered=e&&this._pid===e,this._pid=e,this.connected=!0,this.emitBuffered(),this.emitReserved("connect"),this._drainQueue(!0)}emitBuffered(){this.receiveBuffer.forEach((t=>this.emitEvent(t))),this.receiveBuffer=[],this.sendBuffer.forEach((t=>{this.notifyOutgoingListeners(t),this.packet(t)})),this.sendBuffer=[]}ondisconnect(){this.destroy(),this.onclose("io server disconnect")}destroy(){this.subs&&(this.subs.forEach((t=>t())),this.subs=void 0),this.io._destroy(this)}disconnect(){return this.connected&&this.packet({type:we.DISCONNECT}),this.destroy(),this.connected&&this.onclose("io client disconnect"),this}close(){return this.disconnect()}compress(t){return this.flags.compress=t,this}get volatile(){return this.flags.volatile=!0,this}timeout(t){return this.flags.timeout=t,this}onAny(t){return this._anyListeners=this._anyListeners||[],this._anyListeners.push(t),this}prependAny(t){return this._anyListeners=this._anyListeners||[],this._anyListeners.unshift(t),this}offAny(t){if(!this._anyListeners)return this;if(t){const e=this._anyListeners;for(let s=0;s<e.length;s++)if(t===e[s])return e.splice(s,1),this}else this._anyListeners=[];return this}listenersAny(){return this._anyListeners||[]}onAnyOutgoing(t){return this._anyOutgoingListeners=this._anyOutgoingListeners||[],this._anyOutgoingListeners.push(t),this}prependAnyOutgoing(t){return this._anyOutgoingListeners=this._anyOutgoingListeners||[],this._anyOutgoingListeners.unshift(t),this}offAnyOutgoing(t){if(!this._anyOutgoingListeners)return this;if(t){const e=this._anyOutgoingListeners;for(let s=0;s<e.length;s++)if(t===e[s])return e.splice(s,1),this}else this._anyOutgoingListeners=[];return this}listenersAnyOutgoing(){return this._anyOutgoingListeners||[]}notifyOutgoingListeners(t){if(this._anyOutgoingListeners&&this._anyOutgoingListeners.length){const e=this._anyOutgoingListeners.slice();for(const s of e)s.apply(this,t.data)}}}function ke(t){t=t||{},this.ms=t.min||100,this.max=t.max||1e4,this.factor=t.factor||2,this.jitter=t.jitter>0&&t.jitter<=1?t.jitter:0,this.attempts=0}ke.prototype.duration=function(){var t=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var e=Math.random(),s=Math.floor(e*this.jitter*t);t=0==(1&Math.floor(10*e))?t-s:t+s}return 0|Math.min(t,this.max)},ke.prototype.reset=function(){this.attempts=0},ke.prototype.setMin=function(t){this.ms=t},ke.prototype.setMax=function(t){this.max=t},ke.prototype.setJitter=function(t){this.jitter=t};class Te extends Lt{constructor(t,e){var s;super(),this.nsps={},this.subs=[],t&&"object"==typeof t&&(e=t,t=void 0),(e=e||{}).path=e.path||"/socket.io",this.opts=e,Ct(this,e),this.reconnection(!1!==e.reconnection),this.reconnectionAttempts(e.reconnectionAttempts||1/0),this.reconnectionDelay(e.reconnectionDelay||1e3),this.reconnectionDelayMax(e.reconnectionDelayMax||5e3),this.randomizationFactor(null!==(s=e.randomizationFactor)&&void 0!==s?s:.5),this.backoff=new ke({min:this.reconnectionDelay(),max:this.reconnectionDelayMax(),jitter:this.randomizationFactor()}),this.timeout(null==e.timeout?2e4:e.timeout),this._readyState="closed",this.uri=t;const i=e.parser||Ee;this.encoder=new i.Encoder,this.decoder=new i.Decoder,this._autoConnect=!1!==e.autoConnect,this._autoConnect&&this.open()}reconnection(t){return arguments.length?(this._reconnection=!!t,this):this._reconnection}reconnectionAttempts(t){return void 0===t?this._reconnectionAttempts:(this._reconnectionAttempts=t,this)}reconnectionDelay(t){var e;return void 0===t?this._reconnectionDelay:(this._reconnectionDelay=t,null===(e=this.backoff)||void 0===e||e.setMin(t),this)}randomizationFactor(t){var e;return void 0===t?this._randomizationFactor:(this._randomizationFactor=t,null===(e=this.backoff)||void 0===e||e.setJitter(t),this)}reconnectionDelayMax(t){var e;return void 0===t?this._reconnectionDelayMax:(this._reconnectionDelayMax=t,null===(e=this.backoff)||void 0===e||e.setMax(t),this)}timeout(t){return arguments.length?(this._timeout=t,this):this._timeout}maybeReconnectOnOpen(){!this._reconnecting&&this._reconnection&&0===this.backoff.attempts&&this.reconnect()}open(t){if(~this._readyState.indexOf("open"))return this;this.engine=new ne(this.uri,this.opts);const e=this.engine,s=this;this._readyState="opening",this.skipReconnect=!1;const i=Ae(e,"open",(function(){s.onopen(),t&&t()})),r=Ae(e,"error",(e=>{s.cleanup(),s._readyState="closed",this.emitReserved("error",e),t?t(e):s.maybeReconnectOnOpen()}));if(!1!==this._timeout){const t=this._timeout;0===t&&i();const s=this.setTimeoutFn((()=>{i(),e.close(),e.emit("error",new Error("timeout"))}),t);this.opts.autoUnref&&s.unref(),this.subs.push((function(){clearTimeout(s)}))}return this.subs.push(i),this.subs.push(r),this}connect(t){return this.open(t)}onopen(){this.cleanup(),this._readyState="open",this.emitReserved("open");const t=this.engine;this.subs.push(Ae(t,"ping",this.onping.bind(this)),Ae(t,"data",this.ondata.bind(this)),Ae(t,"error",this.onerror.bind(this)),Ae(t,"close",this.onclose.bind(this)),Ae(this.decoder,"decoded",this.ondecoded.bind(this)))}onping(){this.emitReserved("ping")}ondata(t){try{this.decoder.add(t)}catch(t){this.onclose("parse error",t)}}ondecoded(t){Qt((()=>{this.emitReserved("packet",t)}),this.setTimeoutFn)}onerror(t){this.emitReserved("error",t)}socket(t,e){let s=this.nsps[t];return s?this._autoConnect&&!s.active&&s.connect():(s=new Re(this,t,e),this.nsps[t]=s),s}_destroy(t){const e=Object.keys(this.nsps);for(const t of e){if(this.nsps[t].active)return}this._close()}_packet(t){const e=this.encoder.encode(t);for(let s=0;s<e.length;s++)this.engine.write(e[s],t.options)}cleanup(){this.subs.forEach((t=>t())),this.subs.length=0,this.decoder.destroy()}_close(){this.skipReconnect=!0,this._reconnecting=!1,this.onclose("forced close"),this.engine&&this.engine.close()}disconnect(){return this._close()}onclose(t,e){this.cleanup(),this.backoff.reset(),this._readyState="closed",this.emitReserved("close",t,e),this._reconnection&&!this.skipReconnect&&this.reconnect()}reconnect(){if(this._reconnecting||this.skipReconnect)return this;const t=this;if(this.backoff.attempts>=this._reconnectionAttempts)this.backoff.reset(),this.emitReserved("reconnect_failed"),this._reconnecting=!1;else{const e=this.backoff.duration();this._reconnecting=!0;const s=this.setTimeoutFn((()=>{t.skipReconnect||(this.emitReserved("reconnect_attempt",t.backoff.attempts),t.skipReconnect||t.open((e=>{e?(t._reconnecting=!1,t.reconnect(),this.emitReserved("reconnect_error",e)):t.onreconnect()})))}),e);this.opts.autoUnref&&s.unref(),this.subs.push((function(){clearTimeout(s)}))}}onreconnect(){const t=this.backoff.attempts;this._reconnecting=!1,this.backoff.reset(),this.emitReserved("reconnect",t)}}const Le={};function Pe(t,e){"object"==typeof t&&(e=t,t=void 0);const s=function(t,e="",s){let i=t;s=s||"undefined"!=typeof location&&location,null==t&&(t=s.protocol+"//"+s.host),"string"==typeof t&&("/"===t.charAt(0)&&(t="/"===t.charAt(1)?s.protocol+t:s.host+t),/^(https?|wss?):\/\//.test(t)||(t=void 0!==s?s.protocol+"//"+t:"https://"+t),i=re(t)),i.port||(/^(http|ws)$/.test(i.protocol)?i.port="80":/^(http|ws)s$/.test(i.protocol)&&(i.port="443")),i.path=i.path||"/";const r=-1!==i.host.indexOf(":")?"["+i.host+"]":i.host;return i.id=i.protocol+"://"+r+":"+i.port+e,i.href=i.protocol+"://"+r+(s&&s.port===i.port?"":":"+i.port),i}(t,(e=e||{}).path||"/socket.io"),i=s.source,r=s.id,n=s.path,o=Le[r]&&n in Le[r].nsps;let h;return e.forceNew||e["force new connection"]||!1===e.multiplex||o?h=new Te(i,e):(Le[r]||(Le[r]=new Te(i,e)),h=Le[r]),s.query&&!e.query&&(e.query=s.queryKey),h.socket(s.path,e)}Object.assign(Pe,{Manager:Te,Socket:Re,io:Pe,connect:Pe});const Be=Pe();let Se,Oe;t.gl=void 0,t.users=[],window.addEventListener("load",(()=>{function e(t){var e=t.changedTouches[0],s="";switch(t.type){case"touchstart":s="mousedown";break;case"touchmove":s="mousemove";break;case"touchend":s="mouseup";break;default:return}var i=document.createEvent("MouseEvent");i.initMouseEvent(s,!0,!0,window,1,e.screenX,e.screenY,e.clientX,e.clientY,!1,!1,!1,!1,0,null),e.target.dispatchEvent(i),t.preventDefault()}Be.on("reloadResponse",(e=>{t.users=e.map((t=>t.cam))})),Se=document.getElementById("glCanvas"),t.gl=Se.getContext("webgl2"),Oe=document.getElementById("coords"),De(),window.onmousemove=a,window.onmousedown=c,window.onmouseup=l,window.addEventListener("contextmenu",(t=>t.preventDefault())),window.addEventListener("wheel",(t=>{!function(t){o.dz=t.deltaY}(t)})),window.onscroll=()=>window.scroll(0,0),window.addEventListener("keyup",(t=>{!function(t){n[t.key]=0}(t)})),window.addEventListener("keydown",(t=>{!function(t){n[t.key]=1}(t)})),document.querySelector("#file").addEventListener("change",L),document.addEventListener("touchstart",e,!0),document.addEventListener("touchmove",e,!0),document.addEventListener("touchend",e,!0),document.addEventListener("touchcancel",e,!0)}));const Ce=()=>{t.gl.clearColor(.8,.47,.3,1),t.gl.clear(t.gl.COLOR_BUFFER_BIT|t.gl.DEPTH_BUFFER_BIT),Se.width=window.innerWidth,Se.height=window.innerHeight,p(),h.frameW=Se.width,h.frameH=Se.height,h.camSet(h.loc,h.at,h.up,h.pos,h.userLoc),Oe.innerHTML="LocX: "+h.loc.x.toString().slice(0,5)+" LocY: "+h.loc.y.toString().slice(0,5)+" LocZ: "+h.loc.z.toString().slice(0,5)+"<br /> Dir X: "+h.dir.x.toString().slice(0,5)+" Dir Y: "+h.dir.y.toString().slice(0,5)+" Dir Z: "+h.dir.z.toString().slice(0,5)+"<br /> Up X: "+h.up.x.toString().slice(0,5)+" Up Y: "+h.up.y.toString().slice(0,5)+" Up Z: "+h.up.z.toString().slice(0,5)+"<br /> At X: "+h.at.x.toString().slice(0,5)+" At Y: "+h.at.y.toString().slice(0,5)+" At Z: "+h.at.z.toString().slice(0,5)+"<br />",ut.forEach((t=>{t.render()})),o.dx=o.dy=o.dz=0,Be.emit("reloadRequest"),window.requestAnimationFrame(Ce,h)};async function De(){t.gl.clearColor(1,1,0,1),t.gl.clear(t.gl.COLOR_BUFFER_BIT),t.gl.enable(t.gl.DEPTH_TEST),t.gl.viewport(0,0,t.gl.canvas.width,t.gl.canvas.height),Se.width=window.innerWidth,Se.height=window.innerHeight,p(),h.frameW=Se.width,h.frameH=Se.height,h.camSet(h.loc,h.at,h.up,h.pos,h.userLoc),await y("default"),await dt(),Ce()}t.initGL=De}({});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
