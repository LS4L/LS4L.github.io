!function(t){"use strict";class e{constructor(t=0,e=0){this.x=t,this.y=e}add(t){return new e(this.x+t.x,this.y+t.y)}sub(t){return new e(this.x-t.x,this.y-t.y)}mul(t){return new e(this.x*t,this.y*t)}div(t){return new e(this.x/t,this.y/t)}neg(){return new e(-this.x,-this.y)}dot(t){return this.x*t.x+this.y*t.y}cross(t){return this.x*t.y-this.y*t.x}len2(){return this.x*this.x+this.y*this.y}len(){return Math.sqrt(this.len2())}normalize(){return this.div(this.len())}lerp(t,s){return new e(this.x+(t.x-this.x)*s,this.y+(t.y-this.y)*s)}}class s{constructor(t=0,e=0,s=0){this.x=t,this.y=e,this.z=s}eq(t){return this.x==t.x&&this.y==t.y&&this.z==t.z}add(t){return new s(this.x+t.x,this.y+t.y,this.z+t.z)}sub(t){return new s(this.x-t.x,this.y-t.y,this.z-t.z)}mul(t){return new s(this.x*t,this.y*t,this.z*t)}div(t){return 0!=t?new s(this.x/t,this.y/t,this.z/t):new s}neg(){return new s(-this.x,-this.y,-this.z)}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}cross(t){return new s(this.y*t.z-this.z*t.y,this.z*t.x-this.x*t.z,this.x*t.y-this.y*t.x)}len2(){return this.x*this.x+this.y*this.y+this.z*this.z}len(){return Math.sqrt(this.len2())}normalize(){return this.div(this.len())}lerp(t,e=.5){return new s(this.x+(t.x-this.x)*e,this.y+(t.y-this.y)*e,this.z+(t.z-this.z)*e)}mulMatr(t){let e=this.x*t[0][3]+this.y*t[1][3]+this.z*t[2][3]+t[3][3];return new s((this.x*t[0][0]+this.y*t[1][0]+this.z*t[2][0]+t[3][0])/e,(this.x*t[0][1]+this.y*t[1][1]+this.z*t[2][1]+t[3][1])/e,(this.x*t[0][2]+this.y*t[1][2]+this.z*t[2][2]+t[3][2])/e)}angle(t,e=new s(0,1,0)){if(0==t.len2()||0==this.len2())return 0;let i=this.cross(t),r=this.dot(t)/(this.len()*t.len()),n=Math.acos(r);return i.dot(e)<0&&(n=-n),n}get xxx(){return new s(this.x,this.x,this.x)}get yyy(){return new s(this.y,this.y,this.y)}get zzz(){return new s(this.z,this.z,this.z)}copy(){return new s(this.x,this.y,this.z)}}class i{constructor(t=0,e=0,s=0,i=0){this.x=t,this.y=e,this.z=s,this.w=i}add(t){return new i(this.x+t.x,this.y+t.y,this.z+t.z,this.w+t.w)}sub(t){return new i(this.x-t.x,this.y-t.y,this.z-t.z,this.w-t.w)}mul(t){return new i(this.x*t,this.y*t,this.z*t,this.w*t)}div(t){return new i(this.x/t,this.y/t,this.z/t,this.w/t)}neg(){return new i(-this.x,-this.y,-this.z,-this.w)}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z+this.w*this.w}len2(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}len(){return Math.sqrt(this.len2())}normalize(){return this.div(this.len())}lerp(t,e){return new s(this.x+(t.x-this.x)*e,this.y+(t.y-this.y)*e,this.z+(t.z-this.z)*e,this.w+(t.w-this.w)*e)}}class r{constructor(t=[[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]]){this[0]=[],this[1]=[],this[2]=[],this[3]=[],this[0][0]=t[0][0],this[0][1]=t[0][1],this[0][2]=t[0][2],this[0][3]=t[0][3],this[1][0]=t[1][0],this[1][1]=t[1][1],this[1][2]=t[1][2],this[1][3]=t[1][3],this[2][0]=t[2][0],this[2][1]=t[2][1],this[2][2]=t[2][2],this[2][3]=t[2][3],this[3][0]=t[3][0],this[3][1]=t[3][1],this[3][2]=t[3][2],this[3][3]=t[3][3]}a(){return[[this[0][0],this[0][1],this[0][2],this[0][3]],[this[1][0],this[1][1],this[1][2],this[1][3]],[this[2][0],this[2][1],this[2][2],this[2][3]],[this[3][0],this[3][1],this[3][2],this[3][3]]]}translate(t){return new r([[1,0,0,0],[0,1,0,0],[0,0,1,0],[t.x,t.y,t.z,1]])}scale(t){return new r([[t.x,0,0,0],[0,t.y,0,0],[0,0,t.z,0],[0,0,0,1]])}rotateX(t){let e=new r,s=t/180*Math.PI,i=Math.sin(s),n=Math.cos(s);return e[1][1]=n,e[2][2]=n,e[1][2]=i,e[2][1]=-i,e}rotateY(t){let e=new r,s=t/180*Math.PI,i=Math.sin(s),n=Math.cos(s);return e[0][0]=n,e[2][2]=n,e[0][2]=-i,e[2][0]=i,e}rotateZ(t){let e=new r,s=t/180*Math.PI,i=Math.sin(s),n=Math.cos(s);return e[0][0]=n,e[1][1]=n,e[0][1]=i,e[1][0]=-i,e}rotate(t,e){let s=t/180*Math.PI,i=Math.sin(s),n=Math.cos(s);return new r([[n+e.x*e.x*(1-n),e.x*e.y*(1-n)+e.z*i,e.x*e.z*(1-n)-e.y*i,0],[e.y*e.x*(1-n)-e.z*i,n+e.y*e.y*(1-n),e.y*e.z*(1-n)+e.x*i,0],[e.z*e.x*(1-n)+e.y*i,e.z*e.y*(1-n)-e.x*i,n+e.z*e.z*(1-n),0],[0,0,0,1]])}transpose(){let t=new r;return t[0][0]=this[0][0],t[0][1]=this[1][0],t[0][2]=this[2][0],t[0][3]=this[3][0],t[1][0]=this[0][1],t[1][1]=this[1][1],t[1][2]=this[2][1],t[1][3]=this[3][1],t[2][0]=this[0][2],t[2][1]=this[1][2],t[2][2]=this[2][2],t[2][3]=this[3][2],t[3][0]=this[0][3],t[3][1]=this[1][3],t[3][2]=this[2][3],t[3][3]=this[3][3],t}determ3x3(t,e,s,i,r,n,o,a,h){return t*r*h+e*n*o+s*i*a-t*n*a-e*i*h-s*r*o}determ(){return+this[0][0]*this.determ3x3(this[1][1],this[1][2],this[1][3],this[2][1],this[2][2],this[2][3],this[3][1],this[3][2],this[3][3])+-this[0][1]*this.determ3x3(this[1][0],this[1][2],this[1][3],this[2][0],this[2][2],this[2][3],this[3][0],this[3][2],this[3][3])+ +this[0][2]*this.determ3x3(this[1][0],this[1][1],this[1][3],this[2][0],this[2][1],this[2][3],this[3][0],this[3][1],this[3][3])+-this[0][3]*this.determ3x3(this[1][0],this[1][1],this[1][2],this[2][0],this[2][1],this[2][2],this[3][0],this[3][1],this[3][2])}inverse(){let t=this.determ(),e=new r;return 0==t?new r:(e[0][0]=+this.determ3x3(this[1][1],this[1][2],this[1][3],this[2][1],this[2][2],this[2][3],this[3][1],this[3][2],this[3][3])/t,e[1][0]=-this.determ3x3(this[1][0],this[1][2],this[1][3],this[2][0],this[2][2],this[2][3],this[3][0],this[3][2],this[3][3])/t,e[2][0]=+this.determ3x3(this[1][0],this[1][1],this[1][3],this[2][0],this[2][1],this[2][3],this[3][0],this[3][1],this[3][3])/t,e[3][0]=-this.determ3x3(this[1][0],this[1][1],this[1][2],this[2][0],this[2][1],this[2][2],this[3][0],this[3][1],this[3][2])/t,e[0][1]=-this.determ3x3(this[0][1],this[0][2],this[0][3],this[2][1],this[2][2],this[2][3],this[3][1],this[3][2],this[3][3])/t,e[1][1]=+this.determ3x3(this[0][0],this[0][2],this[0][3],this[2][0],this[2][2],this[2][3],this[3][0],this[3][2],this[3][3])/t,e[2][1]=-this.determ3x3(this[0][0],this[0][1],this[0][3],this[2][0],this[2][1],this[2][3],this[3][0],this[3][1],this[3][3])/t,e[3][1]=+this.determ3x3(this[0][0],this[0][1],this[0][2],this[2][0],this[2][1],this[2][2],this[3][0],this[3][1],this[3][2])/t,e[0][2]=+this.determ3x3(this[0][1],this[0][2],this[0][3],this[1][1],this[1][2],this[1][3],this[3][1],this[3][2],this[3][3])/t,e[1][2]=-this.determ3x3(this[0][0],this[0][2],this[0][3],this[1][0],this[1][2],this[1][3],this[3][0],this[3][2],this[3][3])/t,e[2][2]=+this.determ3x3(this[0][0],this[0][1],this[0][3],this[1][0],this[1][1],this[1][3],this[3][0],this[3][1],this[3][3])/t,e[3][2]=-this.determ3x3(this[0][0],this[0][1],this[0][2],this[1][0],this[1][1],this[1][2],this[3][0],this[3][1],this[3][2])/t,e[0][3]=-this.determ3x3(this[0][1],this[0][2],this[0][3],this[1][1],this[1][2],this[1][3],this[2][1],this[2][2],this[2][3])/t,e[1][3]=+this.determ3x3(this[0][0],this[0][2],this[0][3],this[1][0],this[1][2],this[1][3],this[2][0],this[2][2],this[2][3])/t,e[2][3]=-this.determ3x3(this[0][0],this[0][1],this[0][3],this[1][0],this[1][1],this[1][3],this[2][0],this[2][1],this[2][3])/t,e[3][3]=+this.determ3x3(this[0][0],this[0][1],this[0][2],this[1][0],this[1][1],this[1][2],this[2][0],this[2][1],this[2][2])/t,e)}add(t){let e=new r;return e[0][0]=this[0][0]+t[0][0],e[0][1]=this[0][1]+t[0][1],e[0][2]=this[0][2]+t[0][2],e[0][3]=this[0][3]+t[0][3],e[1][0]=this[1][0]+t[1][0],e[1][1]=this[1][1]+t[1][1],e[1][2]=this[1][2]+t[1][2],e[1][3]=this[1][3]+t[1][3],e[2][0]=this[2][0]+t[2][0],e[2][1]=this[2][1]+t[2][1],e[2][2]=this[2][2]+t[2][2],e[2][3]=this[2][3]+t[2][3],e[3][0]=this[3][0]+t[3][0],e[3][1]=this[3][1]+t[3][1],e[3][2]=this[3][2]+t[3][2],e[3][3]=this[3][3]+t[3][3],e}mul(t){let e=new r;return e[0][0]=this[0][0]*t[0][0]+this[0][1]*t[1][0]+this[0][2]*t[2][0]+this[0][3]*t[3][0],e[0][1]=this[0][0]*t[0][1]+this[0][1]*t[1][1]+this[0][2]*t[2][1]+this[0][3]*t[3][1],e[0][2]=this[0][0]*t[0][2]+this[0][1]*t[1][2]+this[0][2]*t[2][2]+this[0][3]*t[3][2],e[0][3]=this[0][0]*t[0][3]+this[0][1]*t[1][3]+this[0][2]*t[2][3]+this[0][3]*t[3][3],e[1][0]=this[1][0]*t[0][0]+this[1][1]*t[1][0]+this[1][2]*t[2][0]+this[1][3]*t[3][0],e[1][1]=this[1][0]*t[0][1]+this[1][1]*t[1][1]+this[1][2]*t[2][1]+this[1][3]*t[3][1],e[1][2]=this[1][0]*t[0][2]+this[1][1]*t[1][2]+this[1][2]*t[2][2]+this[1][3]*t[3][2],e[1][3]=this[1][0]*t[0][3]+this[1][1]*t[1][3]+this[1][2]*t[2][3]+this[1][3]*t[3][3],e[2][0]=this[2][0]*t[0][0]+this[2][1]*t[1][0]+this[2][2]*t[2][0]+this[2][3]*t[3][0],e[2][1]=this[2][0]*t[0][1]+this[2][1]*t[1][1]+this[2][2]*t[2][1]+this[2][3]*t[3][1],e[2][2]=this[2][0]*t[0][2]+this[2][1]*t[1][2]+this[2][2]*t[2][2]+this[2][3]*t[3][2],e[2][3]=this[2][0]*t[0][3]+this[2][1]*t[1][3]+this[2][2]*t[2][3]+this[2][3]*t[3][3],e[3][0]=this[3][0]*t[0][0]+this[3][1]*t[1][0]+this[3][2]*t[2][0]+this[3][3]*t[3][0],e[3][1]=this[3][0]*t[0][1]+this[3][1]*t[1][1]+this[3][2]*t[2][1]+this[3][3]*t[3][1],e[3][2]=this[3][0]*t[0][2]+this[3][1]*t[1][2]+this[3][2]*t[2][2]+this[3][3]*t[3][2],e[3][3]=this[3][0]*t[0][3]+this[3][1]*t[1][3]+this[3][2]*t[2][3]+this[3][3]*t[3][3],e}view(t,e,s){let i=e.sub(t).normalize(),n=i.cross(s).normalize(),o=n.cross(i);return new r([[n.x,o.x,-i.x,0],[n.y,o.y,-i.y,0],[n.z,o.z,-i.z,0],[-t.dot(n),-t.dot(o),t.dot(i),1]])}ortho(t,e,s,i,n,o){return new r([[2/(e-t),0,0,0],[0,2/(i-s),0,0],[0,0,-2/(o-n),0],[-(e+t)/(e-t),-(i+s)/(i-s),-(o+n)/(o-n),1]])}frustum(t,e,s,i,n,o){return new r([[2*n/(e-t),0,0,0],[0,2*n/(i-s),0,0],[(e+t)/(e-t),(i+s)/(i-s),-(o+n)/(o-n),-1],[0,0,-2*n*o/(o-n),0]])}}let n=[],o={x:0,y:0,savedX:0,savedY:0,zoom:1,dx:0,dy:0,dz:0,isDown:!1,isRDown:!1},a=new class{constructor(){this.projSize=.1,this.projDist=.1,this.projFarClip=18e3,this.frameW=30,this.frameH=30,this.matrView=new r,this.matrProj=new r,this.matrVP=new r,this.id=Math.random().toString(),this.setDef()}camSet(t,e,i,n,o){let a=new r;return this.matrView=a.view(t,e,i),this.loc=t,this.at=e,this.dir=new s(-this.matrView[0][2],-this.matrView[1][2],-this.matrView[2][2]),this.up=new s(this.matrView[0][1],this.matrView[1][1],this.matrView[2][1]),this.right=new s(this.matrView[0][0],this.matrView[1][0],this.matrView[2][0]),this.pos=n,this.userLoc=o,this.matrVP=this.matrView.mul(this.matrProj),this}setProj(t,e,s){let i,n;i=n=t,this.projDist=e,this.projSize=t,this.projFarClip=s,this.frameW>this.frameH?i*=this.frameW/this.frameH:n*=this.frameH/this.frameW;let o=new r;return this.matrProj=o.frustum(-i/2,i/2,-n/2,n/2,e,s),this.matrVP=this.matrView.mul(this.matrProj),this}setSize(t,e){return this.frameW=t,this.frameH=e,this.setProj(this.projSize,this.projDist,this.projFarClip),this}setDef(){return this.loc=new s(0,0,1),this.at=new s(0,0,0),this.dir=new s(0,0,-1),this.up=new s(0,1,0),this.right=new s(1,0,0),this.projDist=.1,this.projSize=.1,this.projFarClip=1e4,this.frameW=30,this.frameH=30,this.camSet(this.loc,this.at,this.up,this.pos,this.userLoc),this.setProj(this.projSize,this.projDist,this.projFarClip),this.setSize(this.frameW,this.frameH),this}};function h(t){o.dx=t.pageX-o.x,o.dy=t.pageY-o.y,o.x=t.pageX,o.y=t.pageY}function l(t){0==t.button?o.isDown=!0:2==t.button&&(o.isRDown=!0)}function c(t){0==t.button?o.isDown=!1:2==t.button&&(o.isRDown=!1)}a.camSet(new s(0,2.5,0),new s(0,0,-6),new s(0,1,0),new s(1,1,1),new s(0,.8,0));let u=.05,d=new r;a.speed=0,a.userDir=new s(1,0,0),a.pos=new s(-1,1,0);let g=.2,f=1.2,p=0,m=45,y=.2,w=1.1;function b(){!function(){a.speed+=(!!n.KeyW-!!n.KeyS)*g,a.speed/=f,a.pos=a.pos.add(a.pos.mul(.001*o.dz)),p+=(-!!n.KeyD+!!n.KeyA)*y,p>m&&(p=m),p<-m&&(p=-m),p/=w,a.userDir=a.userDir.mulMatr(d.rotateY(p*Math.sqrt(Math.abs(a.speed)))),a.pos=a.pos.mulMatr(d.rotateY(p*Math.sqrt(Math.abs(a.speed)))),a.userLoc=a.userLoc.add(a.userDir.mul(a.speed)),a.pos=a.pos.mulMatr(d.rotateY(-o.isDown*u*o.dx)),a.pos=a.pos.mulMatr(d.rotate(-o.isDown*u*o.dy,a.right)),a.at=a.userLoc,a.dir=a.pos.neg().normalize(),a.loc=a.userLoc.add(a.pos);let t=new s(a.dir.x,0,a.dir.z);a.right=t.cross(new s(0,1,0)),a.up=a.right.cross(a.dir)}()}function x(t,e=null){let i=[],r=0;null==e&&(e=[...Array(t.length/3).keys()]);for(let e=0;e<t.length;e+=3)i[r++]=new s(t[e],t[e+1],t[e+2]);let n=[];for(let t=0;t<i.length;t++)n[t]=new s;for(let t=0;t<e.length;t+=3){let s=i[e[t]],r=i[e[t+1]],o=i[e[t+2]],a=r.sub(s).cross(o.sub(s)).normalize();n[e[t]]=n[e[t]].add(a),n[e[t+1]]=n[e[t+1]].add(a),n[e[t+2]]=n[e[t+2]].add(a)}for(let t=0;t<i.length;t++)n[t]=n[t].normalize();r=0;let o=[];for(let t=0;t<n.length;t++)o[r++]=n[t].x,o[r++]=n[t].y,o[r++]=n[t].z;return o}const A=[];class E{constructor(t,e,s){this.vs=t,this.fs=e,this.shaderProgram=s}}async function v(e=null){let s,i,r;if(null==e)return A[0];function n(t,e,s){const i=t.createShader(e);return t.shaderSource(i,s),t.compileShader(i,s),i}const o=fetch(`bin/shaders/${e}/vert.glsl`).then((t=>t.text())).then((t=>{s=t})),a=fetch(`bin/shaders/${e}/frag.glsl`).then((t=>t.text())).then((t=>{i=t})),h=Promise.all([o,a]);return await h.then((()=>{const e=n(t.gl,t.gl.VERTEX_SHADER,s),o=n(t.gl,t.gl.FRAGMENT_SHADER,i);let a=t.gl.createProgram();if(t.gl.attachShader(a,e),t.gl.attachShader(a,o),t.gl.linkProgram(a),!t.gl.getProgramParameter(a,t.gl.LINK_STATUS)){const e=t.gl.getProgramInfoLog(a);console.log(e)}r=new E(s,i,a),A.push(r)})),r}function L(e,s,i=null,r=null){let n=t.gl.getAttribLocation(e.shaderProgram,"in_pos");const o=t.gl.createBuffer();t.gl.bindBuffer(t.gl.ARRAY_BUFFER,o),t.gl.bufferData(t.gl.ARRAY_BUFFER,s,t.gl.STATIC_DRAW),t.gl.enableVertexAttribArray(n),t.gl.vertexAttribPointer(n,3,t.gl.FLOAT,!1,0,0);const a=t.gl.getAttribLocation(e.shaderProgram,"normal"),h=t.gl.createBuffer();if(t.gl.bindBuffer(t.gl.ARRAY_BUFFER,h),null==r&&(r=new Float32Array(x(s,i))),t.gl.bufferData(t.gl.ARRAY_BUFFER,r,t.gl.STATIC_DRAW),t.gl.enableVertexAttribArray(a),t.gl.vertexAttribPointer(a,3,t.gl.FLOAT,!1,0,0),null!=i){const e=t.gl.createBuffer();t.gl.bindBuffer(t.gl.ELEMENT_ARRAY_BUFFER,e),t.gl.bufferData(t.gl.ELEMENT_ARRAY_BUFFER,i,t.gl.STATIC_DRAW)}}const P=new Float32Array([1,1,-1,1,1,1,1,-1,1,1,-1,-1,-1,1,1,-1,1,-1,-1,-1,-1,-1,-1,1,-1,1,1,1,1,1,1,1,-1,-1,1,-1,-1,-1,-1,1,-1,-1,1,-1,1,-1,-1,1,1,1,1,-1,1,1,-1,-1,1,1,-1,1,-1,1,-1,1,1,-1,1,-1,-1,-1,-1,-1]),R=new Uint16Array([0,1,2,0,2,3,4,5,6,4,6,7,8,9,10,8,10,11,12,13,14,12,14,15,16,17,18,16,18,19,20,21,22,20,22,23]);let k,T;function _(){t.gl.useProgram(T.shaderProgram);let e=t.gl.getUniformLocation(T.shaderProgram,"time");const s=t.gl.getUniformLocation(T.shaderProgram,"projection"),i=t.gl.getUniformLocation(T.shaderProgram,"modelView"),n=t.gl.getUniformLocation(T.shaderProgram,"world");t.gl.bindVertexArray(k),t.gl.uniformMatrix4fv(s,!1,new Float32Array(a.matrProj.a().join().split(",")));let o=new r;t.gl.uniformMatrix4fv(n,!1,new Float32Array(o.a().join().split(","))),t.gl.uniformMatrix4fv(i,!1,new Float32Array(a.matrView.a().join().split(","))),t.gl.uniform1f(e,Date.now());const h=t.gl.getUniformLocation(T.shaderProgram,"lightDir"),l=t.gl.getUniformLocation(T.shaderProgram,"camLoc");t.gl.uniform3f(h,1,2,3),t.gl.uniform3f(l,a.loc.x,a.loc.y,a.loc.z);const c=t.gl.getUniformLocation(T.shaderProgram,"ka"),u=t.gl.getUniformLocation(T.shaderProgram,"kd"),d=t.gl.getUniformLocation(T.shaderProgram,"ks"),g=t.gl.getUniformLocation(T.shaderProgram,"ph");t.gl.uniform3f(c,.0215,.1745,.0215),t.gl.uniform3f(u,.07568,.61424,.07568),t.gl.uniform3f(d,.633,.727811,.633),t.gl.uniform1f(g,76.8),t.gl.drawElements(t.gl.TRIANGLES,36,t.gl.UNSIGNED_SHORT,0)}async function B(){T=await v("rainbow"),k=t.gl.createVertexArray(),t.gl.bindVertexArray(k),L(T,P,R),t.gl.bindVertexArray(null)}const U=new Float32Array([1,1,1,1,-1,-1,-1,1,-1,-1,-1,1]),M=new Uint16Array([0,3,1,0,2,3,0,1,2,3,2,1]);let D,S;function F(){t.gl.useProgram(S.shaderProgram);let e=t.gl.getUniformLocation(S.shaderProgram,"time");const i=t.gl.getUniformLocation(S.shaderProgram,"projection"),n=t.gl.getUniformLocation(S.shaderProgram,"modelView"),o=t.gl.getUniformLocation(S.shaderProgram,"world");t.gl.bindVertexArray(D),t.gl.uniformMatrix4fv(i,!1,new Float32Array(a.matrProj.a().join().split(","))),t.gl.uniformMatrix4fv(n,!1,new Float32Array(a.matrView.a().join().split(",")));let h=new r;t.gl.uniformMatrix4fv(o,!1,new Float32Array(h.rotateZ(Date.now()/30).mul(h.translate(new s(0,3,0))).a().join().split(",")));const l=t.gl.getUniformLocation(S.shaderProgram,"lightDir"),c=t.gl.getUniformLocation(S.shaderProgram,"camLoc");t.gl.uniform1f(e,Date.now()),t.gl.uniform3f(l,1,2,3),t.gl.uniform3f(c,a.loc.x,a.loc.y,a.loc.z);const u=t.gl.getUniformLocation(S.shaderProgram,"ka"),d=t.gl.getUniformLocation(S.shaderProgram,"kd"),g=t.gl.getUniformLocation(S.shaderProgram,"ks"),f=t.gl.getUniformLocation(S.shaderProgram,"ph");t.gl.uniform3f(u,.24725,.2245,.0645),t.gl.uniform3f(d,.34615,.3143,.0903),t.gl.uniform3f(g,.797357,.723991,.208006),t.gl.uniform1f(f,83.2),t.gl.drawElements(t.gl.TRIANGLES,12,t.gl.UNSIGNED_SHORT,0)}async function C(){S=await v("withLight"),D=t.gl.createVertexArray(),t.gl.bindVertexArray(D),L(S,U,M),t.gl.bindVertexArray(null)}const z=new Float32Array([1,0,0,0,1,0,0,0,1,-1,0,0,0,-1,0,0,0,-1]),N=new Uint16Array([0,1,2,0,2,4,4,2,3,3,2,1,5,1,0,5,0,4,5,4,3,5,3,1]);let O,I;function j(){t.gl.useProgram(I.shaderProgram);let e=t.gl.getUniformLocation(I.shaderProgram,"time");const i=t.gl.getUniformLocation(I.shaderProgram,"projection"),n=t.gl.getUniformLocation(I.shaderProgram,"modelView"),o=t.gl.getUniformLocation(I.shaderProgram,"lightDir"),h=t.gl.getUniformLocation(I.shaderProgram,"camLoc"),l=t.gl.getUniformLocation(I.shaderProgram,"world");t.gl.bindVertexArray(O),t.gl.uniformMatrix4fv(i,!1,new Float32Array(a.matrProj.a().join().split(","))),t.gl.uniformMatrix4fv(n,!1,new Float32Array(a.matrView.a().join().split(",")));let c=new r;t.gl.uniform1f(e,Date.now()),t.gl.uniform3f(o,1,2,3),t.gl.uniform3f(h,a.loc.x,a.loc.y,a.loc.z),t.gl.uniformMatrix4fv(l,!1,new Float32Array(c.rotateY(180*Math.sin(Date.now()/1e3)).mul(c.translate(new s(3,0,0))).a().join().split(",")));const u=t.gl.getUniformLocation(I.shaderProgram,"ka"),d=t.gl.getUniformLocation(I.shaderProgram,"kd"),g=t.gl.getUniformLocation(I.shaderProgram,"ks"),f=t.gl.getUniformLocation(I.shaderProgram,"ph");t.gl.uniform3f(u,.05375,.05,.06625),t.gl.uniform3f(d,.18275,.17,.22525),t.gl.uniform3f(g,.332741,.328634,.346435),t.gl.uniform1f(f,38.4),t.gl.drawElements(t.gl.TRIANGLES,24,t.gl.UNSIGNED_SHORT,0)}async function V(){I=await v("withLight"),O=t.gl.createVertexArray(),t.gl.bindVertexArray(O),L(I,z,N),t.gl.bindVertexArray(null)}const q=1.6180339887,H=new Float32Array([0,1,q,1,q,0,q,0,1,0,-1,q,-1,q,0,q,0,-1,0,1,-q,1,-q,0,-q,0,1,0,-1,-q,-1,-q,0,-q,0,-1]),Y=new Uint16Array([0,2,1,0,1,4,0,4,8,0,8,3,0,3,2,11,8,4,11,4,6,11,6,9,11,9,10,11,10,9,7,3,10,7,10,9,7,9,5,7,5,2,7,2,3,2,5,1,1,5,6,5,6,9,10,3,8,1,4,6]);let X,W;function G(){t.gl.useProgram(W.shaderProgram);let e=t.gl.getUniformLocation(W.shaderProgram,"time");const i=t.gl.getUniformLocation(W.shaderProgram,"projection"),n=t.gl.getUniformLocation(W.shaderProgram,"modelView"),o=t.gl.getUniformLocation(W.shaderProgram,"world");t.gl.bindVertexArray(X),t.gl.uniformMatrix4fv(i,!1,new Float32Array(a.matrProj.a().join().split(","))),t.gl.uniformMatrix4fv(n,!1,new Float32Array(a.matrView.a().join().split(",")));let h=new r;t.gl.uniformMatrix4fv(o,!1,new Float32Array(h.rotateX(Date.now()/10).mul(h.translate(new s(-3,0,0))).a().join().split(",")));const l=t.gl.getUniformLocation(W.shaderProgram,"camLoc"),c=t.gl.getUniformLocation(W.shaderProgram,"lightDir");t.gl.uniform3f(c,1,1,1),t.gl.uniform3f(l,a.loc.x,a.loc.y,a.loc.z);const u=t.gl.getUniformLocation(W.shaderProgram,"ka"),d=t.gl.getUniformLocation(W.shaderProgram,"kd"),g=t.gl.getUniformLocation(W.shaderProgram,"ks"),f=t.gl.getUniformLocation(W.shaderProgram,"ph");t.gl.uniform3f(u,Math.sin(Date.now()/500)/4+.25,Math.cos(Date.now()/300)/4+.25,Math.sin(Date.now()/1e3+5)/4+.25),t.gl.uniform3f(d,.07568,.61424,.07568),t.gl.uniform3f(g,.633,.727811,.633),t.gl.uniform1f(f,76.8),t.gl.uniform1f(e,Date.now()),t.gl.drawElements(t.gl.TRIANGLES,60,t.gl.UNSIGNED_SHORT,0)}async function $(){W=await v("withLight"),X=t.gl.createVertexArray(),t.gl.bindVertexArray(X),L(W,H,Y),t.gl.bindVertexArray(null)}const K=new Float32Array([0,1,0,0,0,.5,0,0,-.5,0,1,0,.5,0,0,-.5,0,0]);let Q,J,Z,tt,et=[];function st(){t.gl.useProgram(tt.shaderProgram),t.gl.bindVertexArray(Z);const e=t.gl.getUniformLocation(tt.shaderProgram,"projection"),s=t.gl.getUniformLocation(tt.shaderProgram,"modelView");Q=t.gl.getUniformLocation(tt.shaderProgram,"world"),J=t.gl.getUniformLocation(tt.shaderProgram,"color"),t.gl.uniformMatrix4fv(e,!1,new Float32Array(a.matrProj.a().join().split(","))),t.gl.uniformMatrix4fv(s,!1,new Float32Array(a.matrView.a().join().split(",")));let r=new i(.8,.47,.3,1);t.gl.uniform4f(J,r.x,r.y,r.z,r.w),et.forEach((e=>{t.gl.uniformMatrix4fv(Q,!1,e),t.gl.drawArrays(t.gl.TRIANGLES,0,6)})),et=[]}async function it(){tt=await v("markers"),Z=t.gl.createVertexArray(),t.gl.bindVertexArray(Z),L(tt,K),t.gl.bindVertexArray(null)}function rt(t=new s(0),e=new s(100),i=1){let n=new r,o=new s(0,1,0),a=e.sub(t);et.push(new Float32Array(n.scale(new s(i,a.len(),i)).mul(n.rotate(180,a.normalize().lerp(o,.5).normalize())).mul(n.translate(t)).a().join().split(",")))}function nt(){rt(new s(0,0,0),a.userLoc.sub(new s(0,1,0)),1),rt(new s(0,0,0),new s(10,10,10),1)}async function ot(){}function at(){for(let t=0;t<300;t++)rt(new s(3*t,0,0),new s(3*t,t,Math.sin(t)*t*2),.1*t);rt(new s(0,0,0),new s(1,1,1),1),rt(new s(0,0,0),new s(-1,-1,-1),1)}async function ht(){}let lt=[];class ct{constructor(t="Name not set",e=new s(.25,.25,.25),i=new s(.4,.4,.4),r=new s(.774597,.774597,.774597),n=76.8,o=1,a=null,h=[null]){this.ka=e,this.kd=i,this.ks=r,this.ph=n,this.trans=o,this.shaderName=a,this.tex=[...h],this.name=t}}function ut(t){let e=t.target.files[0],s=new FileReader;s.readAsText(e),s.onload=t=>{dt(t.target.result).then((t=>lt.push(t)))},s.onerror=function(){console.log(s.error)}}async function dt(t){let e=[0],i=[],r=[],n=t.split("\n");for(let t=0;t<n.length;t++){let o=n[t].split(" ");if("v"==o[0]){let t=+o[1],i=+o[2],r=+o[3];e.push(new s(t,i,r))}else if("f"==o[0])i.push(+o[1].split("/")[0]),i.push(+o[2].split("/")[0]),i.push(+o[3].split("/")[0]);else if("vn"==o[0]){let t=+o[1],e=+o[2],i=+o[3];r.push(new s(t,e,i))}}0==r.length&&(r=x(e,i));let o=[];e.forEach(((t,e)=>o.push(new gt(t,r[e]))));let a=new ft(o,i);return a.mtl=new ct,a.mtl.shaderName="withLight",await a.create(),a}class gt{constructor(t=new s,r=new s,n=new e,o=new i){this.p=t,this.n=r,this.t=n,this.c=o}}class ft{constructor(e,s=null,i=null,n=new r,o=t.gl.TRIANGLES,a=null){this.va=a,this.mtl=i,this.vBuf=e,this.iBuf=s,this.trans=n,this.type=o}draw(e){t.gl.useProgram(this.shader.shaderProgram);let s=t.gl.getUniformLocation(this.shader.shaderProgram,"time");const i=t.gl.getUniformLocation(this.shader.shaderProgram,"projection"),r=t.gl.getUniformLocation(this.shader.shaderProgram,"modelView"),n=t.gl.getUniformLocation(this.shader.shaderProgram,"lightDir"),o=t.gl.getUniformLocation(this.shader.shaderProgram,"camLoc"),h=t.gl.getUniformLocation(this.shader.shaderProgram,"world");t.gl.bindVertexArray(this.va),t.gl.uniformMatrix4fv(i,!1,new Float32Array(a.matrProj.a().join().split(","))),t.gl.uniformMatrix4fv(r,!1,new Float32Array(a.matrView.a().join().split(","))),t.gl.uniform1f(s,Date.now()),t.gl.uniform3f(n,1,2,3),t.gl.uniform3f(o,a.loc.x,a.loc.y,a.loc.z),t.gl.uniformMatrix4fv(h,!1,new Float32Array(e.a().join().split(",")));const l=t.gl.getUniformLocation(this.shader.shaderProgram,"ka"),c=t.gl.getUniformLocation(this.shader.shaderProgram,"kd"),u=t.gl.getUniformLocation(this.shader.shaderProgram,"ks"),d=t.gl.getUniformLocation(this.shader.shaderProgram,"ph");t.gl.uniform3f(l,this.mtl.ka.x,this.mtl.ka.y,this.mtl.ka.z),t.gl.uniform3f(c,this.mtl.kd.x,this.mtl.kd.y,this.mtl.kd.z),t.gl.uniform3f(u,this.mtl.ks.x,this.mtl.ks.y,this.mtl.ks.z),t.gl.uniform1f(d,this.mtl.ph),null!=this.iBuf?t.gl.drawElements(t.gl.TRIANGLES,this.iBuf.length,t.gl.UNSIGNED_SHORT,0):t.gl.drawArrays(t.gl.type,0,this.vBuf.length)}async create(){this.shader=await v(this.mtl.shaderName),this.va=t.gl.createVertexArray(),t.gl.bindVertexArray(this.va),L(this.shader,new Float32Array(this.vBuf.map((t=>[t.p.x,t.p.y,t.p.z])).flat()),new Uint16Array(this.iBuf),new Float32Array(this.vBuf.map((t=>[t.n.x,t.n.y,t.n.z])).flat())),t.gl.bindVertexArray(null)}}function pt(){lt.forEach((t=>t.draw(t.trans)))}async function mt(){}const yt=new Float32Array([10,-5,10,-10,-5,-10,10,-5,-10,10,-5,10,-10,-5,10,-10,-5,-10]);for(let t=0;t<18;t+=3)yt[t]*=100,yt[t+1]=0,yt[t+2]*=100;let wt,bt,xt;function At(){t.gl.useProgram(bt.shaderProgram);let e=t.gl.getUniformLocation(bt.shaderProgram,"time");const i=t.gl.getUniformLocation(bt.shaderProgram,"projection"),n=t.gl.getUniformLocation(bt.shaderProgram,"modelView"),o=t.gl.getUniformLocation(bt.shaderProgram,"world");t.gl.bindVertexArray(wt),t.gl.uniformMatrix4fv(i,!1,new Float32Array(a.matrProj.a().join().split(","))),t.gl.uniformMatrix4fv(n,!1,new Float32Array(a.matrView.a().join().split(",")));let h=new r;t.gl.uniformMatrix4fv(o,!1,new Float32Array(h.translate(new s(-3,0,0)).a().join().split(",")));const l=t.gl.getUniformLocation(bt.shaderProgram,"camLoc"),c=t.gl.getUniformLocation(bt.shaderProgram,"lightDir");t.gl.uniform3f(c,1,1,1),t.gl.uniform3f(l,a.loc.x,a.loc.y,a.loc.z);const u=t.gl.getUniformLocation(bt.shaderProgram,"ka"),d=t.gl.getUniformLocation(bt.shaderProgram,"kd"),g=t.gl.getUniformLocation(bt.shaderProgram,"ks"),f=t.gl.getUniformLocation(bt.shaderProgram,"ph");t.gl.uniform3f(u,.01,.3,.1),t.gl.uniform3f(d,.07568,.61424,.07568),t.gl.uniform3f(g,.633,.727811,.633),t.gl.uniform1f(f,76.8),t.gl.uniform1f(e,Date.now()),t.gl.drawArrays(t.gl.TRIANGLES,0,6)}async function Et(){bt=await v("withLight"),wt=t.gl.createVertexArray(),t.gl.bindVertexArray(wt),L(bt,yt),t.gl.bindVertexArray(null)}let vt,Lt=new r;function Pt(){xt.mtl.ka.x=Math.sin(Date.now()/100),xt.draw(Lt.scale(new s(1*(Math.sin(Date.now()/500)+2),1*(Math.cos(Date.now()/200)+2),1*(Math.sin(Date.now()/300+5)+2))).mul(Lt.translate(new s(0,-3,0))))}async function Rt(){let t;const e=fetch("bin/models/dode.obj").then((t=>t.text())).then((e=>{t=e}));await e.then((()=>{dt(t).then((t=>xt=t))}))}let kt,Tt=new r,_t=1;function Bt(){if(_t){vt.draw(Tt.scale(new s(.2*(Math.sin(Date.now()/200)/5+1.2),.2*(Math.cos(Date.now()/300)/5+1.2),.2*(Math.sin(Date.now()/400+5)/5+1.2))).mul(Tt.translate(new s(0,-3,0))).mul(Tt.translate(new s(-10,0,0))));let t=40;for(let e=0;e<t*t;e++)vt.mtl.ka=new s(.4*(Math.sin(Date.now()/200+e)/5+1.2),.4*(Math.cos(Date.now()/300+e)/5+1.2),.4*(Math.sin(Date.now()/400+5+e)/5+1.2)),vt.draw(Tt.scale(new s(.2*(Math.sin(Date.now()/200+e)/5+1.2),.2*(Math.cos(Date.now()/300+e)/5+1.2),.2*(Math.sin(Date.now()/400+5+e)/5+1.2))).mul(Tt.translate(new s(0,5*Math.floor(e/t),-e%t*5))))}}async function Ut(){let t;await fetch("bin/models/cow1.obj").then((t=>t.text())).then((e=>{t=e})).catch((()=>_t=0)),vt=await dt(t),vt.mtl.shaderName="withLightSmooth",await vt.create()}let Mt,Dt=new r,St=1,Ft=new s(0,0,-1);function Ct(){St&&kt.draw(Dt.rotateY(180*Ft.angle(a.userDir)/Math.PI).mul(Dt.translate(new s(a.userLoc.x,0,a.userLoc.z))));for(let e of t.users)if(null!=e&&a.id!=e.id){let i=Dt.rotateY(180*Ft.angle(new s(e.right.x,e.right.y,e.right.z))/Math.PI).mul(Dt.scale(new s(1,1,1))).mul(Dt.translate(new s(e.userLoc.x,0,e.userLoc.z)));kt.draw(i);let r=new s(e.userLoc.x,e.userLoc.y,e.userLoc.z);if(a.userDir.angle(r.sub(a.loc))>1.57||a.userDir.angle(r.sub(a.loc))<-1.57)continue;r=r.mulMatr(a.matrView).mulMatr(a.matrProj);let n=(.5*r.x+.5)*t.gl.canvas.width,o=(-.5*r.y+.5)*t.gl.canvas.height,h=document.createElement("span");const l=document.createTextNode(e.userName);h.appendChild(l),h.className="place",h.style.left=Math.floor(n)+"px",h.style.top=Math.floor(o)+"px",h.style.position="absolute",h.style.fontSize="24px",h.style.color="green",h.style.fontFamily="impact",h.style.backgroundColor="black",h.style.borderRadius="10px",h.style.paddingRight=h.style.paddingLeft="3px",Mt.appendChild(h)}}async function zt(){Mt=document.getElementById("places"),kt=await dt(undefined),kt.catch((()=>St=0)),kt.mtl.shaderName="withLightSmooth",await kt.create()}let Nt=13,Ot=20,It=16;const jt=new Float32Array([Ot/2,0,Ot/2,-Ot/2,0,Ot/2,Ot/2,0,-Ot/2,Ot/2,0,-Ot/2,-Ot/2,0,Ot/2,-Ot/2,0,-Ot/2]),Vt=new Float32Array([1,1,0,1,1,0,1,0,0,1,0,0]);let qt,Ht,Yt,Xt=[],Wt=new s(0,1e3,0),Gt=It*It,$t=5*Gt;const Kt=function(t,e){return Math.floor((t+180)/360*Math.pow(2,e))}(30.3350986,Nt),Qt=function(t,e){return Math.floor((1-Math.log(Math.tan(t*Math.PI/180)+1/Math.cos(t*Math.PI/180))/Math.PI)/2*Math.pow(2,e))}(59.9342802,Nt);async function Jt(t,e,s,i,r=r,n){let o=`https://api.geoapify.com/v2/places?categories=${e}&filter=rect%3A${re(s-.5,r)}%2C${ne(i-.5,r)}%2C${re(s+.5,r)}%2C${ne(i+.5,r)}&limit=${n}&apiKey=ca21185235644d0f821be4dfa3c2d6f3`;try{let e=await fetch(o,{method:"GET"}),s=await e.json();return t.push(...s.features.map((t=>({name:t.properties.name,x:se(t.properties.lon,r)-Kt,y:ie(t.properties.lat,r)-Qt}))).filter((t=>t.name))),!0}catch(t){return!1}}class Zt{constructor(t){this.blockPos=t,this.places=[],this.loadCounter=0}async load(){let e=0,s=0;e=Kt+this.blockPos.x,s=Qt+this.blockPos.z;let i=`https://api.mapbox.com/v4/mapbox.satellite/13/${e}/${s}.png?access_token=pk.eyJ1IjoibHM0IiwiYSI6ImNsaXluYmYyODA1bnAzcXQ4amlweGowc3gifQ.6cQiQQxsiO3WUIbKFOQrmw`;Jt(this.places,"populated_place.city",e,s,Nt,10),Jt(this.places,"populated_place.county",e,s,Nt,10),Jt(this.places,"natural.mountain",e,s,Nt,10),Jt(this.places,"natural.water",e,s,Nt,10);try{let e=await fetch(i);if(e.ok){let s=await e.blob(),i=await createImageBitmap(s);this.texture=t.gl.createTexture(),t.gl.bindTexture(t.gl.TEXTURE_2D,this.texture),t.gl.texImage2D(t.gl.TEXTURE_2D,0,t.gl.RGBA,i.width,i.height,0,t.gl.RGBA,t.gl.UNSIGNED_BYTE,i),t.gl.texParameteri(t.gl.TEXTURE_2D,t.gl.TEXTURE_MIN_FILTER,t.gl.NEAREST),t.gl.texParameteri(t.gl.TEXTURE_2D,t.gl.TEXTURE_MAG_FILTER,t.gl.NEAREST),t.gl.texParameteri(t.gl.TEXTURE_2D,t.gl.TEXTURE_WRAP_S,t.gl.CLAMP_TO_EDGE),t.gl.texParameteri(t.gl.TEXTURE_2D,t.gl.TEXTURE_WRAP_T,t.gl.CLAMP_TO_EDGE),this.isLoaded=!0}else this.loadCounter++<3?this.load():console.log(`At url ${i} was an HTTP error: `+e.status)}catch(t){this.loadCounter++<3?this.load():console.log(`At url ${i} was an HTTP error: `+t)}return this}}function te(){t.gl.useProgram(Yt.shaderProgram);let e=t.gl.getUniformLocation(Yt.shaderProgram,"time");const i=t.gl.getUniformLocation(Yt.shaderProgram,"projection"),n=t.gl.getUniformLocation(Yt.shaderProgram,"modelView"),o=t.gl.getUniformLocation(Yt.shaderProgram,"world");t.gl.bindVertexArray(Ht),t.gl.uniformMatrix4fv(i,!1,new Float32Array(a.matrProj.a().join().split(","))),t.gl.uniformMatrix4fv(n,!1,new Float32Array(a.matrView.a().join().split(",")));let h=new r;const l=t.gl.getUniformLocation(Yt.shaderProgram,"camLoc"),c=t.gl.getUniformLocation(Yt.shaderProgram,"lightDir");t.gl.uniform3f(c,1,1,1),t.gl.uniform3f(l,a.loc.x,a.loc.y,a.loc.z);const u=t.gl.getUniformLocation(Yt.shaderProgram,"ka"),d=t.gl.getUniformLocation(Yt.shaderProgram,"kd"),g=t.gl.getUniformLocation(Yt.shaderProgram,"ks"),f=t.gl.getUniformLocation(Yt.shaderProgram,"ph");t.gl.uniform3f(u,.01,.3,.1),t.gl.uniform3f(d,.07568,.61424,.07568),t.gl.uniform3f(g,.633,.727811,.633),t.gl.uniform1f(f,76.8),t.gl.uniform1f(e,Date.now());const p=t.gl.getUniformLocation(Yt.shaderProgram,"tex0");Wt.sub(a.userLoc).len2()>Ot*Ot*10&&(!function(){a.userBlockPos=new s(Math.floor(a.userLoc.x/Ot),0,Math.floor(a.userLoc.z/Ot)),Xt=Xt.filter((t=>(t.blockPos.x-a.userBlockPos.x)*(t.blockPos.x-a.userBlockPos.x)+(t.blockPos.z-a.userBlockPos.z)*(t.blockPos.z-a.userBlockPos.z)<$t));for(let t=1-It;t<It;t++)for(let e=1-It;e<It;e++)if(t*t+e*e<Gt&&!Xt.find((s=>s.blockPos.x==t+a.userBlockPos.x&&s.blockPos.z==e+a.userBlockPos.z))){let i=new Zt(new s(t+a.userBlockPos.x,0,e+a.userBlockPos.z));i.load(),Xt.push(i)}}(),Wt=a.userLoc.copy()),qt.innerHTML="";for(let e=0;e<Xt.length;e++){let i=h.translate(new s(Xt[e].blockPos.x*Ot,0,Xt[e].blockPos.z*Ot));t.gl.uniformMatrix4fv(o,!1,new Float32Array(i.a().join().split(","))),t.gl.activeTexture(t.gl.TEXTURE0+0),t.gl.bindTexture(t.gl.TEXTURE_2D,Xt[e].texture),t.gl.uniform1i(p,0),t.gl.drawArrays(t.gl.TRIANGLES,0,6)}}async function ee(){Yt=await v("map"),Ht=t.gl.createVertexArray(),t.gl.bindVertexArray(Ht),L(Yt,jt);const e=t.gl.getAttribLocation(Yt.shaderProgram,"texCoord"),i=t.gl.createBuffer();t.gl.bindBuffer(t.gl.ARRAY_BUFFER,i),t.gl.bufferData(t.gl.ARRAY_BUFFER,Vt,t.gl.STATIC_DRAW),t.gl.enableVertexAttribArray(e),t.gl.vertexAttribPointer(e,2,t.gl.FLOAT,!1,0,0),t.gl.bindVertexArray(null),a.userBlockPos=new s(Math.floor(a.userLoc.x/Ot),0,Math.floor(a.userLoc.z/Ot)),qt=document.getElementById("places")}function se(t,e){return(t+180)/360*Math.pow(2,e)}function ie(t,e){return(1-Math.log(Math.tan(t*Math.PI/180)+1/Math.cos(t*Math.PI/180))/Math.PI)/2*Math.pow(2,e)}function re(t,e){return t/Math.pow(2,e)*360-180}function ne(t,e){var s=Math.PI-2*Math.PI*t/Math.pow(2,e);return 180/Math.PI*Math.atan(.5*(Math.exp(s)-Math.exp(-s)))}let oe,ae,he,le=[];const ce=document.getElementById("rcoeff"),ue=document.getElementById("gcoeff"),de=document.getElementById("bcoeff"),ge=document.getElementById("a"),fe=document.getElementById("b");let pe,me,ye,we,be,xe=Date.now(),Ae=6;function Ee(){t.gl.disable(t.gl.DEPTH_TEST),t.gl.bindFramebuffer(t.gl.FRAMEBUFFER,ye),t.gl.viewport(0,0,pe,me),t.gl.bindVertexArray(he),t.gl.useProgram(oe.shaderProgram);let e=t.gl.getUniformLocation(oe.shaderProgram,"time"),s=t.gl.getUniformLocation(oe.shaderProgram,"x"),i=t.gl.getUniformLocation(oe.shaderProgram,"y"),r=t.gl.getUniformLocation(oe.shaderProgram,"zoom"),n=t.gl.getUniformLocation(oe.shaderProgram,"rcoeff"),o=t.gl.getUniformLocation(oe.shaderProgram,"gcoeff"),h=t.gl.getUniformLocation(oe.shaderProgram,"bcoeff"),l=t.gl.getUniformLocation(oe.shaderProgram,"a"),c=t.gl.getUniformLocation(oe.shaderProgram,"b");t.gl.uniform1f(e,(Date.now()-xe)/1e3),t.gl.uniform1f(i,.4),t.gl.uniform1f(s,.4),t.gl.uniform1f(r,1),t.gl.uniform1f(n,ce.value),t.gl.uniform1f(o,ue.value),t.gl.uniform1f(h,de.value),t.gl.uniform1f(l,ge.value),t.gl.uniform1f(c,5*fe.value),t.gl.useProgram(oe.shaderProgram),t.gl.drawArrays(t.gl.TRIANGLE_STRIP,0,4),t.gl.useProgram(ae.shaderProgram);const u=t.gl.getUniformLocation(ae.shaderProgram,"tex0");t.gl.bindFramebuffer(t.gl.FRAMEBUFFER,null),t.gl.viewport(0,0,a.frameW,a.frameH),t.gl.activeTexture(t.gl.TEXTURE0+Ae),t.gl.bindTexture(t.gl.TEXTURE_2D,we),t.gl.uniform1i(u,Ae);let d=t.gl.getUniformLocation(ae.shaderProgram,"camDir"),g=t.gl.getUniformLocation(ae.shaderProgram,"camUp"),f=t.gl.getUniformLocation(ae.shaderProgram,"camRight"),p=t.gl.getUniformLocation(ae.shaderProgram,"projDist"),m=t.gl.getUniformLocation(ae.shaderProgram,"frameW"),y=t.gl.getUniformLocation(ae.shaderProgram,"frameH");t.gl.uniform3f(d,a.dir.x,a.dir.y,a.dir.z),t.gl.uniform3f(g,a.up.x,a.up.y,a.up.z),t.gl.uniform3f(f,a.right.x,a.right.y,a.right.z),t.gl.uniform1f(p,a.projDist),t.gl.uniform1f(m,a.frameW),t.gl.uniform1f(y,a.frameH),t.gl.useProgram(ae.shaderProgram),t.gl.drawArrays(t.gl.TRIANGLE_STRIP,0,4),t.gl.enable(t.gl.DEPTH_TEST)}async function ve(){he=t.gl.createVertexArray(),t.gl.bindVertexArray(he),oe=await v("mandelbrot"),le=[-1,-1,0,-1,1,0,1,-1,0,1,1,0];let e=t.gl.getAttribLocation(oe.shaderProgram,"in_pos"),s=t.gl.createBuffer();t.gl.bindBuffer(t.gl.ARRAY_BUFFER,s),t.gl.bufferData(t.gl.ARRAY_BUFFER,new Float32Array(le),t.gl.STATIC_DRAW),t.gl.enableVertexAttribArray(e),t.gl.vertexAttribPointer(e,3,t.gl.FLOAT,!1,0,0),ae=await v("sky"),e=t.gl.getAttribLocation(oe.shaderProgram,"in_pos"),s=t.gl.createBuffer(),t.gl.bindBuffer(t.gl.ARRAY_BUFFER,s),t.gl.bufferData(t.gl.ARRAY_BUFFER,new Float32Array(le),t.gl.STATIC_DRAW),t.gl.enableVertexAttribArray(e),t.gl.vertexAttribPointer(e,3,t.gl.FLOAT,!1,0,0),pe=3*a.frameW,me=3*a.frameH,we=t.gl.createTexture(),t.gl.bindTexture(t.gl.TEXTURE_2D,we),t.gl.texImage2D(t.gl.TEXTURE_2D,0,t.gl.RGBA,pe,me,0,t.gl.RGBA,t.gl.UNSIGNED_BYTE,null),t.gl.texParameteri(t.gl.TEXTURE_2D,t.gl.TEXTURE_MIN_FILTER,t.gl.LINEAR),be=t.gl.createRenderbuffer(),t.gl.bindRenderbuffer(t.gl.RENDERBUFFER,be),t.gl.renderbufferStorage(t.gl.RENDERBUFFER,t.gl.DEPTH_COMPONENT16,pe,me),ye=t.gl.createFramebuffer(),t.gl.bindFramebuffer(t.gl.FRAMEBUFFER,ye),t.gl.framebufferTexture2D(t.gl.FRAMEBUFFER,t.gl.COLOR_ATTACHMENT0,t.gl.TEXTURE_2D,we,0),t.gl.framebufferRenderbuffer(t.gl.FRAMEBUFFER,t.gl.DEPTH_ATTACHMENT,t.gl.RENDERBUFFER,be),t.gl.bindVertexArray(null),t.gl.bindFramebuffer(t.gl.FRAMEBUFFER,null),t.gl.bindRenderbuffer(t.gl.RENDERBUFFER,null)}function Le(){document.getElementById("infoButton").onclick=()=>{document.getElementById("info").style.visibility="visible"==document.getElementById("info").style.visibility?"hidden":"visible"},document.getElementById("info").style.color="black";let t=new s(0,0,-1);document.getElementById("compassBox").style.backgroundPosition=1800*t.angle(new s(a.dir.x,0,a.dir.z))/Math.PI+400+"px 0px"}async function Pe(){}const Re=new class{constructor(){this.w=0,this.h=0,this.size=.1,this.numOfConstraints=0,this.constraints=[],this.p=[],this.oldP=[],this.forces=[],this.wind=new s(0,0,0),this.weight=0,this.friction=0,this.stiffness=0,this.handleCollisions=null,this.handleHardConstraints=null,this.numIterations=1}createDefault(t=10,e=10,i=.01,r=1,n=.99,o=.99){this.w=t,this.h=e,this.weight=i,this.friction=n,this.stiffness=o,this.size=r;let a=0;for(let i=0;i<e;i++)for(let n=0;n<t;n++)n<t-1&&(this.constraints[a]={particleA:i*t+n,particleB:i*t+(n+1),restLength:r,damper:0,stretch:new s},a++),i<e-1&&(this.constraints[a]={particleA:i*t+n,particleB:(i+1)*t+n,restLength:r,damper:0,stretch:new s},a++);this.numOfConstraints=a;for(let i=0;i<e;i++)for(let e=0;e<t;e++){const n=new s(e*r,0,i*r);this.p[i*t+e]=n,this.oldP[i*t+e]=n.copy()}}accumulateForces(){for(let t=0;t<this.w*this.h;t++)this.forces[t]=this.wind.add(new s(0,-this.weight,0))}verletStep(){for(let t=0;t<this.w*this.h;t++){const e=this.p[t].copy(),s=this.p[t].add(this.p[t].sub(this.oldP[t]).mul(this.friction)).add(this.forces[t].mul(10));this.p[t]=s,this.oldP[t]=e}}satisfyConstraints(){for(let t=0;t<this.numIterations;t++){null!==this.handleCollisions&&this.handleCollisions(this);for(let t=0;t<this.numOfConstraints;t++){const e=this.constraints[t];let s=this.p[e.particleB].sub(this.p[e.particleA]);s=s.mul(this.stiffness*e.restLength/(s.len()+e.restLength)-.5),this.p[e.particleA]=this.p[e.particleA].sub(s),this.p[e.particleB]=this.p[e.particleB].add(s)}}null!==this.handleHardConstraints&&this.handleHardConstraints(this)}update(t=1){for(let e=0;e<t;e++)this.satisfyConstraints(),this.accumulateForces(),this.verletStep()}draw(){for(let t=0;t<this.h;t++)for(let e=0;e<this.w;e++)rt(this.p[this.constraints[t*this.w+e].particleA],this.p[this.constraints[t*this.w+e].particleB],this.size/3);for(let t=0;t<this.h-1;t++)for(let e=0;e<this.w;e++){const s=this.constraints[this.h*(this.w-1)+t*this.w+e];rt(this.p[s.particleA],this.p[s.particleB],this.size/3)}}};function ke(t){t.p[0]=a.userLoc.add(new s(0,1,0)).sub(a.userDir.mul(.5)),t.p[9]=a.userLoc.add(new s(0,1.8,0)).sub(a.userDir)}function Te(){n.Space||Re.update(10),Re.wind=new s(6e-5*Math.sin(Date.now()),0,0),Re.draw(),rt(a.userLoc,a.userLoc.add(new s(0,1.8,0)).sub(a.userDir),.1)}async function _e(){Re.createDefault(10,10,1e-5,.08,.98,.9),Re.handleHardConstraints=ke}class Be{constructor(t,e,s){this.init=t,this.render=e,this.isToRender=!0,this.name=s}}let Ue=[];async function Me(){De(ve,Ee,"Fractal sky"),De(it,st,"Marker system"),De(Pe,Le,"Interface"),De(mt,pt,"Obj"),De(Et,At,"Plane"),De($,G,"Icosahedron"),De(B,_,"cube"),De(C,F,"Tetrahedron"),De(V,j,"Octahedron"),De(Rt,Pt,"Dodecahedron"),De(ot,nt,"Debug"),De(Ut,Bt,"cows"),De(ht,at,"markers"),De(ee,te,"Map"),De(zt,Ct,"user"),De(_e,Te,"cloth");for(let t=0;t<Ue.length;t++)await Ue[t].init();for(let t=0;t<Ue.length;t++){let e=document.createElement("input");e.type="checkbox";let s="unit"+t;e.id=s;let i=document.createElement("label");i.appendChild(e),i.innerHTML+=Ue[t].name,document.getElementById("unitsChecker").appendChild(i),document.getElementById("unitsChecker").innerHTML+="<br />"}Ue.forEach(((t,e)=>{if("Plane"===t.name);else document.getElementById("unit"+e).checked=!0}))}function De(t,e,s){Ue.push(new Be(t,e,s))}const Se=Object.create(null);Se.open="0",Se.close="1",Se.ping="2",Se.pong="3",Se.message="4",Se.upgrade="5",Se.noop="6";const Fe=Object.create(null);Object.keys(Se).forEach((t=>{Fe[Se[t]]=t}));const Ce={type:"error",data:"parser error"},ze="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===Object.prototype.toString.call(Blob),Ne="function"==typeof ArrayBuffer,Oe=({type:t,data:e},s,i)=>{return ze&&e instanceof Blob?s?i(e):Ie(e,i):Ne&&(e instanceof ArrayBuffer||(r=e,"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(r):r&&r.buffer instanceof ArrayBuffer))?s?i(e):Ie(new Blob([e]),i):i(Se[t]+(e||""));var r},Ie=(t,e)=>{const s=new FileReader;return s.onload=function(){const t=s.result.split(",")[1];e("b"+(t||""))},s.readAsDataURL(t)},je="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",Ve="undefined"==typeof Uint8Array?[]:new Uint8Array(256);for(let t=0;t<64;t++)Ve[je.charCodeAt(t)]=t;const qe="function"==typeof ArrayBuffer,He=(t,e)=>{if("string"!=typeof t)return{type:"message",data:Xe(t,e)};const s=t.charAt(0);if("b"===s)return{type:"message",data:Ye(t.substring(1),e)};return Fe[s]?t.length>1?{type:Fe[s],data:t.substring(1)}:{type:Fe[s]}:Ce},Ye=(t,e)=>{if(qe){const s=(t=>{let e,s,i,r,n,o=.75*t.length,a=t.length,h=0;"="===t[t.length-1]&&(o--,"="===t[t.length-2]&&o--);const l=new ArrayBuffer(o),c=new Uint8Array(l);for(e=0;e<a;e+=4)s=Ve[t.charCodeAt(e)],i=Ve[t.charCodeAt(e+1)],r=Ve[t.charCodeAt(e+2)],n=Ve[t.charCodeAt(e+3)],c[h++]=s<<2|i>>4,c[h++]=(15&i)<<4|r>>2,c[h++]=(3&r)<<6|63&n;return l})(t);return Xe(s,e)}return{base64:!0,data:t}},Xe=(t,e)=>"blob"===e&&t instanceof ArrayBuffer?new Blob([t]):t,We=String.fromCharCode(30);function Ge(t){if(t)return function(t){for(var e in Ge.prototype)t[e]=Ge.prototype[e];return t}(t)}Ge.prototype.on=Ge.prototype.addEventListener=function(t,e){return this._callbacks=this._callbacks||{},(this._callbacks["$"+t]=this._callbacks["$"+t]||[]).push(e),this},Ge.prototype.once=function(t,e){function s(){this.off(t,s),e.apply(this,arguments)}return s.fn=e,this.on(t,s),this},Ge.prototype.off=Ge.prototype.removeListener=Ge.prototype.removeAllListeners=Ge.prototype.removeEventListener=function(t,e){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var s,i=this._callbacks["$"+t];if(!i)return this;if(1==arguments.length)return delete this._callbacks["$"+t],this;for(var r=0;r<i.length;r++)if((s=i[r])===e||s.fn===e){i.splice(r,1);break}return 0===i.length&&delete this._callbacks["$"+t],this},Ge.prototype.emit=function(t){this._callbacks=this._callbacks||{};for(var e=new Array(arguments.length-1),s=this._callbacks["$"+t],i=1;i<arguments.length;i++)e[i-1]=arguments[i];if(s){i=0;for(var r=(s=s.slice(0)).length;i<r;++i)s[i].apply(this,e)}return this},Ge.prototype.emitReserved=Ge.prototype.emit,Ge.prototype.listeners=function(t){return this._callbacks=this._callbacks||{},this._callbacks["$"+t]||[]},Ge.prototype.hasListeners=function(t){return!!this.listeners(t).length};const $e="undefined"!=typeof self?self:"undefined"!=typeof window?window:Function("return this")();function Ke(t,...e){return e.reduce(((e,s)=>(t.hasOwnProperty(s)&&(e[s]=t[s]),e)),{})}const Qe=$e.setTimeout,Je=$e.clearTimeout;function Ze(t,e){e.useNativeTimers?(t.setTimeoutFn=Qe.bind($e),t.clearTimeoutFn=Je.bind($e)):(t.setTimeoutFn=$e.setTimeout.bind($e),t.clearTimeoutFn=$e.clearTimeout.bind($e))}class ts extends Error{constructor(t,e,s){super(t),this.description=e,this.context=s,this.type="TransportError"}}class es extends Ge{constructor(t){super(),this.writable=!1,Ze(this,t),this.opts=t,this.query=t.query,this.socket=t.socket}onError(t,e,s){return super.emitReserved("error",new ts(t,e,s)),this}open(){return this.readyState="opening",this.doOpen(),this}close(){return"opening"!==this.readyState&&"open"!==this.readyState||(this.doClose(),this.onClose()),this}send(t){"open"===this.readyState&&this.write(t)}onOpen(){this.readyState="open",this.writable=!0,super.emitReserved("open")}onData(t){const e=He(t,this.socket.binaryType);this.onPacket(e)}onPacket(t){super.emitReserved("packet",t)}onClose(t){this.readyState="closed",super.emitReserved("close",t)}pause(t){}}const ss="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(""),is=64,rs={};let ns,os=0,as=0;function hs(t){let e="";do{e=ss[t%is]+e,t=Math.floor(t/is)}while(t>0);return e}function ls(){const t=hs(+new Date);return t!==ns?(os=0,ns=t):t+"."+hs(os++)}for(;as<is;as++)rs[ss[as]]=as;function cs(t){let e="";for(let s in t)t.hasOwnProperty(s)&&(e.length&&(e+="&"),e+=encodeURIComponent(s)+"="+encodeURIComponent(t[s]));return e}let us=!1;try{us="undefined"!=typeof XMLHttpRequest&&"withCredentials"in new XMLHttpRequest}catch(t){}const ds=us;function gs(t){const e=t.xdomain;try{if("undefined"!=typeof XMLHttpRequest&&(!e||ds))return new XMLHttpRequest}catch(t){}if(!e)try{return new($e[["Active"].concat("Object").join("X")])("Microsoft.XMLHTTP")}catch(t){}}function fs(){}const ps=null!=new gs({xdomain:!1}).responseType;class ms extends Ge{constructor(t,e){super(),Ze(this,e),this.opts=e,this.method=e.method||"GET",this.uri=t,this.async=!1!==e.async,this.data=void 0!==e.data?e.data:null,this.create()}create(){const t=Ke(this.opts,"agent","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized","autoUnref");t.xdomain=!!this.opts.xd,t.xscheme=!!this.opts.xs;const e=this.xhr=new gs(t);try{e.open(this.method,this.uri,this.async);try{if(this.opts.extraHeaders){e.setDisableHeaderCheck&&e.setDisableHeaderCheck(!0);for(let t in this.opts.extraHeaders)this.opts.extraHeaders.hasOwnProperty(t)&&e.setRequestHeader(t,this.opts.extraHeaders[t])}}catch(t){}if("POST"===this.method)try{e.setRequestHeader("Content-type","text/plain;charset=UTF-8")}catch(t){}try{e.setRequestHeader("Accept","*/*")}catch(t){}"withCredentials"in e&&(e.withCredentials=this.opts.withCredentials),this.opts.requestTimeout&&(e.timeout=this.opts.requestTimeout),e.onreadystatechange=()=>{4===e.readyState&&(200===e.status||1223===e.status?this.onLoad():this.setTimeoutFn((()=>{this.onError("number"==typeof e.status?e.status:0)}),0))},e.send(this.data)}catch(t){return void this.setTimeoutFn((()=>{this.onError(t)}),0)}"undefined"!=typeof document&&(this.index=ms.requestsCount++,ms.requests[this.index]=this)}onError(t){this.emitReserved("error",t,this.xhr),this.cleanup(!0)}cleanup(t){if(void 0!==this.xhr&&null!==this.xhr){if(this.xhr.onreadystatechange=fs,t)try{this.xhr.abort()}catch(t){}"undefined"!=typeof document&&delete ms.requests[this.index],this.xhr=null}}onLoad(){const t=this.xhr.responseText;null!==t&&(this.emitReserved("data",t),this.emitReserved("success"),this.cleanup())}abort(){this.cleanup()}}if(ms.requestsCount=0,ms.requests={},"undefined"!=typeof document)if("function"==typeof attachEvent)attachEvent("onunload",ys);else if("function"==typeof addEventListener){addEventListener("onpagehide"in $e?"pagehide":"unload",ys,!1)}function ys(){for(let t in ms.requests)ms.requests.hasOwnProperty(t)&&ms.requests[t].abort()}const ws="function"==typeof Promise&&"function"==typeof Promise.resolve?t=>Promise.resolve().then(t):(t,e)=>e(t,0),bs=$e.WebSocket||$e.MozWebSocket,xs="undefined"!=typeof navigator&&"string"==typeof navigator.product&&"reactnative"===navigator.product.toLowerCase();const As={websocket:class extends es{constructor(t){super(t),this.supportsBinary=!t.forceBase64}get name(){return"websocket"}doOpen(){if(!this.check())return;const t=this.uri(),e=this.opts.protocols,s=xs?{}:Ke(this.opts,"agent","perMessageDeflate","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized","localAddress","protocolVersion","origin","maxPayload","family","checkServerIdentity");this.opts.extraHeaders&&(s.headers=this.opts.extraHeaders);try{this.ws=xs?new bs(t,e,s):e?new bs(t,e):new bs(t)}catch(t){return this.emitReserved("error",t)}this.ws.binaryType=this.socket.binaryType||"arraybuffer",this.addEventListeners()}addEventListeners(){this.ws.onopen=()=>{this.opts.autoUnref&&this.ws._socket.unref(),this.onOpen()},this.ws.onclose=t=>this.onClose({description:"websocket connection closed",context:t}),this.ws.onmessage=t=>this.onData(t.data),this.ws.onerror=t=>this.onError("websocket error",t)}write(t){this.writable=!1;for(let e=0;e<t.length;e++){const s=t[e],i=e===t.length-1;Oe(s,this.supportsBinary,(t=>{try{this.ws.send(t)}catch(t){}i&&ws((()=>{this.writable=!0,this.emitReserved("drain")}),this.setTimeoutFn)}))}}doClose(){void 0!==this.ws&&(this.ws.close(),this.ws=null)}uri(){let t=this.query||{};const e=this.opts.secure?"wss":"ws";let s="";this.opts.port&&("wss"===e&&443!==Number(this.opts.port)||"ws"===e&&80!==Number(this.opts.port))&&(s=":"+this.opts.port),this.opts.timestampRequests&&(t[this.opts.timestampParam]=ls()),this.supportsBinary||(t.b64=1);const i=cs(t);return e+"://"+(-1!==this.opts.hostname.indexOf(":")?"["+this.opts.hostname+"]":this.opts.hostname)+s+this.opts.path+(i.length?"?"+i:"")}check(){return!!bs}},polling:class extends es{constructor(t){if(super(t),this.polling=!1,"undefined"!=typeof location){const e="https:"===location.protocol;let s=location.port;s||(s=e?"443":"80"),this.xd="undefined"!=typeof location&&t.hostname!==location.hostname||s!==t.port,this.xs=t.secure!==e}const e=t&&t.forceBase64;this.supportsBinary=ps&&!e}get name(){return"polling"}doOpen(){this.poll()}pause(t){this.readyState="pausing";const e=()=>{this.readyState="paused",t()};if(this.polling||!this.writable){let t=0;this.polling&&(t++,this.once("pollComplete",(function(){--t||e()}))),this.writable||(t++,this.once("drain",(function(){--t||e()})))}else e()}poll(){this.polling=!0,this.doPoll(),this.emitReserved("poll")}onData(t){((t,e)=>{const s=t.split(We),i=[];for(let t=0;t<s.length;t++){const r=He(s[t],e);if(i.push(r),"error"===r.type)break}return i})(t,this.socket.binaryType).forEach((t=>{if("opening"===this.readyState&&"open"===t.type&&this.onOpen(),"close"===t.type)return this.onClose({description:"transport closed by the server"}),!1;this.onPacket(t)})),"closed"!==this.readyState&&(this.polling=!1,this.emitReserved("pollComplete"),"open"===this.readyState&&this.poll())}doClose(){const t=()=>{this.write([{type:"close"}])};"open"===this.readyState?t():this.once("open",t)}write(t){this.writable=!1,((t,e)=>{const s=t.length,i=new Array(s);let r=0;t.forEach(((t,n)=>{Oe(t,!1,(t=>{i[n]=t,++r===s&&e(i.join(We))}))}))})(t,(t=>{this.doWrite(t,(()=>{this.writable=!0,this.emitReserved("drain")}))}))}uri(){let t=this.query||{};const e=this.opts.secure?"https":"http";let s="";!1!==this.opts.timestampRequests&&(t[this.opts.timestampParam]=ls()),this.supportsBinary||t.sid||(t.b64=1),this.opts.port&&("https"===e&&443!==Number(this.opts.port)||"http"===e&&80!==Number(this.opts.port))&&(s=":"+this.opts.port);const i=cs(t);return e+"://"+(-1!==this.opts.hostname.indexOf(":")?"["+this.opts.hostname+"]":this.opts.hostname)+s+this.opts.path+(i.length?"?"+i:"")}request(t={}){return Object.assign(t,{xd:this.xd,xs:this.xs},this.opts),new ms(this.uri(),t)}doWrite(t,e){const s=this.request({method:"POST",data:t});s.on("success",e),s.on("error",((t,e)=>{this.onError("xhr post error",t,e)}))}doPoll(){const t=this.request();t.on("data",this.onData.bind(this)),t.on("error",((t,e)=>{this.onError("xhr poll error",t,e)})),this.pollXhr=t}}},Es=/^(?:(?![^:@\/?#]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@\/?#]*)(?::([^:@\/?#]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/,vs=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"];function Ls(t){const e=t,s=t.indexOf("["),i=t.indexOf("]");-1!=s&&-1!=i&&(t=t.substring(0,s)+t.substring(s,i).replace(/:/g,";")+t.substring(i,t.length));let r=Es.exec(t||""),n={},o=14;for(;o--;)n[vs[o]]=r[o]||"";return-1!=s&&-1!=i&&(n.source=e,n.host=n.host.substring(1,n.host.length-1).replace(/;/g,":"),n.authority=n.authority.replace("[","").replace("]","").replace(/;/g,":"),n.ipv6uri=!0),n.pathNames=function(t,e){const s=/\/{2,9}/g,i=e.replace(s,"/").split("/");"/"!=e.slice(0,1)&&0!==e.length||i.splice(0,1);"/"==e.slice(-1)&&i.splice(i.length-1,1);return i}(0,n.path),n.queryKey=function(t,e){const s={};return e.replace(/(?:^|&)([^&=]*)=?([^&]*)/g,(function(t,e,i){e&&(s[e]=i)})),s}(0,n.query),n}let Ps=class t extends Ge{constructor(t,e={}){super(),this.writeBuffer=[],t&&"object"==typeof t&&(e=t,t=null),t?(t=Ls(t),e.hostname=t.host,e.secure="https"===t.protocol||"wss"===t.protocol,e.port=t.port,t.query&&(e.query=t.query)):e.host&&(e.hostname=Ls(e.host).host),Ze(this,e),this.secure=null!=e.secure?e.secure:"undefined"!=typeof location&&"https:"===location.protocol,e.hostname&&!e.port&&(e.port=this.secure?"443":"80"),this.hostname=e.hostname||("undefined"!=typeof location?location.hostname:"localhost"),this.port=e.port||("undefined"!=typeof location&&location.port?location.port:this.secure?"443":"80"),this.transports=e.transports||["polling","websocket"],this.writeBuffer=[],this.prevBufferLen=0,this.opts=Object.assign({path:"/engine.io",agent:!1,withCredentials:!1,upgrade:!0,timestampParam:"t",rememberUpgrade:!1,addTrailingSlash:!0,rejectUnauthorized:!0,perMessageDeflate:{threshold:1024},transportOptions:{},closeOnBeforeunload:!0},e),this.opts.path=this.opts.path.replace(/\/$/,"")+(this.opts.addTrailingSlash?"/":""),"string"==typeof this.opts.query&&(this.opts.query=function(t){let e={},s=t.split("&");for(let t=0,i=s.length;t<i;t++){let i=s[t].split("=");e[decodeURIComponent(i[0])]=decodeURIComponent(i[1])}return e}(this.opts.query)),this.id=null,this.upgrades=null,this.pingInterval=null,this.pingTimeout=null,this.pingTimeoutTimer=null,"function"==typeof addEventListener&&(this.opts.closeOnBeforeunload&&(this.beforeunloadEventListener=()=>{this.transport&&(this.transport.removeAllListeners(),this.transport.close())},addEventListener("beforeunload",this.beforeunloadEventListener,!1)),"localhost"!==this.hostname&&(this.offlineEventListener=()=>{this.onClose("transport close",{description:"network connection lost"})},addEventListener("offline",this.offlineEventListener,!1))),this.open()}createTransport(t){const e=Object.assign({},this.opts.query);e.EIO=4,e.transport=t,this.id&&(e.sid=this.id);const s=Object.assign({},this.opts.transportOptions[t],this.opts,{query:e,socket:this,hostname:this.hostname,secure:this.secure,port:this.port});return new As[t](s)}open(){let e;if(this.opts.rememberUpgrade&&t.priorWebsocketSuccess&&-1!==this.transports.indexOf("websocket"))e="websocket";else{if(0===this.transports.length)return void this.setTimeoutFn((()=>{this.emitReserved("error","No transports available")}),0);e=this.transports[0]}this.readyState="opening";try{e=this.createTransport(e)}catch(t){return this.transports.shift(),void this.open()}e.open(),this.setTransport(e)}setTransport(t){this.transport&&this.transport.removeAllListeners(),this.transport=t,t.on("drain",this.onDrain.bind(this)).on("packet",this.onPacket.bind(this)).on("error",this.onError.bind(this)).on("close",(t=>this.onClose("transport close",t)))}probe(e){let s=this.createTransport(e),i=!1;t.priorWebsocketSuccess=!1;const r=()=>{i||(s.send([{type:"ping",data:"probe"}]),s.once("packet",(e=>{if(!i)if("pong"===e.type&&"probe"===e.data){if(this.upgrading=!0,this.emitReserved("upgrading",s),!s)return;t.priorWebsocketSuccess="websocket"===s.name,this.transport.pause((()=>{i||"closed"!==this.readyState&&(c(),this.setTransport(s),s.send([{type:"upgrade"}]),this.emitReserved("upgrade",s),s=null,this.upgrading=!1,this.flush())}))}else{const t=new Error("probe error");t.transport=s.name,this.emitReserved("upgradeError",t)}})))};function n(){i||(i=!0,c(),s.close(),s=null)}const o=t=>{const e=new Error("probe error: "+t);e.transport=s.name,n(),this.emitReserved("upgradeError",e)};function a(){o("transport closed")}function h(){o("socket closed")}function l(t){s&&t.name!==s.name&&n()}const c=()=>{s.removeListener("open",r),s.removeListener("error",o),s.removeListener("close",a),this.off("close",h),this.off("upgrading",l)};s.once("open",r),s.once("error",o),s.once("close",a),this.once("close",h),this.once("upgrading",l),s.open()}onOpen(){if(this.readyState="open",t.priorWebsocketSuccess="websocket"===this.transport.name,this.emitReserved("open"),this.flush(),"open"===this.readyState&&this.opts.upgrade){let t=0;const e=this.upgrades.length;for(;t<e;t++)this.probe(this.upgrades[t])}}onPacket(t){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState)switch(this.emitReserved("packet",t),this.emitReserved("heartbeat"),t.type){case"open":this.onHandshake(JSON.parse(t.data));break;case"ping":this.resetPingTimeout(),this.sendPacket("pong"),this.emitReserved("ping"),this.emitReserved("pong");break;case"error":const e=new Error("server error");e.code=t.data,this.onError(e);break;case"message":this.emitReserved("data",t.data),this.emitReserved("message",t.data)}}onHandshake(t){this.emitReserved("handshake",t),this.id=t.sid,this.transport.query.sid=t.sid,this.upgrades=this.filterUpgrades(t.upgrades),this.pingInterval=t.pingInterval,this.pingTimeout=t.pingTimeout,this.maxPayload=t.maxPayload,this.onOpen(),"closed"!==this.readyState&&this.resetPingTimeout()}resetPingTimeout(){this.clearTimeoutFn(this.pingTimeoutTimer),this.pingTimeoutTimer=this.setTimeoutFn((()=>{this.onClose("ping timeout")}),this.pingInterval+this.pingTimeout),this.opts.autoUnref&&this.pingTimeoutTimer.unref()}onDrain(){this.writeBuffer.splice(0,this.prevBufferLen),this.prevBufferLen=0,0===this.writeBuffer.length?this.emitReserved("drain"):this.flush()}flush(){if("closed"!==this.readyState&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length){const t=this.getWritablePackets();this.transport.send(t),this.prevBufferLen=t.length,this.emitReserved("flush")}}getWritablePackets(){if(!(this.maxPayload&&"polling"===this.transport.name&&this.writeBuffer.length>1))return this.writeBuffer;let t=1;for(let s=0;s<this.writeBuffer.length;s++){const i=this.writeBuffer[s].data;if(i&&(t+="string"==typeof(e=i)?function(t){let e=0,s=0;for(let i=0,r=t.length;i<r;i++)e=t.charCodeAt(i),e<128?s+=1:e<2048?s+=2:e<55296||e>=57344?s+=3:(i++,s+=4);return s}(e):Math.ceil(1.33*(e.byteLength||e.size))),s>0&&t>this.maxPayload)return this.writeBuffer.slice(0,s);t+=2}var e;return this.writeBuffer}write(t,e,s){return this.sendPacket("message",t,e,s),this}send(t,e,s){return this.sendPacket("message",t,e,s),this}sendPacket(t,e,s,i){if("function"==typeof e&&(i=e,e=void 0),"function"==typeof s&&(i=s,s=null),"closing"===this.readyState||"closed"===this.readyState)return;(s=s||{}).compress=!1!==s.compress;const r={type:t,data:e,options:s};this.emitReserved("packetCreate",r),this.writeBuffer.push(r),i&&this.once("flush",i),this.flush()}close(){const t=()=>{this.onClose("forced close"),this.transport.close()},e=()=>{this.off("upgrade",e),this.off("upgradeError",e),t()},s=()=>{this.once("upgrade",e),this.once("upgradeError",e)};return"opening"!==this.readyState&&"open"!==this.readyState||(this.readyState="closing",this.writeBuffer.length?this.once("drain",(()=>{this.upgrading?s():t()})):this.upgrading?s():t()),this}onError(e){t.priorWebsocketSuccess=!1,this.emitReserved("error",e),this.onClose("transport error",e)}onClose(t,e){"opening"!==this.readyState&&"open"!==this.readyState&&"closing"!==this.readyState||(this.clearTimeoutFn(this.pingTimeoutTimer),this.transport.removeAllListeners("close"),this.transport.close(),this.transport.removeAllListeners(),"function"==typeof removeEventListener&&(removeEventListener("beforeunload",this.beforeunloadEventListener,!1),removeEventListener("offline",this.offlineEventListener,!1)),this.readyState="closed",this.id=null,this.emitReserved("close",t,e),this.writeBuffer=[],this.prevBufferLen=0)}filterUpgrades(t){const e=[];let s=0;const i=t.length;for(;s<i;s++)~this.transports.indexOf(t[s])&&e.push(t[s]);return e}};Ps.protocol=4;const Rs="function"==typeof ArrayBuffer,ks=t=>"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(t):t.buffer instanceof ArrayBuffer,Ts=Object.prototype.toString,_s="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===Ts.call(Blob),Bs="function"==typeof File||"undefined"!=typeof File&&"[object FileConstructor]"===Ts.call(File);function Us(t){return Rs&&(t instanceof ArrayBuffer||ks(t))||_s&&t instanceof Blob||Bs&&t instanceof File}function Ms(t,e){if(!t||"object"!=typeof t)return!1;if(Array.isArray(t)){for(let e=0,s=t.length;e<s;e++)if(Ms(t[e]))return!0;return!1}if(Us(t))return!0;if(t.toJSON&&"function"==typeof t.toJSON&&1===arguments.length)return Ms(t.toJSON(),!0);for(const e in t)if(Object.prototype.hasOwnProperty.call(t,e)&&Ms(t[e]))return!0;return!1}function Ds(t){const e=[],s=t.data,i=t;return i.data=Ss(s,e),i.attachments=e.length,{packet:i,buffers:e}}function Ss(t,e){if(!t)return t;if(Us(t)){const s={_placeholder:!0,num:e.length};return e.push(t),s}if(Array.isArray(t)){const s=new Array(t.length);for(let i=0;i<t.length;i++)s[i]=Ss(t[i],e);return s}if("object"==typeof t&&!(t instanceof Date)){const s={};for(const i in t)Object.prototype.hasOwnProperty.call(t,i)&&(s[i]=Ss(t[i],e));return s}return t}function Fs(t,e){return t.data=Cs(t.data,e),delete t.attachments,t}function Cs(t,e){if(!t)return t;if(t&&!0===t._placeholder){if("number"==typeof t.num&&t.num>=0&&t.num<e.length)return e[t.num];throw new Error("illegal attachments")}if(Array.isArray(t))for(let s=0;s<t.length;s++)t[s]=Cs(t[s],e);else if("object"==typeof t)for(const s in t)Object.prototype.hasOwnProperty.call(t,s)&&(t[s]=Cs(t[s],e));return t}const zs=["connect","connect_error","disconnect","disconnecting","newListener","removeListener"];var Ns;!function(t){t[t.CONNECT=0]="CONNECT",t[t.DISCONNECT=1]="DISCONNECT",t[t.EVENT=2]="EVENT",t[t.ACK=3]="ACK",t[t.CONNECT_ERROR=4]="CONNECT_ERROR",t[t.BINARY_EVENT=5]="BINARY_EVENT",t[t.BINARY_ACK=6]="BINARY_ACK"}(Ns||(Ns={}));function Os(t){return"[object Object]"===Object.prototype.toString.call(t)}class Is extends Ge{constructor(t){super(),this.reviver=t}add(t){let e;if("string"==typeof t){if(this.reconstructor)throw new Error("got plaintext data when reconstructing a packet");e=this.decodeString(t);const s=e.type===Ns.BINARY_EVENT;s||e.type===Ns.BINARY_ACK?(e.type=s?Ns.EVENT:Ns.ACK,this.reconstructor=new js(e),0===e.attachments&&super.emitReserved("decoded",e)):super.emitReserved("decoded",e)}else{if(!Us(t)&&!t.base64)throw new Error("Unknown type: "+t);if(!this.reconstructor)throw new Error("got binary data when not reconstructing a packet");e=this.reconstructor.takeBinaryData(t),e&&(this.reconstructor=null,super.emitReserved("decoded",e))}}decodeString(t){let e=0;const s={type:Number(t.charAt(0))};if(void 0===Ns[s.type])throw new Error("unknown packet type "+s.type);if(s.type===Ns.BINARY_EVENT||s.type===Ns.BINARY_ACK){const i=e+1;for(;"-"!==t.charAt(++e)&&e!=t.length;);const r=t.substring(i,e);if(r!=Number(r)||"-"!==t.charAt(e))throw new Error("Illegal attachments");s.attachments=Number(r)}if("/"===t.charAt(e+1)){const i=e+1;for(;++e;){if(","===t.charAt(e))break;if(e===t.length)break}s.nsp=t.substring(i,e)}else s.nsp="/";const i=t.charAt(e+1);if(""!==i&&Number(i)==i){const i=e+1;for(;++e;){const s=t.charAt(e);if(null==s||Number(s)!=s){--e;break}if(e===t.length)break}s.id=Number(t.substring(i,e+1))}if(t.charAt(++e)){const i=this.tryParse(t.substr(e));if(!Is.isPayloadValid(s.type,i))throw new Error("invalid payload");s.data=i}return s}tryParse(t){try{return JSON.parse(t,this.reviver)}catch(t){return!1}}static isPayloadValid(t,e){switch(t){case Ns.CONNECT:return Os(e);case Ns.DISCONNECT:return void 0===e;case Ns.CONNECT_ERROR:return"string"==typeof e||Os(e);case Ns.EVENT:case Ns.BINARY_EVENT:return Array.isArray(e)&&("number"==typeof e[0]||"string"==typeof e[0]&&-1===zs.indexOf(e[0]));case Ns.ACK:case Ns.BINARY_ACK:return Array.isArray(e)}}destroy(){this.reconstructor&&(this.reconstructor.finishedReconstruction(),this.reconstructor=null)}}class js{constructor(t){this.packet=t,this.buffers=[],this.reconPack=t}takeBinaryData(t){if(this.buffers.push(t),this.buffers.length===this.reconPack.attachments){const t=Fs(this.reconPack,this.buffers);return this.finishedReconstruction(),t}return null}finishedReconstruction(){this.reconPack=null,this.buffers=[]}}var Vs=Object.freeze({__proto__:null,Decoder:Is,Encoder:class{constructor(t){this.replacer=t}encode(t){return t.type!==Ns.EVENT&&t.type!==Ns.ACK||!Ms(t)?[this.encodeAsString(t)]:this.encodeAsBinary({type:t.type===Ns.EVENT?Ns.BINARY_EVENT:Ns.BINARY_ACK,nsp:t.nsp,data:t.data,id:t.id})}encodeAsString(t){let e=""+t.type;return t.type!==Ns.BINARY_EVENT&&t.type!==Ns.BINARY_ACK||(e+=t.attachments+"-"),t.nsp&&"/"!==t.nsp&&(e+=t.nsp+","),null!=t.id&&(e+=t.id),null!=t.data&&(e+=JSON.stringify(t.data,this.replacer)),e}encodeAsBinary(t){const e=Ds(t),s=this.encodeAsString(e.packet),i=e.buffers;return i.unshift(s),i}},get PacketType(){return Ns},protocol:5});function qs(t,e,s){return t.on(e,s),function(){t.off(e,s)}}const Hs=Object.freeze({connect:1,connect_error:1,disconnect:1,disconnecting:1,newListener:1,removeListener:1});class Ys extends Ge{constructor(t,e,s){super(),this.connected=!1,this.recovered=!1,this.receiveBuffer=[],this.sendBuffer=[],this._queue=[],this._queueSeq=0,this.ids=0,this.acks={},this.flags={},this.io=t,this.nsp=e,s&&s.auth&&(this.auth=s.auth),this._opts=Object.assign({},s),this.io._autoConnect&&this.open()}get disconnected(){return!this.connected}subEvents(){if(this.subs)return;const t=this.io;this.subs=[qs(t,"open",this.onopen.bind(this)),qs(t,"packet",this.onpacket.bind(this)),qs(t,"error",this.onerror.bind(this)),qs(t,"close",this.onclose.bind(this))]}get active(){return!!this.subs}connect(){return this.connected||(this.subEvents(),this.io._reconnecting||this.io.open(),"open"===this.io._readyState&&this.onopen()),this}open(){return this.connect()}send(...t){return t.unshift("message"),this.emit.apply(this,t),this}emit(t,...e){if(Hs.hasOwnProperty(t))throw new Error('"'+t.toString()+'" is a reserved event name');if(e.unshift(t),this._opts.retries&&!this.flags.fromQueue&&!this.flags.volatile)return this._addToQueue(e),this;const s={type:Ns.EVENT,data:e,options:{}};if(s.options.compress=!1!==this.flags.compress,"function"==typeof e[e.length-1]){const t=this.ids++,i=e.pop();this._registerAckCallback(t,i),s.id=t}const i=this.io.engine&&this.io.engine.transport&&this.io.engine.transport.writable;return this.flags.volatile&&(!i||!this.connected)||(this.connected?(this.notifyOutgoingListeners(s),this.packet(s)):this.sendBuffer.push(s)),this.flags={},this}_registerAckCallback(t,e){var s;const i=null!==(s=this.flags.timeout)&&void 0!==s?s:this._opts.ackTimeout;if(void 0===i)return void(this.acks[t]=e);const r=this.io.setTimeoutFn((()=>{delete this.acks[t];for(let e=0;e<this.sendBuffer.length;e++)this.sendBuffer[e].id===t&&this.sendBuffer.splice(e,1);e.call(this,new Error("operation has timed out"))}),i);this.acks[t]=(...t)=>{this.io.clearTimeoutFn(r),e.apply(this,[null,...t])}}emitWithAck(t,...e){const s=void 0!==this.flags.timeout||void 0!==this._opts.ackTimeout;return new Promise(((i,r)=>{e.push(((t,e)=>s?t?r(t):i(e):i(t))),this.emit(t,...e)}))}_addToQueue(t){let e;"function"==typeof t[t.length-1]&&(e=t.pop());const s={id:this._queueSeq++,tryCount:0,pending:!1,args:t,flags:Object.assign({fromQueue:!0},this.flags)};t.push(((t,...i)=>{if(s!==this._queue[0])return;return null!==t?s.tryCount>this._opts.retries&&(this._queue.shift(),e&&e(t)):(this._queue.shift(),e&&e(null,...i)),s.pending=!1,this._drainQueue()})),this._queue.push(s),this._drainQueue()}_drainQueue(t=!1){if(!this.connected||0===this._queue.length)return;const e=this._queue[0];e.pending&&!t||(e.pending=!0,e.tryCount++,this.flags=e.flags,this.emit.apply(this,e.args))}packet(t){t.nsp=this.nsp,this.io._packet(t)}onopen(){"function"==typeof this.auth?this.auth((t=>{this._sendConnectPacket(t)})):this._sendConnectPacket(this.auth)}_sendConnectPacket(t){this.packet({type:Ns.CONNECT,data:this._pid?Object.assign({pid:this._pid,offset:this._lastOffset},t):t})}onerror(t){this.connected||this.emitReserved("connect_error",t)}onclose(t,e){this.connected=!1,delete this.id,this.emitReserved("disconnect",t,e)}onpacket(t){if(t.nsp===this.nsp)switch(t.type){case Ns.CONNECT:t.data&&t.data.sid?this.onconnect(t.data.sid,t.data.pid):this.emitReserved("connect_error",new Error("It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)"));break;case Ns.EVENT:case Ns.BINARY_EVENT:this.onevent(t);break;case Ns.ACK:case Ns.BINARY_ACK:this.onack(t);break;case Ns.DISCONNECT:this.ondisconnect();break;case Ns.CONNECT_ERROR:this.destroy();const e=new Error(t.data.message);e.data=t.data.data,this.emitReserved("connect_error",e)}}onevent(t){const e=t.data||[];null!=t.id&&e.push(this.ack(t.id)),this.connected?this.emitEvent(e):this.receiveBuffer.push(Object.freeze(e))}emitEvent(t){if(this._anyListeners&&this._anyListeners.length){const e=this._anyListeners.slice();for(const s of e)s.apply(this,t)}super.emit.apply(this,t),this._pid&&t.length&&"string"==typeof t[t.length-1]&&(this._lastOffset=t[t.length-1])}ack(t){const e=this;let s=!1;return function(...i){s||(s=!0,e.packet({type:Ns.ACK,id:t,data:i}))}}onack(t){const e=this.acks[t.id];"function"==typeof e&&(e.apply(this,t.data),delete this.acks[t.id])}onconnect(t,e){this.id=t,this.recovered=e&&this._pid===e,this._pid=e,this.connected=!0,this.emitBuffered(),this.emitReserved("connect"),this._drainQueue(!0)}emitBuffered(){this.receiveBuffer.forEach((t=>this.emitEvent(t))),this.receiveBuffer=[],this.sendBuffer.forEach((t=>{this.notifyOutgoingListeners(t),this.packet(t)})),this.sendBuffer=[]}ondisconnect(){this.destroy(),this.onclose("io server disconnect")}destroy(){this.subs&&(this.subs.forEach((t=>t())),this.subs=void 0),this.io._destroy(this)}disconnect(){return this.connected&&this.packet({type:Ns.DISCONNECT}),this.destroy(),this.connected&&this.onclose("io client disconnect"),this}close(){return this.disconnect()}compress(t){return this.flags.compress=t,this}get volatile(){return this.flags.volatile=!0,this}timeout(t){return this.flags.timeout=t,this}onAny(t){return this._anyListeners=this._anyListeners||[],this._anyListeners.push(t),this}prependAny(t){return this._anyListeners=this._anyListeners||[],this._anyListeners.unshift(t),this}offAny(t){if(!this._anyListeners)return this;if(t){const e=this._anyListeners;for(let s=0;s<e.length;s++)if(t===e[s])return e.splice(s,1),this}else this._anyListeners=[];return this}listenersAny(){return this._anyListeners||[]}onAnyOutgoing(t){return this._anyOutgoingListeners=this._anyOutgoingListeners||[],this._anyOutgoingListeners.push(t),this}prependAnyOutgoing(t){return this._anyOutgoingListeners=this._anyOutgoingListeners||[],this._anyOutgoingListeners.unshift(t),this}offAnyOutgoing(t){if(!this._anyOutgoingListeners)return this;if(t){const e=this._anyOutgoingListeners;for(let s=0;s<e.length;s++)if(t===e[s])return e.splice(s,1),this}else this._anyOutgoingListeners=[];return this}listenersAnyOutgoing(){return this._anyOutgoingListeners||[]}notifyOutgoingListeners(t){if(this._anyOutgoingListeners&&this._anyOutgoingListeners.length){const e=this._anyOutgoingListeners.slice();for(const s of e)s.apply(this,t.data)}}}function Xs(t){t=t||{},this.ms=t.min||100,this.max=t.max||1e4,this.factor=t.factor||2,this.jitter=t.jitter>0&&t.jitter<=1?t.jitter:0,this.attempts=0}Xs.prototype.duration=function(){var t=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var e=Math.random(),s=Math.floor(e*this.jitter*t);t=0==(1&Math.floor(10*e))?t-s:t+s}return 0|Math.min(t,this.max)},Xs.prototype.reset=function(){this.attempts=0},Xs.prototype.setMin=function(t){this.ms=t},Xs.prototype.setMax=function(t){this.max=t},Xs.prototype.setJitter=function(t){this.jitter=t};class Ws extends Ge{constructor(t,e){var s;super(),this.nsps={},this.subs=[],t&&"object"==typeof t&&(e=t,t=void 0),(e=e||{}).path=e.path||"/socket.io",this.opts=e,Ze(this,e),this.reconnection(!1!==e.reconnection),this.reconnectionAttempts(e.reconnectionAttempts||1/0),this.reconnectionDelay(e.reconnectionDelay||1e3),this.reconnectionDelayMax(e.reconnectionDelayMax||5e3),this.randomizationFactor(null!==(s=e.randomizationFactor)&&void 0!==s?s:.5),this.backoff=new Xs({min:this.reconnectionDelay(),max:this.reconnectionDelayMax(),jitter:this.randomizationFactor()}),this.timeout(null==e.timeout?2e4:e.timeout),this._readyState="closed",this.uri=t;const i=e.parser||Vs;this.encoder=new i.Encoder,this.decoder=new i.Decoder,this._autoConnect=!1!==e.autoConnect,this._autoConnect&&this.open()}reconnection(t){return arguments.length?(this._reconnection=!!t,this):this._reconnection}reconnectionAttempts(t){return void 0===t?this._reconnectionAttempts:(this._reconnectionAttempts=t,this)}reconnectionDelay(t){var e;return void 0===t?this._reconnectionDelay:(this._reconnectionDelay=t,null===(e=this.backoff)||void 0===e||e.setMin(t),this)}randomizationFactor(t){var e;return void 0===t?this._randomizationFactor:(this._randomizationFactor=t,null===(e=this.backoff)||void 0===e||e.setJitter(t),this)}reconnectionDelayMax(t){var e;return void 0===t?this._reconnectionDelayMax:(this._reconnectionDelayMax=t,null===(e=this.backoff)||void 0===e||e.setMax(t),this)}timeout(t){return arguments.length?(this._timeout=t,this):this._timeout}maybeReconnectOnOpen(){!this._reconnecting&&this._reconnection&&0===this.backoff.attempts&&this.reconnect()}open(t){if(~this._readyState.indexOf("open"))return this;this.engine=new Ps(this.uri,this.opts);const e=this.engine,s=this;this._readyState="opening",this.skipReconnect=!1;const i=qs(e,"open",(function(){s.onopen(),t&&t()})),r=qs(e,"error",(e=>{s.cleanup(),s._readyState="closed",this.emitReserved("error",e),t?t(e):s.maybeReconnectOnOpen()}));if(!1!==this._timeout){const t=this._timeout;0===t&&i();const s=this.setTimeoutFn((()=>{i(),e.close(),e.emit("error",new Error("timeout"))}),t);this.opts.autoUnref&&s.unref(),this.subs.push((function(){clearTimeout(s)}))}return this.subs.push(i),this.subs.push(r),this}connect(t){return this.open(t)}onopen(){this.cleanup(),this._readyState="open",this.emitReserved("open");const t=this.engine;this.subs.push(qs(t,"ping",this.onping.bind(this)),qs(t,"data",this.ondata.bind(this)),qs(t,"error",this.onerror.bind(this)),qs(t,"close",this.onclose.bind(this)),qs(this.decoder,"decoded",this.ondecoded.bind(this)))}onping(){this.emitReserved("ping")}ondata(t){try{this.decoder.add(t)}catch(t){this.onclose("parse error",t)}}ondecoded(t){ws((()=>{this.emitReserved("packet",t)}),this.setTimeoutFn)}onerror(t){this.emitReserved("error",t)}socket(t,e){let s=this.nsps[t];return s?this._autoConnect&&!s.active&&s.connect():(s=new Ys(this,t,e),this.nsps[t]=s),s}_destroy(t){const e=Object.keys(this.nsps);for(const t of e){if(this.nsps[t].active)return}this._close()}_packet(t){const e=this.encoder.encode(t);for(let s=0;s<e.length;s++)this.engine.write(e[s],t.options)}cleanup(){this.subs.forEach((t=>t())),this.subs.length=0,this.decoder.destroy()}_close(){this.skipReconnect=!0,this._reconnecting=!1,this.onclose("forced close"),this.engine&&this.engine.close()}disconnect(){return this._close()}onclose(t,e){this.cleanup(),this.backoff.reset(),this._readyState="closed",this.emitReserved("close",t,e),this._reconnection&&!this.skipReconnect&&this.reconnect()}reconnect(){if(this._reconnecting||this.skipReconnect)return this;const t=this;if(this.backoff.attempts>=this._reconnectionAttempts)this.backoff.reset(),this.emitReserved("reconnect_failed"),this._reconnecting=!1;else{const e=this.backoff.duration();this._reconnecting=!0;const s=this.setTimeoutFn((()=>{t.skipReconnect||(this.emitReserved("reconnect_attempt",t.backoff.attempts),t.skipReconnect||t.open((e=>{e?(t._reconnecting=!1,t.reconnect(),this.emitReserved("reconnect_error",e)):t.onreconnect()})))}),e);this.opts.autoUnref&&s.unref(),this.subs.push((function(){clearTimeout(s)}))}}onreconnect(){const t=this.backoff.attempts;this._reconnecting=!1,this.backoff.reset(),this.emitReserved("reconnect",t)}}const Gs={};function $s(t,e){"object"==typeof t&&(e=t,t=void 0);const s=function(t,e="",s){let i=t;s=s||"undefined"!=typeof location&&location,null==t&&(t=s.protocol+"//"+s.host),"string"==typeof t&&("/"===t.charAt(0)&&(t="/"===t.charAt(1)?s.protocol+t:s.host+t),/^(https?|wss?):\/\//.test(t)||(t=void 0!==s?s.protocol+"//"+t:"https://"+t),i=Ls(t)),i.port||(/^(http|ws)$/.test(i.protocol)?i.port="80":/^(http|ws)s$/.test(i.protocol)&&(i.port="443")),i.path=i.path||"/";const r=-1!==i.host.indexOf(":")?"["+i.host+"]":i.host;return i.id=i.protocol+"://"+r+":"+i.port+e,i.href=i.protocol+"://"+r+(s&&s.port===i.port?"":":"+i.port),i}(t,(e=e||{}).path||"/socket.io"),i=s.source,r=s.id,n=s.path,o=Gs[r]&&n in Gs[r].nsps;let a;return e.forceNew||e["force new connection"]||!1===e.multiplex||o?a=new Ws(i,e):(Gs[r]||(Gs[r]=new Ws(i,e)),a=Gs[r]),s.query&&!e.query&&(e.query=s.queryKey),a.socket(s.path,e)}Object.assign($s,{Manager:Ws,Socket:Ys,io:$s,connect:$s});const Ks=$s();let Qs,Js,Zs;function ti(e){t.users=e}function ei(t){Zs.innerHTML=t.map((t=>`<li class="message" id="${t.sender.userName==Ks.userName?"user":"notUser"}">${t.sender.userName+" : "+t.text}\n        <button class="deleteMessage" id="${t._id.toString()}" style="\n        float: right; border-radius: 10px;"> Delete</button><span style="\n        float: right;">${t.date}</span>\n        </li>`)).join(""),Zs.scrollTo(0,Zs.scrollHeight),window.scrollTo(0,Zs.scrollHeight),document.getElementById("msgbox").scrollTop=document.getElementById("msgbox").scrollHeight;for(let t of document.getElementsByClassName("deleteMessage"))t.onclick=()=>{Ks.emit("deleteMessage",t.id)}}function si(){let t=prompt("Enter your name");console.log(Ks.id),Ks.emit("reloadRequest"),Ks.emit("auth",t),Ks.userName=t}t.gl=void 0,t.users=[],window.addEventListener("load",(()=>{function e(t){var e=t.changedTouches[0],s="";switch(t.type){case"touchstart":s="mousedown";break;case"touchmove":s="mousemove";break;case"touchend":s="mouseup";break;default:return}var i=document.createEvent("MouseEvent");i.initMouseEvent(s,!0,!0,window,1,e.screenX,e.screenY,e.clientX,e.clientY,!1,!1,!1,!1,0,null),e.target.dispatchEvent(i),t.preventDefault()}Zs=document.getElementById("messages"),document.getElementById("id1").onkeyup=t=>{if("Enter"===t.code){const t=document.getElementById("id1").value;console.log(t),document.getElementById("id1").value="",Ks.emit("MessageToServer",t)}},document.getElementById("clearButton").onclick=()=>{Ks.emit("clearAllMessages")},Ks.on("connect",si),Ks.on("userReloadResponse",ti),Ks.on("msgReloadResponse",ei),Ks.on("disconnect",(()=>{console.log("disconnected")})),Qs=document.getElementById("glCanvas"),t.gl=Qs.getContext("webgl2"),Js=document.getElementById("coords"),ri(),window.onmousemove=h,window.onmousedown=l,window.onmouseup=c,window.addEventListener("contextmenu",(t=>t.preventDefault())),window.addEventListener("wheel",(t=>{!function(t){o.dz=t.deltaY}(t)})),window.onscroll=()=>window.scroll(0,0),window.addEventListener("keyup",(t=>{!function(t){n[t.code]=0}(t)})),window.addEventListener("keydown",(t=>{!function(t){n[t.code]=1}(t)})),document.querySelector("#file").addEventListener("change",ut),document.addEventListener("touchstart",e,!0),document.addEventListener("touchmove",e,!0),document.addEventListener("touchend",e,!0),document.addEventListener("touchcancel",e,!0)}));const ii=()=>{t.gl.clearColor(.8,.47,.3,1),t.gl.clear(t.gl.COLOR_BUFFER_BIT|t.gl.DEPTH_BUFFER_BIT),Qs.width=window.innerWidth,Qs.height=window.innerHeight,t.gl.viewport(0,0,a.frameW,a.frameH),b(),a.setSize(Qs.width,Qs.height),a.camSet(a.loc,a.at,a.up,a.pos,a.userLoc),Js.innerHTML="LocX: "+a.loc.x.toString().slice(0,5)+" LocY: "+a.loc.y.toString().slice(0,5)+" LocZ: "+a.loc.z.toString().slice(0,5)+"<br /> Dir X: "+a.dir.x.toString().slice(0,5)+" Dir Y: "+a.dir.y.toString().slice(0,5)+" Dir Z: "+a.dir.z.toString().slice(0,5)+"<br /> Up X: "+a.up.x.toString().slice(0,5)+" Up Y: "+a.up.y.toString().slice(0,5)+" Up Z: "+a.up.z.toString().slice(0,5)+"<br /> At X: "+a.at.x.toString().slice(0,5)+" At Y: "+a.at.y.toString().slice(0,5)+" At Z: "+a.at.z.toString().slice(0,5)+"<br />",Ue.forEach(((t,e)=>{document.getElementById("unit"+e).checked&&t.render()})),o.dx=o.dy=o.dz=0,Ks.emit("reloadRequest",a),window.requestAnimationFrame(ii)};async function ri(){t.gl.clearColor(1,1,0,1),t.gl.clear(t.gl.COLOR_BUFFER_BIT),t.gl.enable(t.gl.DEPTH_TEST),t.gl.viewport(0,0,t.gl.canvas.width,t.gl.canvas.height),Qs.width=window.innerWidth,Qs.height=window.innerHeight,b(),a.setSize(Qs.width,Qs.height),a.camSet(a.loc,a.at,a.up,a.pos,a.userLoc),await v("default"),await Me(),ii()}t.initGL=ri}({});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlcyI6WyIuLi9jbGllbnQvdXRpbHMvbXRoLmpzIiwiLi4vY2xpZW50L3V0aWxzL2NvbnRyb2xzLmpzIiwiLi4vY2xpZW50L3V0aWxzL2NhbWVyYS5qcyIsIi4uL2NsaWVudC91dGlscy91dGlscy5qcyIsIi4uL2NsaWVudC9ybmQvc2hhZGVycy5qcyIsIi4uL2NsaWVudC91bml0cy91bml0Q3ViZS5qcyIsIi4uL2NsaWVudC91bml0cy91bml0VGV0cmFoZWRyb24uanMiLCIuLi9jbGllbnQvdW5pdHMvdW5pdE9jdGFoZWRyb24uanMiLCIuLi9jbGllbnQvdW5pdHMvdW5pdEljb3NhaGVkcm9uLmpzIiwiLi4vY2xpZW50L3V0aWxzL21hcmtlcnMuanMiLCIuLi9jbGllbnQvdW5pdHMvdW5pdERiZy5qcyIsIi4uL2NsaWVudC91bml0cy91bml0bWFya2VyLmpzIiwiLi4vY2xpZW50L3JuZC9wcmltcy5qcyIsIi4uL2NsaWVudC91bml0cy91bml0T2JqLmpzIiwiLi4vY2xpZW50L3VuaXRzL3VuaXRQbGFuZS5qcyIsIi4uL2NsaWVudC91bml0cy91bml0RG9kZWNhaGVkcm9uLmpzIiwiLi4vY2xpZW50L3VuaXRzL3VuaXRDb3cuanMiLCIuLi9jbGllbnQvdW5pdHMvdW5pdEJpa2UuanMiLCIuLi9jbGllbnQvdW5pdHMvdW5pdE1hcC5qcyIsIi4uL2NsaWVudC91bml0cy91bml0RnJhY3RhbFNreS5qcyIsIi4uL2NsaWVudC91bml0cy91bml0SW50ZXJmYWNlLmpzIiwiLi4vY2xpZW50L3VuaXRzL3VuaXRDbG90aC5qcyIsIi4uL2NsaWVudC91dGlscy9jbG90aC5qcyIsIi4uL2NsaWVudC91bml0cy91bml0cy5qcyIsIi4uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tcGFyc2VyL2J1aWxkL2VzbS9jb21tb25zLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1wYXJzZXIvYnVpbGQvZXNtL2VuY29kZVBhY2tldC5icm93c2VyLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1wYXJzZXIvYnVpbGQvZXNtL2NvbnRyaWIvYmFzZTY0LWFycmF5YnVmZmVyLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1wYXJzZXIvYnVpbGQvZXNtL2RlY29kZVBhY2tldC5icm93c2VyLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1wYXJzZXIvYnVpbGQvZXNtL2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL0Bzb2NrZXQuaW8vY29tcG9uZW50LWVtaXR0ZXIvaW5kZXgubWpzIiwiLi4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvYnVpbGQvZXNtL2dsb2JhbFRoaXMuYnJvd3Nlci5qcyIsIi4uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2J1aWxkL2VzbS91dGlsLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvYnVpbGQvZXNtL3RyYW5zcG9ydC5qcyIsIi4uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2J1aWxkL2VzbS9jb250cmliL3llYXN0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvYnVpbGQvZXNtL2NvbnRyaWIvcGFyc2Vxcy5qcyIsIi4uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2J1aWxkL2VzbS9jb250cmliL2hhcy1jb3JzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvYnVpbGQvZXNtL3RyYW5zcG9ydHMveG1saHR0cHJlcXVlc3QuYnJvd3Nlci5qcyIsIi4uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2J1aWxkL2VzbS90cmFuc3BvcnRzL3BvbGxpbmcuanMiLCIuLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9idWlsZC9lc20vdHJhbnNwb3J0cy93ZWJzb2NrZXQtY29uc3RydWN0b3IuYnJvd3Nlci5qcyIsIi4uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2J1aWxkL2VzbS90cmFuc3BvcnRzL3dlYnNvY2tldC5qcyIsIi4uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2J1aWxkL2VzbS90cmFuc3BvcnRzL2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvYnVpbGQvZXNtL2NvbnRyaWIvcGFyc2V1cmkuanMiLCIuLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9idWlsZC9lc20vc29ja2V0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1wYXJzZXIvYnVpbGQvZXNtL2lzLWJpbmFyeS5qcyIsIi4uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tcGFyc2VyL2J1aWxkL2VzbS9iaW5hcnkuanMiLCIuLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLXBhcnNlci9idWlsZC9lc20vaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLWNsaWVudC9idWlsZC9lc20vb24uanMiLCIuLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLWNsaWVudC9idWlsZC9lc20vc29ja2V0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1jbGllbnQvYnVpbGQvZXNtL2NvbnRyaWIvYmFja28yLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1jbGllbnQvYnVpbGQvZXNtL21hbmFnZXIuanMiLCIuLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLWNsaWVudC9idWlsZC9lc20vaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLWNsaWVudC9idWlsZC9lc20vdXJsLmpzIiwiLi4vY2xpZW50L21haW4uanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIHZlYzIge1xyXG4gIGNvbnN0cnVjdG9yKHggPSAwLCB5ID0gMCkge1xyXG4gICAgdGhpcy54ID0geDtcclxuICAgIHRoaXMueSA9IHk7XHJcbiAgfVxyXG5cclxuICBhZGQodmVjKSB7XHJcbiAgICByZXR1cm4gbmV3IHZlYzIodGhpcy54ICsgdmVjLngsIHRoaXMueSArIHZlYy55KTtcclxuICB9XHJcbiAgc3ViKHZlYykge1xyXG4gICAgcmV0dXJuIG5ldyB2ZWMyKHRoaXMueCAtIHZlYy54LCB0aGlzLnkgLSB2ZWMueSk7XHJcbiAgfVxyXG4gIG11bChuKSB7XHJcbiAgICByZXR1cm4gbmV3IHZlYzIodGhpcy54ICogbiwgdGhpcy55ICogbik7XHJcbiAgfVxyXG4gIGRpdihuKSB7XHJcbiAgICByZXR1cm4gbmV3IHZlYzIodGhpcy54IC8gbiwgdGhpcy55IC8gbik7XHJcbiAgfVxyXG4gIG5lZygpIHtcclxuICAgIHJldHVybiBuZXcgdmVjMigtdGhpcy54LCAtdGhpcy55KTtcclxuICB9XHJcbiAgZG90KHZlYykge1xyXG4gICAgcmV0dXJuIHRoaXMueCAqIHZlYy54ICsgdGhpcy55ICogdmVjLnk7XHJcbiAgfVxyXG4gIGNyb3NzKHZlYykge1xyXG4gICAgcmV0dXJuIHRoaXMueCAqIHZlYy55IC0gdGhpcy55ICogdmVjLng7XHJcbiAgfVxyXG4gIGxlbjIoKSB7XHJcbiAgICByZXR1cm4gdGhpcy54ICogdGhpcy54ICsgdGhpcy55ICogdGhpcy55O1xyXG4gIH1cclxuICBsZW4oKSB7XHJcbiAgICByZXR1cm4gTWF0aC5zcXJ0KHRoaXMubGVuMigpKTtcclxuICB9XHJcbiAgbm9ybWFsaXplKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuZGl2KHRoaXMubGVuKCkpO1xyXG4gIH1cclxuICBsZXJwKHZlYywgYykge1xyXG4gICAgcmV0dXJuIG5ldyB2ZWMyKFxyXG4gICAgICB0aGlzLnggKyAodmVjLnggLSB0aGlzLngpICogYyxcclxuICAgICAgdGhpcy55ICsgKHZlYy55IC0gdGhpcy55KSAqIGNcclxuICAgICk7XHJcbiAgfVxyXG59XHJcbmV4cG9ydCBjbGFzcyB2ZWMzIHtcclxuICBjb25zdHJ1Y3Rvcih4ID0gMCwgeSA9IDAsIHogPSAwKSB7XHJcbiAgICB0aGlzLnggPSB4O1xyXG4gICAgdGhpcy55ID0geTtcclxuICAgIHRoaXMueiA9IHo7XHJcbiAgfVxyXG5cclxuICBlcSh2ZWMpIHtcclxuICAgIHJldHVybiB0aGlzLnggPT0gdmVjLnggJiYgdGhpcy55ID09IHZlYy55ICYmIHRoaXMueiA9PSB2ZWMuejtcclxuICB9XHJcbiAgYWRkKHZlYykge1xyXG4gICAgcmV0dXJuIG5ldyB2ZWMzKHRoaXMueCArIHZlYy54LCB0aGlzLnkgKyB2ZWMueSwgdGhpcy56ICsgdmVjLnopO1xyXG4gIH1cclxuICBzdWIodmVjKSB7XHJcbiAgICByZXR1cm4gbmV3IHZlYzModGhpcy54IC0gdmVjLngsIHRoaXMueSAtIHZlYy55LCB0aGlzLnogLSB2ZWMueik7XHJcbiAgfVxyXG4gIG11bChuKSB7XHJcbiAgICByZXR1cm4gbmV3IHZlYzModGhpcy54ICogbiwgdGhpcy55ICogbiwgdGhpcy56ICogbik7XHJcbiAgfVxyXG4gIGRpdihuKSB7XHJcbiAgICByZXR1cm4gbiAhPSAwID8gbmV3IHZlYzModGhpcy54IC8gbiwgdGhpcy55IC8gbiwgdGhpcy56IC8gbikgOiBuZXcgdmVjMygpO1xyXG4gIH1cclxuICBuZWcoKSB7XHJcbiAgICByZXR1cm4gbmV3IHZlYzMoLXRoaXMueCwgLXRoaXMueSwgLXRoaXMueik7XHJcbiAgfVxyXG4gIGRvdCh2ZWMpIHtcclxuICAgIHJldHVybiB0aGlzLnggKiB2ZWMueCArIHRoaXMueSAqIHZlYy55ICsgdGhpcy56ICogdmVjLno7XHJcbiAgfVxyXG4gIGNyb3NzKHZlYykge1xyXG4gICAgcmV0dXJuIG5ldyB2ZWMzKFxyXG4gICAgICB0aGlzLnkgKiB2ZWMueiAtIHRoaXMueiAqIHZlYy55LFxyXG4gICAgICB0aGlzLnogKiB2ZWMueCAtIHRoaXMueCAqIHZlYy56LFxyXG4gICAgICB0aGlzLnggKiB2ZWMueSAtIHRoaXMueSAqIHZlYy54XHJcbiAgICApO1xyXG4gIH1cclxuICBsZW4yKCkge1xyXG4gICAgcmV0dXJuIHRoaXMueCAqIHRoaXMueCArIHRoaXMueSAqIHRoaXMueSArIHRoaXMueiAqIHRoaXMuejtcclxuICB9XHJcbiAgbGVuKCkge1xyXG4gICAgcmV0dXJuIE1hdGguc3FydCh0aGlzLmxlbjIoKSk7XHJcbiAgfVxyXG4gIG5vcm1hbGl6ZSgpIHtcclxuICAgIHJldHVybiB0aGlzLmRpdih0aGlzLmxlbigpKTtcclxuICB9XHJcbiAgbGVycCh2ZWMsIGMgPSAwLjUpIHtcclxuICAgIHJldHVybiBuZXcgdmVjMyhcclxuICAgICAgdGhpcy54ICsgKHZlYy54IC0gdGhpcy54KSAqIGMsXHJcbiAgICAgIHRoaXMueSArICh2ZWMueSAtIHRoaXMueSkgKiBjLFxyXG4gICAgICB0aGlzLnogKyAodmVjLnogLSB0aGlzLnopICogY1xyXG4gICAgKTtcclxuICB9XHJcbiAgbXVsTWF0cihtKSB7XHJcbiAgICBsZXQgdyA9IHRoaXMueCAqIG1bMF1bM10gKyB0aGlzLnkgKiBtWzFdWzNdICsgdGhpcy56ICogbVsyXVszXSArIG1bM11bM107XHJcblxyXG4gICAgcmV0dXJuIG5ldyB2ZWMzKFxyXG4gICAgICAodGhpcy54ICogbVswXVswXSArIHRoaXMueSAqIG1bMV1bMF0gKyB0aGlzLnogKiBtWzJdWzBdICsgbVszXVswXSkgLyB3LFxyXG4gICAgICAodGhpcy54ICogbVswXVsxXSArIHRoaXMueSAqIG1bMV1bMV0gKyB0aGlzLnogKiBtWzJdWzFdICsgbVszXVsxXSkgLyB3LFxyXG4gICAgICAodGhpcy54ICogbVswXVsyXSArIHRoaXMueSAqIG1bMV1bMl0gKyB0aGlzLnogKiBtWzJdWzJdICsgbVszXVsyXSkgLyB3XHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgYW5nbGUodmVjLCB1cCA9IG5ldyB2ZWMzKDAsIDEsIDApKSB7XHJcbiAgICBpZiAodmVjLmxlbjIoKSA9PSAwIHx8IHRoaXMubGVuMigpID09IDApIHJldHVybiAwO1xyXG4gICAgbGV0IGNyb3NzID0gdGhpcy5jcm9zcyh2ZWMpO1xyXG4gICAgbGV0IGRvdCA9IHRoaXMuZG90KHZlYyk7XHJcblxyXG4gICAgbGV0IGNvc1RoID0gZG90IC8gKHRoaXMubGVuKCkgKiB2ZWMubGVuKCkpO1xyXG5cclxuICAgIGxldCBhbmdsZSA9IE1hdGguYWNvcyhjb3NUaCk7XHJcbiAgICBpZiAoY3Jvc3MuZG90KHVwKSA8IDApIGFuZ2xlID0gLWFuZ2xlO1xyXG5cclxuICAgIHJldHVybiBhbmdsZTtcclxuICB9XHJcbiAgZ2V0IHh4eCgpIHtcclxuICAgIHJldHVybiBuZXcgdmVjMyh0aGlzLngsIHRoaXMueCwgdGhpcy54KTtcclxuICB9XHJcbiAgZ2V0IHl5eSgpIHtcclxuICAgIHJldHVybiBuZXcgdmVjMyh0aGlzLnksIHRoaXMueSwgdGhpcy55KTtcclxuICB9XHJcbiAgZ2V0IHp6eigpIHtcclxuICAgIHJldHVybiBuZXcgdmVjMyh0aGlzLnosIHRoaXMueiwgdGhpcy56KTtcclxuICB9XHJcbiAgY29weSgpIHtcclxuICAgIHJldHVybiBuZXcgdmVjMyh0aGlzLngsIHRoaXMueSwgdGhpcy56KTtcclxuICB9XHJcbiAgLyogLi4uICovXHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyB2ZWM0IHtcclxuICBjb25zdHJ1Y3Rvcih4ID0gMCwgeSA9IDAsIHogPSAwLCB3ID0gMCkge1xyXG4gICAgdGhpcy54ID0geDtcclxuICAgIHRoaXMueSA9IHk7XHJcbiAgICB0aGlzLnogPSB6O1xyXG4gICAgdGhpcy53ID0gdztcclxuICB9XHJcblxyXG4gIGFkZCh2ZWMpIHtcclxuICAgIHJldHVybiBuZXcgdmVjNChcclxuICAgICAgdGhpcy54ICsgdmVjLngsXHJcbiAgICAgIHRoaXMueSArIHZlYy55LFxyXG4gICAgICB0aGlzLnogKyB2ZWMueixcclxuICAgICAgdGhpcy53ICsgdmVjLndcclxuICAgICk7XHJcbiAgfVxyXG4gIHN1Yih2ZWMpIHtcclxuICAgIHJldHVybiBuZXcgdmVjNChcclxuICAgICAgdGhpcy54IC0gdmVjLngsXHJcbiAgICAgIHRoaXMueSAtIHZlYy55LFxyXG4gICAgICB0aGlzLnogLSB2ZWMueixcclxuICAgICAgdGhpcy53IC0gdmVjLndcclxuICAgICk7XHJcbiAgfVxyXG4gIG11bChuKSB7XHJcbiAgICByZXR1cm4gbmV3IHZlYzQodGhpcy54ICogbiwgdGhpcy55ICogbiwgdGhpcy56ICogbiwgdGhpcy53ICogbik7XHJcbiAgfVxyXG4gIGRpdihuKSB7XHJcbiAgICByZXR1cm4gbmV3IHZlYzQodGhpcy54IC8gbiwgdGhpcy55IC8gbiwgdGhpcy56IC8gbiwgdGhpcy53IC8gbik7XHJcbiAgfVxyXG4gIG5lZygpIHtcclxuICAgIHJldHVybiBuZXcgdmVjNCgtdGhpcy54LCAtdGhpcy55LCAtdGhpcy56LCAtdGhpcy53KTtcclxuICB9XHJcbiAgZG90KHZlYykge1xyXG4gICAgcmV0dXJuIHRoaXMueCAqIHZlYy54ICsgdGhpcy55ICogdmVjLnkgKyB0aGlzLnogKiB2ZWMueiArIHRoaXMudyAqIHRoaXMudztcclxuICB9XHJcbiAgbGVuMigpIHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIHRoaXMueCAqIHRoaXMueCArIHRoaXMueSAqIHRoaXMueSArIHRoaXMueiAqIHRoaXMueiArIHRoaXMudyAqIHRoaXMud1xyXG4gICAgKTtcclxuICB9XHJcbiAgbGVuKCkge1xyXG4gICAgcmV0dXJuIE1hdGguc3FydCh0aGlzLmxlbjIoKSk7XHJcbiAgfVxyXG4gIG5vcm1hbGl6ZSgpIHtcclxuICAgIHJldHVybiB0aGlzLmRpdih0aGlzLmxlbigpKTtcclxuICB9XHJcbiAgbGVycCh2ZWMsIGMpIHtcclxuICAgIHJldHVybiBuZXcgdmVjMyhcclxuICAgICAgdGhpcy54ICsgKHZlYy54IC0gdGhpcy54KSAqIGMsXHJcbiAgICAgIHRoaXMueSArICh2ZWMueSAtIHRoaXMueSkgKiBjLFxyXG4gICAgICB0aGlzLnogKyAodmVjLnogLSB0aGlzLnopICogYyxcclxuICAgICAgdGhpcy53ICsgKHZlYy53IC0gdGhpcy53KSAqIGNcclxuICAgICk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgbWF0cjQge1xyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgbSA9IFtcclxuICAgICAgWzEsIDAsIDAsIDBdLFxyXG4gICAgICBbMCwgMSwgMCwgMF0sXHJcbiAgICAgIFswLCAwLCAxLCAwXSxcclxuICAgICAgWzAsIDAsIDAsIDFdLFxyXG4gICAgXVxyXG4gICkge1xyXG4gICAgdGhpc1swXSA9IFtdO1xyXG4gICAgdGhpc1sxXSA9IFtdO1xyXG4gICAgdGhpc1syXSA9IFtdO1xyXG4gICAgdGhpc1szXSA9IFtdO1xyXG5cclxuICAgIHRoaXNbMF1bMF0gPSBtWzBdWzBdO1xyXG4gICAgdGhpc1swXVsxXSA9IG1bMF1bMV07XHJcbiAgICB0aGlzWzBdWzJdID0gbVswXVsyXTtcclxuICAgIHRoaXNbMF1bM10gPSBtWzBdWzNdO1xyXG5cclxuICAgIHRoaXNbMV1bMF0gPSBtWzFdWzBdO1xyXG4gICAgdGhpc1sxXVsxXSA9IG1bMV1bMV07XHJcbiAgICB0aGlzWzFdWzJdID0gbVsxXVsyXTtcclxuICAgIHRoaXNbMV1bM10gPSBtWzFdWzNdO1xyXG5cclxuICAgIHRoaXNbMl1bMF0gPSBtWzJdWzBdO1xyXG4gICAgdGhpc1syXVsxXSA9IG1bMl1bMV07XHJcbiAgICB0aGlzWzJdWzJdID0gbVsyXVsyXTtcclxuICAgIHRoaXNbMl1bM10gPSBtWzJdWzNdO1xyXG5cclxuICAgIHRoaXNbM11bMF0gPSBtWzNdWzBdO1xyXG4gICAgdGhpc1szXVsxXSA9IG1bM11bMV07XHJcbiAgICB0aGlzWzNdWzJdID0gbVszXVsyXTtcclxuICAgIHRoaXNbM11bM10gPSBtWzNdWzNdO1xyXG4gIH1cclxuICBhKCkge1xyXG4gICAgcmV0dXJuIFtcclxuICAgICAgW3RoaXNbMF1bMF0sIHRoaXNbMF1bMV0sIHRoaXNbMF1bMl0sIHRoaXNbMF1bM11dLFxyXG4gICAgICBbdGhpc1sxXVswXSwgdGhpc1sxXVsxXSwgdGhpc1sxXVsyXSwgdGhpc1sxXVszXV0sXHJcbiAgICAgIFt0aGlzWzJdWzBdLCB0aGlzWzJdWzFdLCB0aGlzWzJdWzJdLCB0aGlzWzJdWzNdXSxcclxuICAgICAgW3RoaXNbM11bMF0sIHRoaXNbM11bMV0sIHRoaXNbM11bMl0sIHRoaXNbM11bM11dLFxyXG4gICAgXTtcclxuICB9XHJcbiAgdHJhbnNsYXRlKHZlYykge1xyXG4gICAgcmV0dXJuIG5ldyBtYXRyNChbXHJcbiAgICAgIFsxLCAwLCAwLCAwXSxcclxuICAgICAgWzAsIDEsIDAsIDBdLFxyXG4gICAgICBbMCwgMCwgMSwgMF0sXHJcbiAgICAgIFt2ZWMueCwgdmVjLnksIHZlYy56LCAxXSxcclxuICAgIF0pO1xyXG4gIH1cclxuXHJcbiAgc2NhbGUodmVjKSB7XHJcbiAgICByZXR1cm4gbmV3IG1hdHI0KFtcclxuICAgICAgW3ZlYy54LCAwLCAwLCAwXSxcclxuICAgICAgWzAsIHZlYy55LCAwLCAwXSxcclxuICAgICAgWzAsIDAsIHZlYy56LCAwXSxcclxuICAgICAgWzAsIDAsIDAsIDFdLFxyXG4gICAgXSk7XHJcbiAgfVxyXG4gIHJvdGF0ZVgoYW5nbGVJbkRlZ3JlZSkge1xyXG4gICAgbGV0IG0gPSBuZXcgbWF0cjQoKTtcclxuICAgIGxldCBhID0gKGFuZ2xlSW5EZWdyZWUgLyAxODApICogTWF0aC5QSTtcclxuICAgIGxldCBzaW5lID0gTWF0aC5zaW4oYSk7XHJcbiAgICBsZXQgY29zaW5lID0gTWF0aC5jb3MoYSk7XHJcblxyXG4gICAgbVsxXVsxXSA9IGNvc2luZTtcclxuICAgIG1bMl1bMl0gPSBjb3NpbmU7XHJcbiAgICBtWzFdWzJdID0gc2luZTtcclxuICAgIG1bMl1bMV0gPSAtc2luZTtcclxuICAgIHJldHVybiBtO1xyXG4gIH1cclxuICByb3RhdGVZKGFuZ2xlSW5EZWdyZWUpIHtcclxuICAgIGxldCBtID0gbmV3IG1hdHI0KCk7XHJcbiAgICBsZXQgYSA9IChhbmdsZUluRGVncmVlIC8gMTgwKSAqIE1hdGguUEk7XHJcbiAgICBsZXQgc2luZSA9IE1hdGguc2luKGEpO1xyXG4gICAgbGV0IGNvc2luZSA9IE1hdGguY29zKGEpO1xyXG5cclxuICAgIG1bMF1bMF0gPSBjb3NpbmU7XHJcbiAgICBtWzJdWzJdID0gY29zaW5lO1xyXG4gICAgbVswXVsyXSA9IC1zaW5lO1xyXG4gICAgbVsyXVswXSA9IHNpbmU7XHJcblxyXG4gICAgcmV0dXJuIG07XHJcbiAgfVxyXG4gIHJvdGF0ZVooYW5nbGVJbkRlZ3JlZSkge1xyXG4gICAgbGV0IG0gPSBuZXcgbWF0cjQoKTtcclxuICAgIGxldCBhID0gKGFuZ2xlSW5EZWdyZWUgLyAxODApICogTWF0aC5QSTtcclxuICAgIGxldCBzaW5lID0gTWF0aC5zaW4oYSk7XHJcbiAgICBsZXQgY29zaW5lID0gTWF0aC5jb3MoYSk7XHJcblxyXG4gICAgbVswXVswXSA9IGNvc2luZTtcclxuICAgIG1bMV1bMV0gPSBjb3NpbmU7XHJcbiAgICBtWzBdWzFdID0gc2luZTtcclxuICAgIG1bMV1bMF0gPSAtc2luZTtcclxuXHJcbiAgICByZXR1cm4gbTtcclxuICB9XHJcbiAgcm90YXRlKGFuZ2xlSW5EZWdyZWUsIHYpIHtcclxuICAgIGxldCBhID0gKGFuZ2xlSW5EZWdyZWUgLyAxODApICogTWF0aC5QSTtcclxuICAgIGxldCBzaSA9IE1hdGguc2luKGEpO1xyXG4gICAgbGV0IGNvID0gTWF0aC5jb3MoYSk7XHJcblxyXG4gICAgcmV0dXJuIG5ldyBtYXRyNChbXHJcbiAgICAgIFtcclxuICAgICAgICBjbyArIHYueCAqIHYueCAqICgxIC0gY28pLFxyXG4gICAgICAgIHYueCAqIHYueSAqICgxIC0gY28pICsgdi56ICogc2ksXHJcbiAgICAgICAgdi54ICogdi56ICogKDEgLSBjbykgLSB2LnkgKiBzaSxcclxuICAgICAgICAwLFxyXG4gICAgICBdLFxyXG4gICAgICBbXHJcbiAgICAgICAgdi55ICogdi54ICogKDEgLSBjbykgLSB2LnogKiBzaSxcclxuICAgICAgICBjbyArIHYueSAqIHYueSAqICgxIC0gY28pLFxyXG4gICAgICAgIHYueSAqIHYueiAqICgxIC0gY28pICsgdi54ICogc2ksXHJcbiAgICAgICAgMCxcclxuICAgICAgXSxcclxuICAgICAgW1xyXG4gICAgICAgIHYueiAqIHYueCAqICgxIC0gY28pICsgdi55ICogc2ksXHJcbiAgICAgICAgdi56ICogdi55ICogKDEgLSBjbykgLSB2LnggKiBzaSxcclxuICAgICAgICBjbyArIHYueiAqIHYueiAqICgxIC0gY28pLFxyXG4gICAgICAgIDAsXHJcbiAgICAgIF0sXHJcbiAgICAgIFswLCAwLCAwLCAxXSxcclxuICAgIF0pO1xyXG4gIH1cclxuICB0cmFuc3Bvc2UoKSB7XHJcbiAgICBsZXQgcmVzID0gbmV3IG1hdHI0KCk7XHJcblxyXG4gICAgKHJlc1swXVswXSA9IHRoaXNbMF1bMF0pLFxyXG4gICAgICAocmVzWzBdWzFdID0gdGhpc1sxXVswXSksXHJcbiAgICAgIChyZXNbMF1bMl0gPSB0aGlzWzJdWzBdKSxcclxuICAgICAgKHJlc1swXVszXSA9IHRoaXNbM11bMF0pO1xyXG4gICAgKHJlc1sxXVswXSA9IHRoaXNbMF1bMV0pLFxyXG4gICAgICAocmVzWzFdWzFdID0gdGhpc1sxXVsxXSksXHJcbiAgICAgIChyZXNbMV1bMl0gPSB0aGlzWzJdWzFdKSxcclxuICAgICAgKHJlc1sxXVszXSA9IHRoaXNbM11bMV0pO1xyXG4gICAgKHJlc1syXVswXSA9IHRoaXNbMF1bMl0pLFxyXG4gICAgICAocmVzWzJdWzFdID0gdGhpc1sxXVsyXSksXHJcbiAgICAgIChyZXNbMl1bMl0gPSB0aGlzWzJdWzJdKSxcclxuICAgICAgKHJlc1syXVszXSA9IHRoaXNbM11bMl0pO1xyXG4gICAgKHJlc1szXVswXSA9IHRoaXNbMF1bM10pLFxyXG4gICAgICAocmVzWzNdWzFdID0gdGhpc1sxXVszXSksXHJcbiAgICAgIChyZXNbM11bMl0gPSB0aGlzWzJdWzNdKSxcclxuICAgICAgKHJlc1szXVszXSA9IHRoaXNbM11bM10pO1xyXG5cclxuICAgIHJldHVybiByZXM7XHJcbiAgfVxyXG5cclxuICBkZXRlcm0zeDMoQTExLCBBMTIsIEExMywgQTIxLCBBMjIsIEEyMywgQTMxLCBBMzIsIEEzMykge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgQTExICogQTIyICogQTMzICtcclxuICAgICAgQTEyICogQTIzICogQTMxICtcclxuICAgICAgQTEzICogQTIxICogQTMyIC1cclxuICAgICAgQTExICogQTIzICogQTMyIC1cclxuICAgICAgQTEyICogQTIxICogQTMzIC1cclxuICAgICAgQTEzICogQTIyICogQTMxXHJcbiAgICApO1xyXG4gIH1cclxuICBkZXRlcm0oKSB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICArdGhpc1swXVswXSAqXHJcbiAgICAgICAgdGhpcy5kZXRlcm0zeDMoXHJcbiAgICAgICAgICB0aGlzWzFdWzFdLFxyXG4gICAgICAgICAgdGhpc1sxXVsyXSxcclxuICAgICAgICAgIHRoaXNbMV1bM10sXHJcbiAgICAgICAgICB0aGlzWzJdWzFdLFxyXG4gICAgICAgICAgdGhpc1syXVsyXSxcclxuICAgICAgICAgIHRoaXNbMl1bM10sXHJcbiAgICAgICAgICB0aGlzWzNdWzFdLFxyXG4gICAgICAgICAgdGhpc1szXVsyXSxcclxuICAgICAgICAgIHRoaXNbM11bM11cclxuICAgICAgICApICtcclxuICAgICAgLXRoaXNbMF1bMV0gKlxyXG4gICAgICAgIHRoaXMuZGV0ZXJtM3gzKFxyXG4gICAgICAgICAgdGhpc1sxXVswXSxcclxuICAgICAgICAgIHRoaXNbMV1bMl0sXHJcbiAgICAgICAgICB0aGlzWzFdWzNdLFxyXG4gICAgICAgICAgdGhpc1syXVswXSxcclxuICAgICAgICAgIHRoaXNbMl1bMl0sXHJcbiAgICAgICAgICB0aGlzWzJdWzNdLFxyXG4gICAgICAgICAgdGhpc1szXVswXSxcclxuICAgICAgICAgIHRoaXNbM11bMl0sXHJcbiAgICAgICAgICB0aGlzWzNdWzNdXHJcbiAgICAgICAgKSArXHJcbiAgICAgICt0aGlzWzBdWzJdICpcclxuICAgICAgICB0aGlzLmRldGVybTN4MyhcclxuICAgICAgICAgIHRoaXNbMV1bMF0sXHJcbiAgICAgICAgICB0aGlzWzFdWzFdLFxyXG4gICAgICAgICAgdGhpc1sxXVszXSxcclxuICAgICAgICAgIHRoaXNbMl1bMF0sXHJcbiAgICAgICAgICB0aGlzWzJdWzFdLFxyXG4gICAgICAgICAgdGhpc1syXVszXSxcclxuICAgICAgICAgIHRoaXNbM11bMF0sXHJcbiAgICAgICAgICB0aGlzWzNdWzFdLFxyXG4gICAgICAgICAgdGhpc1szXVszXVxyXG4gICAgICAgICkgK1xyXG4gICAgICAtdGhpc1swXVszXSAqXHJcbiAgICAgICAgdGhpcy5kZXRlcm0zeDMoXHJcbiAgICAgICAgICB0aGlzWzFdWzBdLFxyXG4gICAgICAgICAgdGhpc1sxXVsxXSxcclxuICAgICAgICAgIHRoaXNbMV1bMl0sXHJcbiAgICAgICAgICB0aGlzWzJdWzBdLFxyXG4gICAgICAgICAgdGhpc1syXVsxXSxcclxuICAgICAgICAgIHRoaXNbMl1bMl0sXHJcbiAgICAgICAgICB0aGlzWzNdWzBdLFxyXG4gICAgICAgICAgdGhpc1szXVsxXSxcclxuICAgICAgICAgIHRoaXNbM11bMl1cclxuICAgICAgICApXHJcbiAgICApO1xyXG4gIH1cclxuICBpbnZlcnNlKCkge1xyXG4gICAgbGV0IGRldCA9IHRoaXMuZGV0ZXJtKCk7XHJcbiAgICBsZXQgciA9IG5ldyBtYXRyNCgpO1xyXG5cclxuICAgIGlmIChkZXQgPT0gMCkgcmV0dXJuIG5ldyBtYXRyNCgpO1xyXG5cclxuICAgIC8qIGJ1aWxkIGFkam9pbnQgbWF0cml4ICovXHJcbiAgICByWzBdWzBdID1cclxuICAgICAgK3RoaXMuZGV0ZXJtM3gzKFxyXG4gICAgICAgIHRoaXNbMV1bMV0sXHJcbiAgICAgICAgdGhpc1sxXVsyXSxcclxuICAgICAgICB0aGlzWzFdWzNdLFxyXG4gICAgICAgIHRoaXNbMl1bMV0sXHJcbiAgICAgICAgdGhpc1syXVsyXSxcclxuICAgICAgICB0aGlzWzJdWzNdLFxyXG4gICAgICAgIHRoaXNbM11bMV0sXHJcbiAgICAgICAgdGhpc1szXVsyXSxcclxuICAgICAgICB0aGlzWzNdWzNdXHJcbiAgICAgICkgLyBkZXQ7XHJcblxyXG4gICAgclsxXVswXSA9XHJcbiAgICAgIC10aGlzLmRldGVybTN4MyhcclxuICAgICAgICB0aGlzWzFdWzBdLFxyXG4gICAgICAgIHRoaXNbMV1bMl0sXHJcbiAgICAgICAgdGhpc1sxXVszXSxcclxuICAgICAgICB0aGlzWzJdWzBdLFxyXG4gICAgICAgIHRoaXNbMl1bMl0sXHJcbiAgICAgICAgdGhpc1syXVszXSxcclxuICAgICAgICB0aGlzWzNdWzBdLFxyXG4gICAgICAgIHRoaXNbM11bMl0sXHJcbiAgICAgICAgdGhpc1szXVszXVxyXG4gICAgICApIC8gZGV0O1xyXG5cclxuICAgIHJbMl1bMF0gPVxyXG4gICAgICArdGhpcy5kZXRlcm0zeDMoXHJcbiAgICAgICAgdGhpc1sxXVswXSxcclxuICAgICAgICB0aGlzWzFdWzFdLFxyXG4gICAgICAgIHRoaXNbMV1bM10sXHJcbiAgICAgICAgdGhpc1syXVswXSxcclxuICAgICAgICB0aGlzWzJdWzFdLFxyXG4gICAgICAgIHRoaXNbMl1bM10sXHJcbiAgICAgICAgdGhpc1szXVswXSxcclxuICAgICAgICB0aGlzWzNdWzFdLFxyXG4gICAgICAgIHRoaXNbM11bM11cclxuICAgICAgKSAvIGRldDtcclxuXHJcbiAgICByWzNdWzBdID1cclxuICAgICAgLXRoaXMuZGV0ZXJtM3gzKFxyXG4gICAgICAgIHRoaXNbMV1bMF0sXHJcbiAgICAgICAgdGhpc1sxXVsxXSxcclxuICAgICAgICB0aGlzWzFdWzJdLFxyXG4gICAgICAgIHRoaXNbMl1bMF0sXHJcbiAgICAgICAgdGhpc1syXVsxXSxcclxuICAgICAgICB0aGlzWzJdWzJdLFxyXG4gICAgICAgIHRoaXNbM11bMF0sXHJcbiAgICAgICAgdGhpc1szXVsxXSxcclxuICAgICAgICB0aGlzWzNdWzJdXHJcbiAgICAgICkgLyBkZXQ7XHJcblxyXG4gICAgclswXVsxXSA9XHJcbiAgICAgIC10aGlzLmRldGVybTN4MyhcclxuICAgICAgICB0aGlzWzBdWzFdLFxyXG4gICAgICAgIHRoaXNbMF1bMl0sXHJcbiAgICAgICAgdGhpc1swXVszXSxcclxuICAgICAgICB0aGlzWzJdWzFdLFxyXG4gICAgICAgIHRoaXNbMl1bMl0sXHJcbiAgICAgICAgdGhpc1syXVszXSxcclxuICAgICAgICB0aGlzWzNdWzFdLFxyXG4gICAgICAgIHRoaXNbM11bMl0sXHJcbiAgICAgICAgdGhpc1szXVszXVxyXG4gICAgICApIC8gZGV0O1xyXG5cclxuICAgIHJbMV1bMV0gPVxyXG4gICAgICArdGhpcy5kZXRlcm0zeDMoXHJcbiAgICAgICAgdGhpc1swXVswXSxcclxuICAgICAgICB0aGlzWzBdWzJdLFxyXG4gICAgICAgIHRoaXNbMF1bM10sXHJcbiAgICAgICAgdGhpc1syXVswXSxcclxuICAgICAgICB0aGlzWzJdWzJdLFxyXG4gICAgICAgIHRoaXNbMl1bM10sXHJcbiAgICAgICAgdGhpc1szXVswXSxcclxuICAgICAgICB0aGlzWzNdWzJdLFxyXG4gICAgICAgIHRoaXNbM11bM11cclxuICAgICAgKSAvIGRldDtcclxuXHJcbiAgICByWzJdWzFdID1cclxuICAgICAgLXRoaXMuZGV0ZXJtM3gzKFxyXG4gICAgICAgIHRoaXNbMF1bMF0sXHJcbiAgICAgICAgdGhpc1swXVsxXSxcclxuICAgICAgICB0aGlzWzBdWzNdLFxyXG4gICAgICAgIHRoaXNbMl1bMF0sXHJcbiAgICAgICAgdGhpc1syXVsxXSxcclxuICAgICAgICB0aGlzWzJdWzNdLFxyXG4gICAgICAgIHRoaXNbM11bMF0sXHJcbiAgICAgICAgdGhpc1szXVsxXSxcclxuICAgICAgICB0aGlzWzNdWzNdXHJcbiAgICAgICkgLyBkZXQ7XHJcblxyXG4gICAgclszXVsxXSA9XHJcbiAgICAgICt0aGlzLmRldGVybTN4MyhcclxuICAgICAgICB0aGlzWzBdWzBdLFxyXG4gICAgICAgIHRoaXNbMF1bMV0sXHJcbiAgICAgICAgdGhpc1swXVsyXSxcclxuICAgICAgICB0aGlzWzJdWzBdLFxyXG4gICAgICAgIHRoaXNbMl1bMV0sXHJcbiAgICAgICAgdGhpc1syXVsyXSxcclxuICAgICAgICB0aGlzWzNdWzBdLFxyXG4gICAgICAgIHRoaXNbM11bMV0sXHJcbiAgICAgICAgdGhpc1szXVsyXVxyXG4gICAgICApIC8gZGV0O1xyXG5cclxuICAgIHJbMF1bMl0gPVxyXG4gICAgICArdGhpcy5kZXRlcm0zeDMoXHJcbiAgICAgICAgdGhpc1swXVsxXSxcclxuICAgICAgICB0aGlzWzBdWzJdLFxyXG4gICAgICAgIHRoaXNbMF1bM10sXHJcbiAgICAgICAgdGhpc1sxXVsxXSxcclxuICAgICAgICB0aGlzWzFdWzJdLFxyXG4gICAgICAgIHRoaXNbMV1bM10sXHJcbiAgICAgICAgdGhpc1szXVsxXSxcclxuICAgICAgICB0aGlzWzNdWzJdLFxyXG4gICAgICAgIHRoaXNbM11bM11cclxuICAgICAgKSAvIGRldDtcclxuXHJcbiAgICByWzFdWzJdID1cclxuICAgICAgLXRoaXMuZGV0ZXJtM3gzKFxyXG4gICAgICAgIHRoaXNbMF1bMF0sXHJcbiAgICAgICAgdGhpc1swXVsyXSxcclxuICAgICAgICB0aGlzWzBdWzNdLFxyXG4gICAgICAgIHRoaXNbMV1bMF0sXHJcbiAgICAgICAgdGhpc1sxXVsyXSxcclxuICAgICAgICB0aGlzWzFdWzNdLFxyXG4gICAgICAgIHRoaXNbM11bMF0sXHJcbiAgICAgICAgdGhpc1szXVsyXSxcclxuICAgICAgICB0aGlzWzNdWzNdXHJcbiAgICAgICkgLyBkZXQ7XHJcblxyXG4gICAgclsyXVsyXSA9XHJcbiAgICAgICt0aGlzLmRldGVybTN4MyhcclxuICAgICAgICB0aGlzWzBdWzBdLFxyXG4gICAgICAgIHRoaXNbMF1bMV0sXHJcbiAgICAgICAgdGhpc1swXVszXSxcclxuICAgICAgICB0aGlzWzFdWzBdLFxyXG4gICAgICAgIHRoaXNbMV1bMV0sXHJcbiAgICAgICAgdGhpc1sxXVszXSxcclxuICAgICAgICB0aGlzWzNdWzBdLFxyXG4gICAgICAgIHRoaXNbM11bMV0sXHJcbiAgICAgICAgdGhpc1szXVszXVxyXG4gICAgICApIC8gZGV0O1xyXG5cclxuICAgIHJbM11bMl0gPVxyXG4gICAgICAtdGhpcy5kZXRlcm0zeDMoXHJcbiAgICAgICAgdGhpc1swXVswXSxcclxuICAgICAgICB0aGlzWzBdWzFdLFxyXG4gICAgICAgIHRoaXNbMF1bMl0sXHJcbiAgICAgICAgdGhpc1sxXVswXSxcclxuICAgICAgICB0aGlzWzFdWzFdLFxyXG4gICAgICAgIHRoaXNbMV1bMl0sXHJcbiAgICAgICAgdGhpc1szXVswXSxcclxuICAgICAgICB0aGlzWzNdWzFdLFxyXG4gICAgICAgIHRoaXNbM11bMl1cclxuICAgICAgKSAvIGRldDtcclxuXHJcbiAgICByWzBdWzNdID1cclxuICAgICAgLXRoaXMuZGV0ZXJtM3gzKFxyXG4gICAgICAgIHRoaXNbMF1bMV0sXHJcbiAgICAgICAgdGhpc1swXVsyXSxcclxuICAgICAgICB0aGlzWzBdWzNdLFxyXG4gICAgICAgIHRoaXNbMV1bMV0sXHJcbiAgICAgICAgdGhpc1sxXVsyXSxcclxuICAgICAgICB0aGlzWzFdWzNdLFxyXG4gICAgICAgIHRoaXNbMl1bMV0sXHJcbiAgICAgICAgdGhpc1syXVsyXSxcclxuICAgICAgICB0aGlzWzJdWzNdXHJcbiAgICAgICkgLyBkZXQ7XHJcblxyXG4gICAgclsxXVszXSA9XHJcbiAgICAgICt0aGlzLmRldGVybTN4MyhcclxuICAgICAgICB0aGlzWzBdWzBdLFxyXG4gICAgICAgIHRoaXNbMF1bMl0sXHJcbiAgICAgICAgdGhpc1swXVszXSxcclxuICAgICAgICB0aGlzWzFdWzBdLFxyXG4gICAgICAgIHRoaXNbMV1bMl0sXHJcbiAgICAgICAgdGhpc1sxXVszXSxcclxuICAgICAgICB0aGlzWzJdWzBdLFxyXG4gICAgICAgIHRoaXNbMl1bMl0sXHJcbiAgICAgICAgdGhpc1syXVszXVxyXG4gICAgICApIC8gZGV0O1xyXG5cclxuICAgIHJbMl1bM10gPVxyXG4gICAgICAtdGhpcy5kZXRlcm0zeDMoXHJcbiAgICAgICAgdGhpc1swXVswXSxcclxuICAgICAgICB0aGlzWzBdWzFdLFxyXG4gICAgICAgIHRoaXNbMF1bM10sXHJcbiAgICAgICAgdGhpc1sxXVswXSxcclxuICAgICAgICB0aGlzWzFdWzFdLFxyXG4gICAgICAgIHRoaXNbMV1bM10sXHJcbiAgICAgICAgdGhpc1syXVswXSxcclxuICAgICAgICB0aGlzWzJdWzFdLFxyXG4gICAgICAgIHRoaXNbMl1bM11cclxuICAgICAgKSAvIGRldDtcclxuXHJcbiAgICByWzNdWzNdID1cclxuICAgICAgK3RoaXMuZGV0ZXJtM3gzKFxyXG4gICAgICAgIHRoaXNbMF1bMF0sXHJcbiAgICAgICAgdGhpc1swXVsxXSxcclxuICAgICAgICB0aGlzWzBdWzJdLFxyXG4gICAgICAgIHRoaXNbMV1bMF0sXHJcbiAgICAgICAgdGhpc1sxXVsxXSxcclxuICAgICAgICB0aGlzWzFdWzJdLFxyXG4gICAgICAgIHRoaXNbMl1bMF0sXHJcbiAgICAgICAgdGhpc1syXVsxXSxcclxuICAgICAgICB0aGlzWzJdWzJdXHJcbiAgICAgICkgLyBkZXQ7XHJcblxyXG4gICAgcmV0dXJuIHI7XHJcbiAgfVxyXG4gIGFkZChtKSB7XHJcbiAgICBsZXQgciA9IG5ldyBtYXRyNCgpO1xyXG5cclxuICAgIHJbMF1bMF0gPSB0aGlzWzBdWzBdICsgbVswXVswXTtcclxuICAgIHJbMF1bMV0gPSB0aGlzWzBdWzFdICsgbVswXVsxXTtcclxuICAgIHJbMF1bMl0gPSB0aGlzWzBdWzJdICsgbVswXVsyXTtcclxuICAgIHJbMF1bM10gPSB0aGlzWzBdWzNdICsgbVswXVszXTtcclxuICAgIHJbMV1bMF0gPSB0aGlzWzFdWzBdICsgbVsxXVswXTtcclxuICAgIHJbMV1bMV0gPSB0aGlzWzFdWzFdICsgbVsxXVsxXTtcclxuICAgIHJbMV1bMl0gPSB0aGlzWzFdWzJdICsgbVsxXVsyXTtcclxuICAgIHJbMV1bM10gPSB0aGlzWzFdWzNdICsgbVsxXVszXTtcclxuICAgIHJbMl1bMF0gPSB0aGlzWzJdWzBdICsgbVsyXVswXTtcclxuICAgIHJbMl1bMV0gPSB0aGlzWzJdWzFdICsgbVsyXVsxXTtcclxuICAgIHJbMl1bMl0gPSB0aGlzWzJdWzJdICsgbVsyXVsyXTtcclxuICAgIHJbMl1bM10gPSB0aGlzWzJdWzNdICsgbVsyXVszXTtcclxuICAgIHJbM11bMF0gPSB0aGlzWzNdWzBdICsgbVszXVswXTtcclxuICAgIHJbM11bMV0gPSB0aGlzWzNdWzFdICsgbVszXVsxXTtcclxuICAgIHJbM11bMl0gPSB0aGlzWzNdWzJdICsgbVszXVsyXTtcclxuICAgIHJbM11bM10gPSB0aGlzWzNdWzNdICsgbVszXVszXTtcclxuICAgIHJldHVybiByO1xyXG4gIH1cclxuICBtdWwobSkge1xyXG4gICAgbGV0IHIgPSBuZXcgbWF0cjQoKTtcclxuXHJcbiAgICByWzBdWzBdID1cclxuICAgICAgdGhpc1swXVswXSAqIG1bMF1bMF0gK1xyXG4gICAgICB0aGlzWzBdWzFdICogbVsxXVswXSArXHJcbiAgICAgIHRoaXNbMF1bMl0gKiBtWzJdWzBdICtcclxuICAgICAgdGhpc1swXVszXSAqIG1bM11bMF07XHJcbiAgICByWzBdWzFdID1cclxuICAgICAgdGhpc1swXVswXSAqIG1bMF1bMV0gK1xyXG4gICAgICB0aGlzWzBdWzFdICogbVsxXVsxXSArXHJcbiAgICAgIHRoaXNbMF1bMl0gKiBtWzJdWzFdICtcclxuICAgICAgdGhpc1swXVszXSAqIG1bM11bMV07XHJcbiAgICByWzBdWzJdID1cclxuICAgICAgdGhpc1swXVswXSAqIG1bMF1bMl0gK1xyXG4gICAgICB0aGlzWzBdWzFdICogbVsxXVsyXSArXHJcbiAgICAgIHRoaXNbMF1bMl0gKiBtWzJdWzJdICtcclxuICAgICAgdGhpc1swXVszXSAqIG1bM11bMl07XHJcbiAgICByWzBdWzNdID1cclxuICAgICAgdGhpc1swXVswXSAqIG1bMF1bM10gK1xyXG4gICAgICB0aGlzWzBdWzFdICogbVsxXVszXSArXHJcbiAgICAgIHRoaXNbMF1bMl0gKiBtWzJdWzNdICtcclxuICAgICAgdGhpc1swXVszXSAqIG1bM11bM107XHJcblxyXG4gICAgclsxXVswXSA9XHJcbiAgICAgIHRoaXNbMV1bMF0gKiBtWzBdWzBdICtcclxuICAgICAgdGhpc1sxXVsxXSAqIG1bMV1bMF0gK1xyXG4gICAgICB0aGlzWzFdWzJdICogbVsyXVswXSArXHJcbiAgICAgIHRoaXNbMV1bM10gKiBtWzNdWzBdO1xyXG4gICAgclsxXVsxXSA9XHJcbiAgICAgIHRoaXNbMV1bMF0gKiBtWzBdWzFdICtcclxuICAgICAgdGhpc1sxXVsxXSAqIG1bMV1bMV0gK1xyXG4gICAgICB0aGlzWzFdWzJdICogbVsyXVsxXSArXHJcbiAgICAgIHRoaXNbMV1bM10gKiBtWzNdWzFdO1xyXG4gICAgclsxXVsyXSA9XHJcbiAgICAgIHRoaXNbMV1bMF0gKiBtWzBdWzJdICtcclxuICAgICAgdGhpc1sxXVsxXSAqIG1bMV1bMl0gK1xyXG4gICAgICB0aGlzWzFdWzJdICogbVsyXVsyXSArXHJcbiAgICAgIHRoaXNbMV1bM10gKiBtWzNdWzJdO1xyXG4gICAgclsxXVszXSA9XHJcbiAgICAgIHRoaXNbMV1bMF0gKiBtWzBdWzNdICtcclxuICAgICAgdGhpc1sxXVsxXSAqIG1bMV1bM10gK1xyXG4gICAgICB0aGlzWzFdWzJdICogbVsyXVszXSArXHJcbiAgICAgIHRoaXNbMV1bM10gKiBtWzNdWzNdO1xyXG5cclxuICAgIHJbMl1bMF0gPVxyXG4gICAgICB0aGlzWzJdWzBdICogbVswXVswXSArXHJcbiAgICAgIHRoaXNbMl1bMV0gKiBtWzFdWzBdICtcclxuICAgICAgdGhpc1syXVsyXSAqIG1bMl1bMF0gK1xyXG4gICAgICB0aGlzWzJdWzNdICogbVszXVswXTtcclxuICAgIHJbMl1bMV0gPVxyXG4gICAgICB0aGlzWzJdWzBdICogbVswXVsxXSArXHJcbiAgICAgIHRoaXNbMl1bMV0gKiBtWzFdWzFdICtcclxuICAgICAgdGhpc1syXVsyXSAqIG1bMl1bMV0gK1xyXG4gICAgICB0aGlzWzJdWzNdICogbVszXVsxXTtcclxuICAgIHJbMl1bMl0gPVxyXG4gICAgICB0aGlzWzJdWzBdICogbVswXVsyXSArXHJcbiAgICAgIHRoaXNbMl1bMV0gKiBtWzFdWzJdICtcclxuICAgICAgdGhpc1syXVsyXSAqIG1bMl1bMl0gK1xyXG4gICAgICB0aGlzWzJdWzNdICogbVszXVsyXTtcclxuICAgIHJbMl1bM10gPVxyXG4gICAgICB0aGlzWzJdWzBdICogbVswXVszXSArXHJcbiAgICAgIHRoaXNbMl1bMV0gKiBtWzFdWzNdICtcclxuICAgICAgdGhpc1syXVsyXSAqIG1bMl1bM10gK1xyXG4gICAgICB0aGlzWzJdWzNdICogbVszXVszXTtcclxuXHJcbiAgICByWzNdWzBdID1cclxuICAgICAgdGhpc1szXVswXSAqIG1bMF1bMF0gK1xyXG4gICAgICB0aGlzWzNdWzFdICogbVsxXVswXSArXHJcbiAgICAgIHRoaXNbM11bMl0gKiBtWzJdWzBdICtcclxuICAgICAgdGhpc1szXVszXSAqIG1bM11bMF07XHJcbiAgICByWzNdWzFdID1cclxuICAgICAgdGhpc1szXVswXSAqIG1bMF1bMV0gK1xyXG4gICAgICB0aGlzWzNdWzFdICogbVsxXVsxXSArXHJcbiAgICAgIHRoaXNbM11bMl0gKiBtWzJdWzFdICtcclxuICAgICAgdGhpc1szXVszXSAqIG1bM11bMV07XHJcbiAgICByWzNdWzJdID1cclxuICAgICAgdGhpc1szXVswXSAqIG1bMF1bMl0gK1xyXG4gICAgICB0aGlzWzNdWzFdICogbVsxXVsyXSArXHJcbiAgICAgIHRoaXNbM11bMl0gKiBtWzJdWzJdICtcclxuICAgICAgdGhpc1szXVszXSAqIG1bM11bMl07XHJcbiAgICByWzNdWzNdID1cclxuICAgICAgdGhpc1szXVswXSAqIG1bMF1bM10gK1xyXG4gICAgICB0aGlzWzNdWzFdICogbVsxXVszXSArXHJcbiAgICAgIHRoaXNbM11bMl0gKiBtWzJdWzNdICtcclxuICAgICAgdGhpc1szXVszXSAqIG1bM11bM107XHJcblxyXG4gICAgcmV0dXJuIHI7XHJcbiAgfVxyXG4gIHZpZXcobG9jLCBhdCwgdXAxKSB7XHJcbiAgICBsZXQgZGlyID0gYXQuc3ViKGxvYykubm9ybWFsaXplKCksXHJcbiAgICAgIHJpZ2h0ID0gZGlyLmNyb3NzKHVwMSkubm9ybWFsaXplKCksXHJcbiAgICAgIHVwID0gcmlnaHQuY3Jvc3MoZGlyKTtcclxuXHJcbiAgICByZXR1cm4gbmV3IG1hdHI0KFtcclxuICAgICAgW3JpZ2h0LngsIHVwLngsIC1kaXIueCwgMF0sXHJcbiAgICAgIFtyaWdodC55LCB1cC55LCAtZGlyLnksIDBdLFxyXG4gICAgICBbcmlnaHQueiwgdXAueiwgLWRpci56LCAwXSxcclxuICAgICAgWy1sb2MuZG90KHJpZ2h0KSwgLWxvYy5kb3QodXApLCBsb2MuZG90KGRpciksIDFdLFxyXG4gICAgXSk7XHJcbiAgfVxyXG4gIG9ydGhvKGxlZnQsIHJpZ2h0LCBib3R0b20sIHRvcCwgbmVhciwgZmFyKSB7XHJcbiAgICByZXR1cm4gbmV3IG1hdHI0KFtcclxuICAgICAgWzIgLyAocmlnaHQgLSBsZWZ0KSwgMCwgMCwgMF0sXHJcbiAgICAgIFswLCAyIC8gKHRvcCAtIGJvdHRvbSksIDAsIDBdLFxyXG4gICAgICBbMCwgMCwgLTIgLyAoZmFyIC0gbmVhciksIDBdLFxyXG4gICAgICBbXHJcbiAgICAgICAgLShyaWdodCArIGxlZnQpIC8gKHJpZ2h0IC0gbGVmdCksXHJcbiAgICAgICAgLSh0b3AgKyBib3R0b20pIC8gKHRvcCAtIGJvdHRvbSksXHJcbiAgICAgICAgLShmYXIgKyBuZWFyKSAvIChmYXIgLSBuZWFyKSxcclxuICAgICAgICAxLFxyXG4gICAgICBdLFxyXG4gICAgXSk7XHJcbiAgfVxyXG4gIGZydXN0dW0obGVmdCwgcmlnaHQsIGJvdHRvbSwgdG9wLCBuZWFyLCBmYXIpIHtcclxuICAgIHJldHVybiBuZXcgbWF0cjQoW1xyXG4gICAgICBbKDIgKiBuZWFyKSAvIChyaWdodCAtIGxlZnQpLCAwLCAwLCAwXSxcclxuICAgICAgWzAsICgyICogbmVhcikgLyAodG9wIC0gYm90dG9tKSwgMCwgMF0sXHJcbiAgICAgIFtcclxuICAgICAgICAocmlnaHQgKyBsZWZ0KSAvIChyaWdodCAtIGxlZnQpLFxyXG4gICAgICAgICh0b3AgKyBib3R0b20pIC8gKHRvcCAtIGJvdHRvbSksXHJcbiAgICAgICAgLShmYXIgKyBuZWFyKSAvIChmYXIgLSBuZWFyKSxcclxuICAgICAgICAtMSxcclxuICAgICAgXSxcclxuICAgICAgWzAsIDAsIC0oMiAqIG5lYXIgKiBmYXIpIC8gKGZhciAtIG5lYXIpLCAwXSxcclxuICAgIF0pO1xyXG4gIH1cclxuICAvKlxyXG5sZXJwKCBNQVRSIE0xLCBNQVRSIE0yLCBEQkwgQyApXHJcbntcclxuICByZXR1cm4gTWF0clNldChcclxuICAgIExFUlAoTTFbMF1bMF0sIE0yWzBdWzBdLCBDKSwgTEVSUChNMVswXVsxXSwgTTJbMF1bMV0sIEMpLCBMRVJQKE0xWzBdWzJdLCBNMlswXVsyXSwgQyksIExFUlAoTTFbMF1bM10sIE0yWzBdWzNdLCBDKSwgXHJcbiAgICBMRVJQKE0xWzFdWzBdLCBNMlsxXVswXSwgQyksIExFUlAoTTFbMV1bMV0sIE0yWzFdWzFdLCBDKSwgTEVSUChNMVsxXVsyXSwgTTJbMV1bMl0sIEMpLCBMRVJQKE0xWzFdWzNdLCBNMlsxXVszXSwgQyksIFxyXG4gICAgTEVSUChNMVsyXVswXSwgTTJbMl1bMF0sIEMpLCBMRVJQKE0xWzJdWzFdLCBNMlsyXVsxXSwgQyksIExFUlAoTTFbMl1bMl0sIE0yWzJdWzJdLCBDKSwgTEVSUChNMVsyXVszXSwgTTJbMl1bM10sIEMpLCBcclxuICAgIExFUlAoTTFbM11bMF0sIE0yWzNdWzBdLCBDKSwgTEVSUChNMVszXVsxXSwgTTJbM11bMV0sIEMpLCBMRVJQKE0xWzNdWzJdLCBNMlszXVsyXSwgQyksIExFUlAoTTFbM11bM10sIE0yWzNdWzNdLCBDKSBcclxuICApO1xyXG59XHJcbiovXHJcbn1cclxuIiwiaW1wb3J0IHsgdmVjMywgbWF0cjQgfSBmcm9tIFwiLi9tdGguanNcIjtcclxuaW1wb3J0IHsgY2FtZXJhIH0gZnJvbSBcIi4vY2FtZXJhLmpzXCI7XHJcbmV4cG9ydCBsZXQgaXNQYXVzZSA9IGZhbHNlO1xyXG5leHBvcnQgbGV0IGlzV2Fsa2luZyA9IHRydWU7IC8vID0gZmFsc2U7XHJcbmV4cG9ydCBsZXQga2V5cyA9IFtdO1xyXG5leHBvcnQgbGV0IG1vdXNlID0ge1xyXG4gIHg6IDAsXHJcbiAgeTogMCxcclxuICBzYXZlZFg6IDAsXHJcbiAgc2F2ZWRZOiAwLFxyXG4gIHpvb206IDEsXHJcbiAgZHg6IDAsXHJcbiAgZHk6IDAsXHJcbiAgZHo6IDAsXHJcbiAgaXNEb3duOiBmYWxzZSxcclxuICBpc1JEb3duOiBmYWxzZSxcclxufTtcclxuXHJcbmV4cG9ydCBsZXQgY2FtID0gbmV3IGNhbWVyYSgpO1xyXG4vL2NhbS4gKG5ldyB2ZWMzKDE4LCAxMCwgMTApLCBuZXcgdmVjMygwLCA4LCAtNSksIG5ldyB2ZWMzKDAsIDEsIDApKTtcclxuLypcclxuY2FtLmNhbVNldChcclxuICBuZXcgdmVjMyg2MiwgLTE2LCA2NyksXHJcbiAgbmV3IHZlYzMoMjgsIDM5LCAtNiksXHJcbiAgbmV3IHZlYzMoMCwgMSwgMCksXHJcbiAgbmV3IHZlYzMoMiwgMiwgMiksXHJcbiAgbmV3IHZlYzMoMCwgMS41LCAwKVxyXG4pO1xyXG4qL1xyXG5jYW0uY2FtU2V0KFxyXG4gIG5ldyB2ZWMzKDAsIDIuNSwgMCksXHJcbiAgbmV3IHZlYzMoMCwgMCwgLTYpLFxyXG4gIG5ldyB2ZWMzKDAsIDEsIDApLFxyXG4gIG5ldyB2ZWMzKDEsIDEsIDEpLFxyXG4gIG5ldyB2ZWMzKDAsIDAuOCwgMClcclxuKTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBoYW5kbGVNb3VzZU1vdmUoZXZlbnQpIHtcclxuICBtb3VzZS5keCA9IGV2ZW50LnBhZ2VYIC0gbW91c2UueDtcclxuICBtb3VzZS5keSA9IGV2ZW50LnBhZ2VZIC0gbW91c2UueTtcclxuICBtb3VzZS54ID0gZXZlbnQucGFnZVg7XHJcbiAgbW91c2UueSA9IGV2ZW50LnBhZ2VZO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBoYW5kbGVQYXVzZSgpIHtcclxuICBpc1BhdXNlID0gIWlzUGF1c2U7XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIGhhbmRsZU1vdXNlRG93bihldmVudCkge1xyXG4gIGlmIChldmVudC5idXR0b24gPT0gMCkgbW91c2UuaXNEb3duID0gdHJ1ZTtcclxuICBlbHNlIGlmIChldmVudC5idXR0b24gPT0gMikgbW91c2UuaXNSRG93biA9IHRydWU7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBoYW5kbGVNb3VzZVVwKGV2ZW50KSB7XHJcbiAgLy8gbW91c2Uuc2F2ZWRYID0gZXZlbnQucGFnZVg7XHJcbiAgLy9tb3VzZS5zYXZlZFkgPSBldmVudC5wYWdlWTtcclxuICBpZiAoZXZlbnQuYnV0dG9uID09IDApIG1vdXNlLmlzRG93biA9IGZhbHNlO1xyXG4gIGVsc2UgaWYgKGV2ZW50LmJ1dHRvbiA9PSAyKSBtb3VzZS5pc1JEb3duID0gZmFsc2U7XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIGhhbmRsZU1vdXNlWm9vbShldmVudCkge1xyXG4gIC8vbW91c2UuZHogPSBldmVudC5kZWx0YVkgLSBtb3VzZS56b29tO1xyXG4gIG1vdXNlLmR6ID0gZXZlbnQuZGVsdGFZO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaGFuZGxlS2V5VXAoZXZlbnQpIHtcclxuICBrZXlzW2V2ZW50LmNvZGVdID0gMDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGhhbmRsZUtleURvd24oZXZlbnQpIHtcclxuICBrZXlzW2V2ZW50LmNvZGVdID0gMTtcclxufVxyXG5cclxubGV0IGFuZ2xlU3BlZWQgPSAwLjA1O1xyXG5sZXQgc3BlZWQgPSAxO1xyXG5sZXQgc3BlZWRVcCA9IDEwO1xyXG5leHBvcnQgZnVuY3Rpb24gZmxvYXRpbmdDYW1lcmEoKSB7XHJcbiAgLypsZXQgdGggPVxyXG4gICAgICAgIG1vdXNlLmlzRG93biAqXHJcbiAgICAgICAgYW5nbGVTcGVlZCAqXHJcbiAgICAgICAgTWF0aC5zcXJ0KG1vdXNlLmR5ICogbW91c2UuZHkgKyBtb3VzZS5keCAqIG1vdXNlLmR4KTtcclxuICAgICovIC8qXHJcbiAgICBsZXQgZGlzdCA9IGNhbS5hdC5zdWIoY2FtLmxvYykubGVuKCksXHJcbiAgICAgICAgY29zVCA9IGNhbS5sb2MueSAtIGNhbS5hdC55IC8gZGlzdCxcclxuICAgICAgICBzaW5UID0gTWF0aC5zcXJ0KDEgLSBjb3NUICogY29zVCksXHJcbiAgICAgICAgcGxlbiA9IGRpc3QgKiBzaW5ULFxyXG4gICAgICAgIGNvc1AgPSAoY2FtLmxvYy56IC0gY2FtLmF0LnopIC8gcGxlbixcclxuICAgICAgICBzaW5QID0gKGNhbS5sb2MueCAtIGNhbS5hdC54KSAvIHBsZW4sXHJcbiAgICAgICAgYXppbXV0aCA9IChNYXRoLmF0YW4yKHNpblAsIGNvc1ApIC8gTWF0aC5QSSkgKiAxODAsXHJcbiAgICAgICAgZWxldmF0b3IgPSAoTWF0aC5hdGFuMihzaW5ULCBjb3NUKSAvIE1hdGguUEkpICogMTgwO1xyXG4qL1xyXG4gIGNhbS5sb2MgPSBjYW0ubG9jLmFkZChjYW0uZGlyLm11bCgtbW91c2UuZHogKiAwLjAxKSk7XHJcblxyXG4gIGxldCBteU1hdHI0ID0gbmV3IG1hdHI0KCk7XHJcbiAgLyogTW91c2UgeCAqL1xyXG4gIGNhbS5sb2MgPSBjYW0ubG9jLm11bE1hdHIoXHJcbiAgICBteU1hdHI0LnJvdGF0ZShtb3VzZS5pc0Rvd24gKiBhbmdsZVNwZWVkICogbW91c2UuZHgsIGNhbS51cC5uZWcoKSlcclxuICApOyAvKiAhIUFuaS0+RGVsdGFUaW1lICogICovXHJcbiAgLyogTW91c2UgeSAqL1xyXG4gIGNhbS5sb2MgPSBjYW0ubG9jLm11bE1hdHIoXHJcbiAgICBteU1hdHI0LnJvdGF0ZShtb3VzZS5pc0Rvd24gKiBhbmdsZVNwZWVkICogbW91c2UuZHksIGNhbS5yaWdodC5uZWcoKSlcclxuICApOyAvKiAhIUFuaS0+RGVsdGFUaW1lICogICovXHJcblxyXG4gIC8qKiogTW92aW5nIGZyZWUgY2FtICoqKi9cclxuXHJcbiAgLyogTW91c2UgeCAqL1xyXG4gIGNhbS5hdCA9IGNhbS5hdC5zdWIoY2FtLmxvYyk7XHJcbiAgY2FtLmF0ID0gY2FtLmF0Lm11bE1hdHIoXHJcbiAgICBteU1hdHI0LnJvdGF0ZShtb3VzZS5pc1JEb3duICogYW5nbGVTcGVlZCAqIG1vdXNlLmR4LCBjYW0udXApXHJcbiAgKTtcclxuICBjYW0uYXQgPSBjYW0uYXQuYWRkKGNhbS5sb2MpO1xyXG5cclxuICBjYW0ucmlnaHQgPSBjYW0ucmlnaHQubXVsTWF0cihcclxuICAgIG15TWF0cjQucm90YXRlWShtb3VzZS5pc1JEb3duICogYW5nbGVTcGVlZCAqIG1vdXNlLmR4KVxyXG4gICk7XHJcblxyXG4gIC8qIE1vdXNlIHkgKi9cclxuICAvKmNhbS5hdCA9XHJcbiAgICBQb2ludFRyYW5zZm9ybShjYW0uYXQsXHJcbiAgICAgIG15TWF0cjQucm90YXRlWCghIW1vdXNlLmlzUkRvd24gKlxyXG4gICAgICAgICAgICAgICAgICAgYW5nbGVTcGVlZCAqIG1vdXNlLmR5KSk7XHJcbiAgKi9cclxuICBjYW0uYXQgPSBjYW0uYXQuc3ViKGNhbS5sb2MpO1xyXG4gIGNhbS5hdCA9IGNhbS5hdC5tdWxNYXRyKFxyXG4gICAgbXlNYXRyNC5yb3RhdGUobW91c2UuaXNSRG93biAqIGFuZ2xlU3BlZWQgKiBtb3VzZS5keSwgY2FtLnJpZ2h0KVxyXG4gICk7XHJcblxyXG4gIGNhbS5hdCA9IGNhbS5hdC5hZGQoY2FtLmxvYyk7XHJcblxyXG4gIHNwZWVkICs9IGtleXNbXCJTaGlmdFwiXSA/IHNwZWVkVXAgOiAwO1xyXG4gIC8qIEFycm93cyAqL1xyXG4gIGNhbS5sb2MgPSBjYW0ubG9jXHJcbiAgICAuYWRkKGNhbS5kaXIubXVsKCEha2V5c1tcIktleVdcIl0gKiAha2V5c1tcIkNvbnRyb2xMZWZ0XCJdICogc3BlZWQpKVxyXG4gICAgLnN1YihjYW0uZGlyLm11bCghIWtleXNbXCJLZXlTXCJdICogIWtleXNbXCJDb250cm9sTGVmdFwiXSAqIHNwZWVkKSlcclxuICAgIC5zdWIoY2FtLnJpZ2h0Lm11bCghIWtleXNbXCJLZXlBXCJdICogIWtleXNbXCJDb250cm9sTGVmdFwiXSAqIHNwZWVkKSlcclxuICAgIC5hZGQoY2FtLnJpZ2h0Lm11bCghIWtleXNbXCJLZXlEXCJdICogIWtleXNbXCJDb250cm9sTGVmdFwiXSAqIHNwZWVkKSk7XHJcblxyXG4gIC8qIENhbUF0IHZpYSBhcnJvd3MgKi9cclxuICBjYW0uYXQgPSBjYW0uYXRcclxuICAgIC5hZGQoY2FtLmRpci5tdWwoISFrZXlzW1wiS2V5V1wiXSAqICFrZXlzW1wiQ29udHJvbExlZnRcIl0gKiBzcGVlZCkpXHJcbiAgICAuc3ViKGNhbS5kaXIubXVsKCEha2V5c1tcIktleVNcIl0gKiAha2V5c1tcIkNvbnRyb2xMZWZ0XCJdICogc3BlZWQpKVxyXG4gICAgLnN1YihjYW0ucmlnaHQubXVsKCEha2V5c1tcIktleUFcIl0gKiAha2V5c1tcIkNvbnRyb2xMZWZ0XCJdICogc3BlZWQpKVxyXG4gICAgLmFkZChjYW0ucmlnaHQubXVsKCEha2V5c1tcIktleURcIl0gKiAha2V5c1tcIkNvbnRyb2xMZWZ0XCJdICogc3BlZWQpKTtcclxuXHJcbiAgc3BlZWQgLT0ga2V5c1tcIlNoaWZ0XCJdID8gc3BlZWRVcCA6IDA7IC8qXHJcblxyXG4gICAgLyoqKiBcclxuICBQYXJhbGxlbCB0cmFuc2l0aW9uIFxyXG4gICoqKi8gLypcclxuICAgIGF6aW11dGggKz0gZ2xvYmFsRGVsdGFUaW1lICogMyAqICgtMzAgKiBtb3VzZS5pc0Rvd24gKiBtb3VzZS5keCk7XHJcbiAgICBlbGV2YXRvciArPSBnbG9iYWxEZWx0YVRpbWUgKiAyICogKC0zMCAqIG1vdXNlLmlzRG93biAqIG1vdXNlLmR5KTtcclxuXHJcbiAgICBpZiAoZWxldmF0b3IgPCAwLjA4KSBlbGV2YXRvciA9IDAuMDg7XHJcbiAgICBlbHNlIGlmIChlbGV2YXRvciA+IDE3OC45KSBlbGV2YXRvciA9IDE3OC45O1xyXG4gICAgZGlzdCArPVxyXG4gICAgICAgIGdsb2JhbERlbHRhVGltZSAqXHJcbiAgICAgICAgKDEgKyBrZXlzW1wiU2hpZnRcIl0gKiAyNykgKlxyXG4gICAgICAgICgyICogbW91c2UuZHogKyA4ICogKGtleXNbXCJOZXh0XCJdIC0ga2V5c1tcIlByaW9yXCJdKSk7XHJcbiAgICBpZiAoZGlzdCA8IDAuMSkgZGlzdCA9IDAuMTtcclxuXHJcbiAgICBpZiAobW91c2UuaXNEb3duICYmIGtleXNbXCJTaGlmdFwiXSkge1xyXG4gICAgICAgIGxldCB3cCwgaHAsIHN4LCBzeTtcclxuICAgICAgICBsZXQgZHY7XHJcblxyXG4gICAgICAgIHdwID0gY2FtLnByb2pTaXplO1xyXG4gICAgICAgIGhwID0gY2FtLnByb2pTaXplO1xyXG5cclxuICAgICAgICBpZiAoY2FtLmZyYW1lVyA+IGNhbS5mcmFtZUgpIHdwICo9IChjYW0uZnJhbWVXICogMS4wKSAvIGNhbS5mcmFtZUg7XHJcbiAgICAgICAgZWxzZSBocCAqPSAoY2FtLmZyYW1lSCAqIDEuMCkgLyBjYW0uZnJhbWVXO1xyXG4gICAgICAgIHN4ID0gKCgoLW1vdXNlLmR4ICogV3ApIC8gY2FtLmZyYW1lVykgKiBkaXN0KSAvIGNhbS5wcm9qZGlzdDtcclxuICAgICAgICBzeSA9ICgoKC1tb3VzZS5keSAqIGhwKSAvIGNhbS5mcmFtZUgpICogZGlzdCkgLyBjYW0ucHJvamRpc3Q7XHJcbiAgICAgICAgZHYgPSBjYW0ucmlnaHQubXVsKHN4KS5hZGQoY2FtLnVwLm11bChzeSkpO1xyXG4gICAgICAgIGNhbS5hdCA9IGNhbS5hdC5hZGQoZHYpO1xyXG4gICAgICAgIGNhbS5sb2MgPSBjYW0ubG9jLmFkZChkdik7XHJcbiAgICB9Ki9cclxufVxyXG5cclxuZnVuY3Rpb24gd2Fsa2luZygpIHtcclxuICAvKiBVcHNjYWxpbmcgKi9cclxuICBjYW0ucG9zID0gY2FtLnBvcy5hZGQoY2FtLnBvcy5tdWwobW91c2UuZHogKiAwLjAwMSkpO1xyXG5cclxuICBsZXQgbXlNYXRyNCA9IG5ldyBtYXRyNCgpO1xyXG4gIC8qIFJvdGF0aW5nICovXHJcbiAgLyogTW91c2UgeCAqL1xyXG4gIGNhbS5wb3MgPSBjYW0ucG9zLm11bE1hdHIoXHJcbiAgICBteU1hdHI0LnJvdGF0ZVkoLW1vdXNlLmlzRG93biAqIGFuZ2xlU3BlZWQgKiBtb3VzZS5keClcclxuICApOyAvKiAhIUFuaS0+RGVsdGFUaW1lICogICovXHJcbiAgLyogTW91c2UgeSAqL1xyXG4gIGNhbS5wb3MgPSBjYW0ucG9zLm11bE1hdHIoXHJcbiAgICBteU1hdHI0LnJvdGF0ZVgoLW1vdXNlLmlzRG93biAqIGFuZ2xlU3BlZWQgKiBtb3VzZS5keSlcclxuICApO1xyXG4gIGNhbS51c2VyRGlyID0gY2FtLnBvcy5uZWcoKS5ub3JtYWxpemUoKTtcclxuICBjYW0udXNlckRpci55ID0gMDtcclxuICAvKiBXYWxraW5nICovXHJcbiAgY2FtLnVzZXJMb2MgPSBjYW0udXNlckxvY1xyXG4gICAgLmFkZChjYW0udXNlckRpci5tdWwoISFrZXlzW1wiS2V5V1wiXSAqICFrZXlzW1wiQ29udHJvbExlZnRcIl0gKiBzcGVlZCkpXHJcbiAgICAuYWRkKGNhbS51c2VyRGlyLm11bCgtISFrZXlzW1wiS2V5U1wiXSAqIHNwZWVkKSlcclxuICAgIC5hZGQoY2FtLnVzZXJEaXIubXVsTWF0cihteU1hdHI0LnJvdGF0ZVkoOTApKS5tdWwoISFrZXlzW1wiS2V5QVwiXSAqIHNwZWVkKSlcclxuICAgIC5hZGQoY2FtLnVzZXJEaXIubXVsTWF0cihteU1hdHI0LnJvdGF0ZVkoOTApKS5tdWwoLSEha2V5c1tcIktleURcIl0gKiBzcGVlZCkpO1xyXG5cclxuICBjYW0uYXQgPSBjYW0udXNlckxvYztcclxuICBjYW0uZGlyID0gY2FtLnBvcy5uZWcoKS5ub3JtYWxpemUoKTtcclxuICBjYW0ubG9jID0gY2FtLnVzZXJMb2MuYWRkKGNhbS5wb3MpO1xyXG4gIGNhbS5yaWdodCA9IGNhbS51c2VyRGlyLmNyb3NzKG5ldyB2ZWMzKDAsIDEsIDApKTtcclxuICBjYW0udXAgPSBjYW0ucmlnaHQuY3Jvc3MoY2FtLmRpcik7XHJcbn1cclxuXHJcbmxldCBteU1hdHI0ID0gbmV3IG1hdHI0KCk7XHJcblxyXG5jYW0uc3BlZWQgPSAwO1xyXG5jYW0udXNlckRpciA9IG5ldyB2ZWMzKDEsIDAsIDApO1xyXG5jYW0ucG9zID0gbmV3IHZlYzMoLTEsIDEsIDApO1xyXG5sZXQgYWNjZWxlcmF0aW9uID0gMC4yO1xyXG5sZXQgZGVjZWxlcmF0aW9uID0gMS4yO1xyXG5sZXQgcm90QW5nbGUgPSAwO1xyXG5sZXQgbWF4Um90QW5nbGUgPSA0NTtcclxubGV0IGFuZ2xlQWNjZWxlcmF0aW9uID0gMC4yO1xyXG5sZXQgYW5nbGVEZWNlbGVyYXRpb24gPSAxLjE7XHJcblxyXG5mdW5jdGlvbiBiaWtlKCkge1xyXG4gIGNhbS5zcGVlZCArPSAoISFrZXlzW1wiS2V5V1wiXSAtICEha2V5c1tcIktleVNcIl0pICogYWNjZWxlcmF0aW9uO1xyXG4gIGNhbS5zcGVlZCAvPSBkZWNlbGVyYXRpb247XHJcblxyXG4gIC8qIFVwc2NhbGluZyAqL1xyXG4gIGNhbS5wb3MgPSBjYW0ucG9zLmFkZChjYW0ucG9zLm11bChtb3VzZS5keiAqIDAuMDAxKSk7XHJcblxyXG4gIHJvdEFuZ2xlICs9ICgtISFrZXlzW1wiS2V5RFwiXSArICEha2V5c1tcIktleUFcIl0pICogYW5nbGVBY2NlbGVyYXRpb247XHJcbiAgaWYgKHJvdEFuZ2xlID4gbWF4Um90QW5nbGUpIHJvdEFuZ2xlID0gbWF4Um90QW5nbGU7XHJcbiAgaWYgKHJvdEFuZ2xlIDwgLW1heFJvdEFuZ2xlKSByb3RBbmdsZSA9IC1tYXhSb3RBbmdsZTtcclxuICByb3RBbmdsZSAvPSBhbmdsZURlY2VsZXJhdGlvbjtcclxuXHJcbiAgY2FtLnVzZXJEaXIgPSBjYW0udXNlckRpci5tdWxNYXRyKFxyXG4gICAgbXlNYXRyNC5yb3RhdGVZKHJvdEFuZ2xlICogTWF0aC5zcXJ0KE1hdGguYWJzKGNhbS5zcGVlZCkpKVxyXG4gICk7XHJcbiAgLyogV2Fsa2luZyAqL1xyXG4gIGNhbS5wb3MgPSBjYW0ucG9zLm11bE1hdHIoXHJcbiAgICBteU1hdHI0LnJvdGF0ZVkocm90QW5nbGUgKiBNYXRoLnNxcnQoTWF0aC5hYnMoY2FtLnNwZWVkKSkpXHJcbiAgKTtcclxuICBjYW0udXNlckxvYyA9IGNhbS51c2VyTG9jLmFkZChjYW0udXNlckRpci5tdWwoY2FtLnNwZWVkKSk7XHJcblxyXG4gIC8qIFJvdGF0ZSBhcm91bmQgYmlrZTogdGhpcyBkbyBub3QgY2hhbmdlcyBkcml2aW5nIGRpcmVjdGlvbiAqL1xyXG4gIC8qIE1vdXNlIHggKi9cclxuICBjYW0ucG9zID0gY2FtLnBvcy5tdWxNYXRyKFxyXG4gICAgbXlNYXRyNC5yb3RhdGVZKC1tb3VzZS5pc0Rvd24gKiBhbmdsZVNwZWVkICogbW91c2UuZHgpXHJcbiAgKTsgLyogISFBbmktPkRlbHRhVGltZSAqL1xyXG4gIC8qIE1vdXNlIHkgKi9cclxuICBjYW0ucG9zID0gY2FtLnBvcy5tdWxNYXRyKFxyXG4gICAgbXlNYXRyNC5yb3RhdGUoLW1vdXNlLmlzRG93biAqIGFuZ2xlU3BlZWQgKiBtb3VzZS5keSwgY2FtLnJpZ2h0KVxyXG4gICk7XHJcblxyXG4gIGNhbS5hdCA9IGNhbS51c2VyTG9jO1xyXG4gIGNhbS5kaXIgPSBjYW0ucG9zLm5lZygpLm5vcm1hbGl6ZSgpO1xyXG4gIGNhbS5sb2MgPSBjYW0udXNlckxvYy5hZGQoY2FtLnBvcyk7XHJcbiAgbGV0IGNvcnJlY3REaXIgPSBuZXcgdmVjMyhjYW0uZGlyLngsIDAsIGNhbS5kaXIueik7XHJcbiAgY2FtLnJpZ2h0ID0gY29ycmVjdERpci5jcm9zcyhuZXcgdmVjMygwLCAxLCAwKSk7XHJcbiAgY2FtLnVwID0gY2FtLnJpZ2h0LmNyb3NzKGNhbS5kaXIpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gQ29udHJvbENhbWVyYSgpIHtcclxuICBsZXQgaXNCaWtlID0gdHJ1ZTtcclxuICBpZiAoIWlzV2Fsa2luZykgZmxvYXRpbmdDYW1lcmEoKTtcclxuICBlbHNlIGlmICghaXNCaWtlKSB3YWxraW5nKCk7XHJcbiAgZWxzZSBiaWtlKCk7XHJcbn1cclxuIiwiaW1wb3J0IHsgdmVjMywgbWF0cjQgfSBmcm9tIFwiLi9tdGguanNcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBjYW1lcmEge1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5wcm9qU2l6ZSA9IDAuMTtcclxuICAgIHRoaXMucHJvakRpc3QgPSAwLjE7XHJcbiAgICB0aGlzLnByb2pGYXJDbGlwID0gMTgwMDA7XHJcbiAgICB0aGlzLmZyYW1lVyA9IDMwO1xyXG4gICAgdGhpcy5mcmFtZUggPSAzMDtcclxuICAgIHRoaXMubWF0clZpZXcgPSBuZXcgbWF0cjQoKTtcclxuICAgIHRoaXMubWF0clByb2ogPSBuZXcgbWF0cjQoKTtcclxuICAgIHRoaXMubWF0clZQID0gbmV3IG1hdHI0KCk7XHJcbiAgICB0aGlzLmlkID0gTWF0aC5yYW5kb20oKS50b1N0cmluZygpO1xyXG4gICAgdGhpcy5zZXREZWYoKTtcclxuICB9XHJcbiAgY2FtU2V0KGxvYywgYXQsIHVwLCBwb3MsIHVzZXJMb2MpIHtcclxuICAgIGxldCBteU1hdHI0ID0gbmV3IG1hdHI0KCk7XHJcbiAgICB0aGlzLm1hdHJWaWV3ID0gbXlNYXRyNC52aWV3KGxvYywgYXQsIHVwKTtcclxuXHJcbiAgICB0aGlzLmxvYyA9IGxvYztcclxuICAgIHRoaXMuYXQgPSBhdDtcclxuXHJcbiAgICB0aGlzLmRpciA9IG5ldyB2ZWMzKFxyXG4gICAgICAtdGhpcy5tYXRyVmlld1swXVsyXSxcclxuICAgICAgLXRoaXMubWF0clZpZXdbMV1bMl0sXHJcbiAgICAgIC10aGlzLm1hdHJWaWV3WzJdWzJdXHJcbiAgICApO1xyXG4gICAgdGhpcy51cCA9IG5ldyB2ZWMzKFxyXG4gICAgICB0aGlzLm1hdHJWaWV3WzBdWzFdLFxyXG4gICAgICB0aGlzLm1hdHJWaWV3WzFdWzFdLFxyXG4gICAgICB0aGlzLm1hdHJWaWV3WzJdWzFdXHJcbiAgICApO1xyXG4gICAgdGhpcy5yaWdodCA9IG5ldyB2ZWMzKFxyXG4gICAgICB0aGlzLm1hdHJWaWV3WzBdWzBdLFxyXG4gICAgICB0aGlzLm1hdHJWaWV3WzFdWzBdLFxyXG4gICAgICB0aGlzLm1hdHJWaWV3WzJdWzBdXHJcbiAgICApO1xyXG4gICAgdGhpcy5wb3MgPSBwb3M7XHJcbiAgICB0aGlzLnVzZXJMb2MgPSB1c2VyTG9jO1xyXG4gICAgdGhpcy5tYXRyVlAgPSB0aGlzLm1hdHJWaWV3Lm11bCh0aGlzLm1hdHJQcm9qKTtcclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgc2V0UHJvaihwcm9qU2l6ZSwgcHJvakRpc3QsIHByb2pGYXJDbGlwKSB7XHJcbiAgICBsZXQgcngsIHJ5O1xyXG5cclxuICAgIHJ4ID0gcnkgPSBwcm9qU2l6ZTtcclxuXHJcbiAgICB0aGlzLnByb2pEaXN0ID0gcHJvakRpc3Q7XHJcbiAgICB0aGlzLnByb2pTaXplID0gcHJvalNpemU7XHJcbiAgICB0aGlzLnByb2pGYXJDbGlwID0gcHJvakZhckNsaXA7XHJcblxyXG4gICAgLyogQ29ycmVjdCBhc3BlY3QgcmF0aW8gKi9cclxuICAgIGlmICh0aGlzLmZyYW1lVyA+IHRoaXMuZnJhbWVIKSByeCAqPSB0aGlzLmZyYW1lVyAvIHRoaXMuZnJhbWVIO1xyXG4gICAgZWxzZSByeSAqPSB0aGlzLmZyYW1lSCAvIHRoaXMuZnJhbWVXO1xyXG5cclxuICAgIGxldCBteU1hdHI0ID0gbmV3IG1hdHI0KCk7XHJcbiAgICB0aGlzLm1hdHJQcm9qID0gbXlNYXRyNC5mcnVzdHVtKFxyXG4gICAgICAtcnggLyAyLFxyXG4gICAgICByeCAvIDIsXHJcbiAgICAgIC1yeSAvIDIsXHJcbiAgICAgIHJ5IC8gMixcclxuICAgICAgcHJvakRpc3QsXHJcbiAgICAgIHByb2pGYXJDbGlwXHJcbiAgICApO1xyXG4gICAgdGhpcy5tYXRyVlAgPSB0aGlzLm1hdHJWaWV3Lm11bCh0aGlzLm1hdHJQcm9qKTtcclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgLypyb3RhdGUodiwgYSkge1xyXG4gICAgbGV0IG5ld0xvYywgbmV3VXAsIG5ld0F0O1xyXG4gICAgbGV0IHJvdCA9IG5ldyBtYXRyNCgpO1xyXG4gICAgcm90ID0gcm90LnJvdGF0ZShhLCB2KTtcclxuICAgIG5ld0xvYyA9IHRoaXMubG9jLm11bE1hdHIocm90KTtcclxuICAgIG5ld1VwID0gdGhpcy51cC5tdWxNYXRyKHJvdCk7XHJcbiAgICBuZXdBdCA9IHRoaXMuYXQubXVsTWF0cihyb3QpO1xyXG4gICAgdGhpcy5jYW1TZXQobmV3TG9jLCBuZXdBdCwgbmV3VXApO1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfSovXHJcbiAgc2V0U2l6ZShmcmFtZVcsIGZyYW1lSCkge1xyXG4gICAgdGhpcy5mcmFtZVcgPSBmcmFtZVc7XHJcbiAgICB0aGlzLmZyYW1lSCA9IGZyYW1lSDtcclxuICAgIHRoaXMuc2V0UHJvaih0aGlzLnByb2pTaXplLCB0aGlzLnByb2pEaXN0LCB0aGlzLnByb2pGYXJDbGlwKTtcclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuICBzZXREZWYoKSB7XHJcbiAgICB0aGlzLmxvYyA9IG5ldyB2ZWMzKDAsIDAsIDEpO1xyXG4gICAgdGhpcy5hdCA9IG5ldyB2ZWMzKDAsIDAsIDApO1xyXG4gICAgdGhpcy5kaXIgPSBuZXcgdmVjMygwLCAwLCAtMSk7XHJcbiAgICB0aGlzLnVwID0gbmV3IHZlYzMoMCwgMSwgMCk7XHJcbiAgICB0aGlzLnJpZ2h0ID0gbmV3IHZlYzMoMSwgMCwgMCk7XHJcblxyXG4gICAgdGhpcy5wcm9qRGlzdCA9IDAuMTtcclxuICAgIHRoaXMucHJvalNpemUgPSAwLjE7XHJcbiAgICB0aGlzLnByb2pGYXJDbGlwID0gMTAwMDA7XHJcblxyXG4gICAgdGhpcy5mcmFtZVcgPSAzMDtcclxuICAgIHRoaXMuZnJhbWVIID0gMzA7XHJcblxyXG4gICAgdGhpcy5jYW1TZXQodGhpcy5sb2MsIHRoaXMuYXQsIHRoaXMudXAsIHRoaXMucG9zLCB0aGlzLnVzZXJMb2MpO1xyXG4gICAgdGhpcy5zZXRQcm9qKHRoaXMucHJvalNpemUsIHRoaXMucHJvakRpc3QsIHRoaXMucHJvakZhckNsaXApO1xyXG4gICAgdGhpcy5zZXRTaXplKHRoaXMuZnJhbWVXLCB0aGlzLmZyYW1lSCk7XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgdmVjMyB9IGZyb20gXCIuL210aC5qc1wiO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNhbGN1bGF0ZU5vcm1hbHMocG9zLCBpbmRzID0gbnVsbCkge1xyXG4gIGxldCBwdHMgPSBbXTtcclxuICBsZXQgayA9IDA7XHJcbiAgaWYgKGluZHMgPT0gbnVsbCkgaW5kcyA9IFsuLi5BcnJheShwb3MubGVuZ3RoIC8gMykua2V5cygpXTtcclxuICBmb3IgKGxldCBpID0gMDsgaSA8IHBvcy5sZW5ndGg7IGkgKz0gMykge1xyXG4gICAgcHRzW2srK10gPSBuZXcgdmVjMyhwb3NbaV0sIHBvc1tpICsgMV0sIHBvc1tpICsgMl0pO1xyXG4gIH1cclxuICBsZXQgbm9ybWFscyA9IFtdO1xyXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcHRzLmxlbmd0aDsgaSsrKSBub3JtYWxzW2ldID0gbmV3IHZlYzMoKTtcclxuXHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbmRzLmxlbmd0aDsgaSArPSAzKSB7XHJcbiAgICB7XHJcbiAgICAgIGxldCBwMCA9IHB0c1tpbmRzW2ldXSxcclxuICAgICAgICBwMSA9IHB0c1tpbmRzW2kgKyAxXV0sXHJcbiAgICAgICAgcDIgPSBwdHNbaW5kc1tpICsgMl1dO1xyXG4gICAgICBsZXQgbiA9IHAxLnN1YihwMCkuY3Jvc3MocDIuc3ViKHAwKSkubm9ybWFsaXplKCk7XHJcblxyXG4gICAgICBub3JtYWxzW2luZHNbaV1dID0gbm9ybWFsc1tpbmRzW2ldXS5hZGQobik7XHJcbiAgICAgIG5vcm1hbHNbaW5kc1tpICsgMV1dID0gbm9ybWFsc1tpbmRzW2kgKyAxXV0uYWRkKG4pO1xyXG4gICAgICBub3JtYWxzW2luZHNbaSArIDJdXSA9IG5vcm1hbHNbaW5kc1tpICsgMl1dLmFkZChuKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcHRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICBub3JtYWxzW2ldID0gbm9ybWFsc1tpXS5ub3JtYWxpemUoKTtcclxuICB9XHJcblxyXG4gIGsgPSAwO1xyXG4gIGxldCByZXMgPSBbXTtcclxuICBmb3IgKGxldCBpID0gMDsgaSA8IG5vcm1hbHMubGVuZ3RoOyBpKyspIHtcclxuICAgIHJlc1trKytdID0gbm9ybWFsc1tpXS54O1xyXG4gICAgcmVzW2srK10gPSBub3JtYWxzW2ldLnk7XHJcbiAgICByZXNbaysrXSA9IG5vcm1hbHNbaV0uejtcclxuICB9XHJcbiAgcmV0dXJuIHJlcztcclxufVxyXG4iLCJpbXBvcnQgeyBnbCB9IGZyb20gXCIuLi9tYWluLmpzXCI7XHJcbmltcG9ydCB7IGNhbGN1bGF0ZU5vcm1hbHMgfSBmcm9tIFwiLi4vdXRpbHMvdXRpbHMuanNcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBzaGFkZXJzID0gW107XHJcbmV4cG9ydCBjbGFzcyBzaGFkZXIge1xyXG4gIGNvbnN0cnVjdG9yKHZzLCBmcywgc2hhZGVyUHJvZ3JhbSkge1xyXG4gICAgdGhpcy52cyA9IHZzO1xyXG4gICAgdGhpcy5mcyA9IGZzO1xyXG4gICAgdGhpcy5zaGFkZXJQcm9ncmFtID0gc2hhZGVyUHJvZ3JhbTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzaGFkZXJBZGQoZmlsZU5hbWUgPSBudWxsKSB7XHJcbiAgbGV0IHZzLCBmcywgcmVzO1xyXG4gIGlmIChmaWxlTmFtZSA9PSBudWxsKSByZXR1cm4gc2hhZGVyc1swXTtcclxuICBmdW5jdGlvbiBsb2FkU2hhZGVyKGdsLCB0eXBlLCBzb3VyY2UpIHtcclxuICAgIGNvbnN0IHNoYWRlciA9IGdsLmNyZWF0ZVNoYWRlcih0eXBlKTtcclxuICAgIGdsLnNoYWRlclNvdXJjZShzaGFkZXIsIHNvdXJjZSk7XHJcbiAgICBnbC5jb21waWxlU2hhZGVyKHNoYWRlciwgc291cmNlKTtcclxuXHJcbiAgICByZXR1cm4gc2hhZGVyO1xyXG4gIH1cclxuXHJcbiAgY29uc3QgZnQxID0gZmV0Y2goYGJpbi9zaGFkZXJzLyR7ZmlsZU5hbWV9L3ZlcnQuZ2xzbGApXHJcbiAgICAudGhlbigocmVzKSA9PiByZXMudGV4dCgpKSAvLyDQodGC0YDQtdC70L7Rh9C90LDRjyDQsdC10LfRi9C80Y/QvdC90LDRjyDRhNGD0L3QutGG0LjRjyDQt9Cw0L/Rg9GB0YLQuNGC0YHRjyDQv9C+0YHQu9C1INC/0L7Qu9GD0YfQtdC90LjQtSDRgtC10LrRgdGC0LAsINC40LcgJ3Jlcycg0L/QvtC70YPRh9Cw0LXQvCDRgtC10LrRgdGC0L7QstGL0LUg0LTQsNC90L3Ri9C1XHJcbiAgICAudGhlbigoZGF0YSkgPT4ge1xyXG4gICAgICAvLyDQodGC0YDQtdC70L7Rh9C90LDRjyDQsdC10LfRi9C80Y/QvdC90LDRjyDRhNGD0L3QutGG0LjRjyDQt9Cw0L/Rg9GB0YLQuNGC0YHRjyDQtNC70Y8g0L7QsdGA0LDQsdC+0YLQutC4INC/0L7Qu9GD0YfQtdC90L3Ri9GFINC90LAg0L/RgNC10LTRi9C00YPRidC10Lwg0Y3RgtCw0L/QtSDQtNCw0L3QvdGL0YUgLSAnZGF0YScg0Y3RgtC+INC/0L7Qu9GD0YfQtdC90L3Ri9C5INGC0LXQutGB0YJcclxuICAgICAgdnMgPSBkYXRhOyAvLyDQl9Cw0L/QvtC80LjQvdCw0LXQvCDQv9C+0LvRg9GH0LXQvdC90YvQuSDRgtC10LrRgdGCINCyINCz0LvQvtCx0LDQu9GM0L3QvtC5INC/0LXRgNC10LzQtdC90L3QvtC5XHJcbiAgICB9KTtcclxuXHJcbiAgY29uc3QgZnQyID0gZmV0Y2goYGJpbi9zaGFkZXJzLyR7ZmlsZU5hbWV9L2ZyYWcuZ2xzbGApXHJcbiAgICAudGhlbigocmVzKSA9PiByZXMudGV4dCgpKVxyXG4gICAgLnRoZW4oKGRhdGEpID0+IHtcclxuICAgICAgZnMgPSBkYXRhO1xyXG4gICAgfSk7XHJcblxyXG4gIGNvbnN0IGFsbERhdGEgPSBQcm9taXNlLmFsbChbZnQxLCBmdDJdKTtcclxuXHJcbiAgYXdhaXQgYWxsRGF0YS50aGVuKCgpID0+IHtcclxuICAgIGNvbnN0IHZlcnRleFNoYWRlciA9IGxvYWRTaGFkZXIoZ2wsIGdsLlZFUlRFWF9TSEFERVIsIHZzKTtcclxuICAgIGNvbnN0IGZyYWdtZW50U2hhZGVyID0gbG9hZFNoYWRlcihnbCwgZ2wuRlJBR01FTlRfU0hBREVSLCBmcyk7XHJcbiAgICBsZXQgc2hhZGVyUHJvZ3JhbSA9IGdsLmNyZWF0ZVByb2dyYW0oKTtcclxuICAgIGdsLmF0dGFjaFNoYWRlcihzaGFkZXJQcm9ncmFtLCB2ZXJ0ZXhTaGFkZXIpO1xyXG4gICAgZ2wuYXR0YWNoU2hhZGVyKHNoYWRlclByb2dyYW0sIGZyYWdtZW50U2hhZGVyKTtcclxuICAgIGdsLmxpbmtQcm9ncmFtKHNoYWRlclByb2dyYW0pO1xyXG4gICAgaWYgKCFnbC5nZXRQcm9ncmFtUGFyYW1ldGVyKHNoYWRlclByb2dyYW0sIGdsLkxJTktfU1RBVFVTKSkge1xyXG4gICAgICBjb25zdCBCdWYgPSBnbC5nZXRQcm9ncmFtSW5mb0xvZyhzaGFkZXJQcm9ncmFtKTtcclxuICAgICAgY29uc29sZS5sb2coQnVmKTtcclxuICAgIH1cclxuICAgIHJlcyA9IG5ldyBzaGFkZXIodnMsIGZzLCBzaGFkZXJQcm9ncmFtKTtcclxuICAgIHNoYWRlcnMucHVzaChyZXMpO1xyXG4gIH0pO1xyXG4gIHJldHVybiByZXM7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB1c2VTaGFkZXIoc2hhZGVyLCB2ZXJ0aWNlcywgaW5kaWNlcyA9IG51bGwsIG5vcm1hbHMgPSBudWxsKSB7XHJcbiAgbGV0IHBvc0xvYyA9IGdsLmdldEF0dHJpYkxvY2F0aW9uKHNoYWRlci5zaGFkZXJQcm9ncmFtLCBcImluX3Bvc1wiKTtcclxuICBjb25zdCBwb3NpdGlvbkJ1ZmZlciA9IGdsLmNyZWF0ZUJ1ZmZlcigpO1xyXG4gIGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCBwb3NpdGlvbkJ1ZmZlcik7XHJcbiAgZ2wuYnVmZmVyRGF0YShcclxuICAgIGdsLkFSUkFZX0JVRkZFUixcclxuICAgIHZlcnRpY2VzLFxyXG4gICAgZ2wuU1RBVElDX0RSQVdcclxuICApOyAvKiBUT0RPOiBTaG91bGQgaSB1c2UgZmxvYXQzMkFycmF5IGhlcmUqL1xyXG4gIGdsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KHBvc0xvYyk7XHJcbiAgZ2wudmVydGV4QXR0cmliUG9pbnRlcihwb3NMb2MsIDMsIGdsLkZMT0FULCBmYWxzZSwgMCwgMCk7XHJcblxyXG4gIGNvbnN0IG5vcm1hbExvYyA9IGdsLmdldEF0dHJpYkxvY2F0aW9uKHNoYWRlci5zaGFkZXJQcm9ncmFtLCBcIm5vcm1hbFwiKTtcclxuICBjb25zdCBub3JtYWxCdWZmZXIgPSBnbC5jcmVhdGVCdWZmZXIoKTtcclxuICBnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgbm9ybWFsQnVmZmVyKTtcclxuICBpZiAobm9ybWFscyA9PSBudWxsKVxyXG4gICAgbm9ybWFscyA9IG5ldyBGbG9hdDMyQXJyYXkoY2FsY3VsYXRlTm9ybWFscyh2ZXJ0aWNlcywgaW5kaWNlcykpO1xyXG4gIGdsLmJ1ZmZlckRhdGEoZ2wuQVJSQVlfQlVGRkVSLCBub3JtYWxzLCBnbC5TVEFUSUNfRFJBVyk7XHJcbiAgZ2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkobm9ybWFsTG9jKTtcclxuICBnbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKG5vcm1hbExvYywgMywgZ2wuRkxPQVQsIGZhbHNlLCAwLCAwKTtcclxuICBpZiAoaW5kaWNlcyAhPSBudWxsKSB7XHJcbiAgICBjb25zdCBpbmRleEJ1ZmZlciA9IGdsLmNyZWF0ZUJ1ZmZlcigpO1xyXG4gICAgZ2wuYmluZEJ1ZmZlcihnbC5FTEVNRU5UX0FSUkFZX0JVRkZFUiwgaW5kZXhCdWZmZXIpO1xyXG4gICAgZ2wuYnVmZmVyRGF0YShnbC5FTEVNRU5UX0FSUkFZX0JVRkZFUiwgaW5kaWNlcywgZ2wuU1RBVElDX0RSQVcpO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBnbCB9IGZyb20gXCIuLi9tYWluLmpzXCI7XHJcbmltcG9ydCB7IHVuaXRBZGQgfSBmcm9tIFwiLi91bml0cy5qc1wiO1xyXG5pbXBvcnQgeyBtYXRyNCB9IGZyb20gXCIuLi91dGlscy9tdGguanNcIjtcclxuaW1wb3J0IHsgY2FtIH0gZnJvbSBcIi4uL3V0aWxzL2NvbnRyb2xzLmpzXCI7XHJcbmltcG9ydCB7IHNoYWRlckFkZCwgdXNlU2hhZGVyIH0gZnJvbSBcIi4uL3JuZC9zaGFkZXJzLmpzXCI7XHJcblxyXG5jb25zdCBjdWJlVmVydGV4UG9zaXRpb25zID0gbmV3IEZsb2F0MzJBcnJheShbXHJcbiAgMSwgMSwgLTEsIDEsIDEsIDEsIDEsIC0xLCAxLCAxLCAtMSwgLTEsIC0xLCAxLCAxLCAtMSwgMSwgLTEsIC0xLCAtMSwgLTEsIC0xLFxyXG4gIC0xLCAxLCAtMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgLTEsIC0xLCAxLCAtMSwgLTEsIC0xLCAtMSwgMSwgLTEsIC0xLCAxLCAtMSxcclxuICAxLCAtMSwgLTEsIDEsIDEsIDEsIDEsIC0xLCAxLCAxLCAtMSwgLTEsIDEsIDEsIC0xLCAxLCAtMSwgMSwgLTEsIDEsIDEsIC0xLCAxLFxyXG4gIC0xLCAtMSwgLTEsIC0xLCAtMSxcclxuXSk7XHJcbmNvbnN0IGN1YmVWZXJ0ZXhJbmRpY2VzID0gbmV3IFVpbnQxNkFycmF5KFtcclxuICAwLCAxLCAyLCAwLCAyLCAzLCA0LCA1LCA2LCA0LCA2LCA3LCA4LCA5LCAxMCwgOCwgMTAsIDExLCAxMiwgMTMsIDE0LCAxMiwgMTQsXHJcbiAgMTUsIDE2LCAxNywgMTgsIDE2LCAxOCwgMTksIDIwLCAyMSwgMjIsIDIwLCAyMiwgMjMsXHJcbl0pO1xyXG5cclxubGV0IGN1YmVWZXJ0ZXhBcnJheTtcclxubGV0IHNoYWRlckk7XHJcbmZ1bmN0aW9uIHJlbmRlcigpIHtcclxuICBnbC51c2VQcm9ncmFtKHNoYWRlckkuc2hhZGVyUHJvZ3JhbSk7XHJcbiAgbGV0IHRpbWVMb2MgPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24oc2hhZGVySS5zaGFkZXJQcm9ncmFtLCBcInRpbWVcIik7XHJcbiAgY29uc3QgcHJvamVjdGlvbkxvYyA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihcclxuICAgIHNoYWRlckkuc2hhZGVyUHJvZ3JhbSxcclxuICAgIFwicHJvamVjdGlvblwiXHJcbiAgKTtcclxuICBjb25zdCBtb2RlbFZpZXdMb2MgPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24oXHJcbiAgICBzaGFkZXJJLnNoYWRlclByb2dyYW0sXHJcbiAgICBcIm1vZGVsVmlld1wiXHJcbiAgKTtcclxuICBjb25zdCB3b3JsZExvYyA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihzaGFkZXJJLnNoYWRlclByb2dyYW0sIFwid29ybGRcIik7XHJcbiAgLy8gIGRyYXcgY3ViZVxyXG4gIGdsLmJpbmRWZXJ0ZXhBcnJheShjdWJlVmVydGV4QXJyYXkpO1xyXG4gIGdsLnVuaWZvcm1NYXRyaXg0ZnYoXHJcbiAgICBwcm9qZWN0aW9uTG9jLFxyXG4gICAgZmFsc2UsXHJcbiAgICBuZXcgRmxvYXQzMkFycmF5KGNhbS5tYXRyUHJvai5hKCkuam9pbigpLnNwbGl0KFwiLFwiKSlcclxuICApO1xyXG4gIGxldCBteU1hdHI0ID0gbmV3IG1hdHI0KCk7XHJcbiAgZ2wudW5pZm9ybU1hdHJpeDRmdihcclxuICAgIHdvcmxkTG9jLFxyXG4gICAgZmFsc2UsXHJcbiAgICBuZXcgRmxvYXQzMkFycmF5KG15TWF0cjQuYSgpLmpvaW4oKS5zcGxpdChcIixcIikpXHJcbiAgKTtcclxuICBnbC51bmlmb3JtTWF0cml4NGZ2KFxyXG4gICAgbW9kZWxWaWV3TG9jLFxyXG4gICAgZmFsc2UsXHJcbiAgICBuZXcgRmxvYXQzMkFycmF5KGNhbS5tYXRyVmlldy5hKCkuam9pbigpLnNwbGl0KFwiLFwiKSlcclxuICApO1xyXG4gIGdsLnVuaWZvcm0xZih0aW1lTG9jLCBEYXRlLm5vdygpKTtcclxuXHJcbiAgY29uc3QgbGlnaHREaXJMb2MgPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24oc2hhZGVySS5zaGFkZXJQcm9ncmFtLCBcImxpZ2h0RGlyXCIpO1xyXG4gIGNvbnN0IGNhbUxvY0xvYyA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihzaGFkZXJJLnNoYWRlclByb2dyYW0sIFwiY2FtTG9jXCIpO1xyXG4gIGdsLnVuaWZvcm0zZihsaWdodERpckxvYywgMSwgMiwgMyk7XHJcbiAgZ2wudW5pZm9ybTNmKGNhbUxvY0xvYywgY2FtLmxvYy54LCBjYW0ubG9jLnksIGNhbS5sb2Mueik7XHJcbiAgLyogQ3VzdG9taXNlYWJsZSBzdHVmZiAqL1xyXG5cclxuICBjb25zdCBrYUxvYyA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihzaGFkZXJJLnNoYWRlclByb2dyYW0sIFwia2FcIik7XHJcbiAgY29uc3Qga2RMb2MgPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24oc2hhZGVySS5zaGFkZXJQcm9ncmFtLCBcImtkXCIpO1xyXG4gIGNvbnN0IGtzTG9jID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHNoYWRlckkuc2hhZGVyUHJvZ3JhbSwgXCJrc1wiKTtcclxuICBjb25zdCBwaExvYyA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihzaGFkZXJJLnNoYWRlclByb2dyYW0sIFwicGhcIik7XHJcbiAgZ2wudW5pZm9ybTNmKGthTG9jLCAwLjAyMTUsIDAuMTc0NSwgMC4wMjE1KTtcclxuICBnbC51bmlmb3JtM2Yoa2RMb2MsIDAuMDc1NjgsIDAuNjE0MjQsIDAuMDc1NjgpO1xyXG4gIGdsLnVuaWZvcm0zZihrc0xvYywgMC42MzMsIDAuNzI3ODExLCAwLjYzMyk7XHJcbiAgZ2wudW5pZm9ybTFmKHBoTG9jLCA3Ni44KTtcclxuXHJcbiAgZ2wuZHJhd0VsZW1lbnRzKFxyXG4gICAgZ2wuVFJJQU5HTEVTLFxyXG4gICAgMzYsIC8vIG51bSB2ZXJ0aWNlcyB0byBwcm9jZXNzXHJcbiAgICBnbC5VTlNJR05FRF9TSE9SVCwgLy8gdHlwZSBvZiBpbmRpY2VzXHJcbiAgICAwIC8vIG9mZnNldCBvbiBieXRlcyB0byBpbmRpY2VzXHJcbiAgKTtcclxufVxyXG5hc3luYyBmdW5jdGlvbiBpbml0KCkge1xyXG4gIC8qIEN1YmUgKi9cclxuICBzaGFkZXJJID0gYXdhaXQgc2hhZGVyQWRkKFwicmFpbmJvd1wiKTtcclxuICBjdWJlVmVydGV4QXJyYXkgPSBnbC5jcmVhdGVWZXJ0ZXhBcnJheSgpO1xyXG4gIGdsLmJpbmRWZXJ0ZXhBcnJheShjdWJlVmVydGV4QXJyYXkpO1xyXG4gIHVzZVNoYWRlcihzaGFkZXJJLCBjdWJlVmVydGV4UG9zaXRpb25zLCBjdWJlVmVydGV4SW5kaWNlcyk7XHJcbiAgZ2wuYmluZFZlcnRleEFycmF5KG51bGwpO1xyXG4gIC8qIGFhYSAqL1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiB1bml0Q3ViZUFkZCgpIHtcclxuICB1bml0QWRkKGluaXQsIHJlbmRlciwgXCJjdWJlXCIpO1xyXG59XHJcbiIsImltcG9ydCB7IGdsIH0gZnJvbSBcIi4uL21haW4uanNcIjtcclxuaW1wb3J0IHsgdW5pdEFkZCB9IGZyb20gXCIuL3VuaXRzLmpzXCI7XHJcbmltcG9ydCB7IGNhbSB9IGZyb20gXCIuLi91dGlscy9jb250cm9scy5qc1wiO1xyXG5pbXBvcnQgeyBtYXRyNCwgdmVjMyB9IGZyb20gXCIuLi91dGlscy9tdGguanNcIjtcclxuaW1wb3J0IHsgc2hhZGVyQWRkLCB1c2VTaGFkZXIgfSBmcm9tIFwiLi4vcm5kL3NoYWRlcnMuanNcIjtcclxuXHJcbmNvbnN0IHRldHJWZXJ0ZXhQb3NpdGlvbnMgPSBuZXcgRmxvYXQzMkFycmF5KFtcclxuICAxLCAxLCAxLCAxLCAtMSwgLTEsIC0xLCAxLCAtMSwgLTEsIC0xLCAxLFxyXG5dKTtcclxuY29uc3QgdGV0clZlcnRleEluZGljZXMgPSBuZXcgVWludDE2QXJyYXkoWzAsIDMsIDEsIDAsIDIsIDMsIDAsIDEsIDIsIDMsIDIsIDFdKTtcclxuXHJcbmxldCB0ZXRyVmVydGV4QXJyYXk7XHJcbmxldCBzaGFkZXJJO1xyXG5mdW5jdGlvbiByZW5kZXIoKSB7XHJcbiAgZ2wudXNlUHJvZ3JhbShzaGFkZXJJLnNoYWRlclByb2dyYW0pO1xyXG4gIGxldCB0aW1lTG9jID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHNoYWRlckkuc2hhZGVyUHJvZ3JhbSwgXCJ0aW1lXCIpO1xyXG4gIGNvbnN0IHByb2plY3Rpb25Mb2MgPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24oXHJcbiAgICBzaGFkZXJJLnNoYWRlclByb2dyYW0sXHJcbiAgICBcInByb2plY3Rpb25cIlxyXG4gICk7XHJcbiAgY29uc3QgbW9kZWxWaWV3TG9jID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxyXG4gICAgc2hhZGVySS5zaGFkZXJQcm9ncmFtLFxyXG4gICAgXCJtb2RlbFZpZXdcIlxyXG4gICk7XHJcbiAgY29uc3Qgd29ybGRMb2MgPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24oc2hhZGVySS5zaGFkZXJQcm9ncmFtLCBcIndvcmxkXCIpO1xyXG4gIC8vICBkcmF3IHRldHJcclxuICBnbC5iaW5kVmVydGV4QXJyYXkodGV0clZlcnRleEFycmF5KTtcclxuICBnbC51bmlmb3JtTWF0cml4NGZ2KFxyXG4gICAgcHJvamVjdGlvbkxvYyxcclxuICAgIGZhbHNlLFxyXG4gICAgbmV3IEZsb2F0MzJBcnJheShjYW0ubWF0clByb2ouYSgpLmpvaW4oKS5zcGxpdChcIixcIikpXHJcbiAgKTtcclxuICBnbC51bmlmb3JtTWF0cml4NGZ2KFxyXG4gICAgbW9kZWxWaWV3TG9jLFxyXG4gICAgZmFsc2UsXHJcbiAgICBuZXcgRmxvYXQzMkFycmF5KGNhbS5tYXRyVmlldy5hKCkuam9pbigpLnNwbGl0KFwiLFwiKSlcclxuICApO1xyXG4gIGxldCBteU1hdHI0ID0gbmV3IG1hdHI0KCk7XHJcbiAgZ2wudW5pZm9ybU1hdHJpeDRmdihcclxuICAgIHdvcmxkTG9jLFxyXG4gICAgZmFsc2UsXHJcbiAgICBuZXcgRmxvYXQzMkFycmF5KFxyXG4gICAgICBteU1hdHI0XHJcbiAgICAgICAgLnJvdGF0ZVooRGF0ZS5ub3coKSAvIDMwKVxyXG4gICAgICAgIC5tdWwobXlNYXRyNC50cmFuc2xhdGUobmV3IHZlYzMoMCwgMywgMCkpKVxyXG4gICAgICAgIC5hKClcclxuICAgICAgICAuam9pbigpXHJcbiAgICAgICAgLnNwbGl0KFwiLFwiKVxyXG4gICAgKVxyXG4gICk7XHJcbiAgLyogbW9yZSBjb21wbGljYXRlZCovXHJcblxyXG4gIGNvbnN0IGxpZ2h0RGlyTG9jID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHNoYWRlckkuc2hhZGVyUHJvZ3JhbSwgXCJsaWdodERpclwiKTtcclxuICBjb25zdCBjYW1Mb2NMb2MgPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24oc2hhZGVySS5zaGFkZXJQcm9ncmFtLCBcImNhbUxvY1wiKTtcclxuICBnbC51bmlmb3JtMWYodGltZUxvYywgRGF0ZS5ub3coKSk7XHJcbiAgZ2wudW5pZm9ybTNmKGxpZ2h0RGlyTG9jLCAxLCAyLCAzKTtcclxuICBnbC51bmlmb3JtM2YoY2FtTG9jTG9jLCBjYW0ubG9jLngsIGNhbS5sb2MueSwgY2FtLmxvYy56KTtcclxuXHJcbiAgLyogQ3VzdG9taXNlYWJsZSBzdHVmZiAqL1xyXG5cclxuICBjb25zdCBrYUxvYyA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihzaGFkZXJJLnNoYWRlclByb2dyYW0sIFwia2FcIik7XHJcbiAgY29uc3Qga2RMb2MgPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24oc2hhZGVySS5zaGFkZXJQcm9ncmFtLCBcImtkXCIpO1xyXG4gIGNvbnN0IGtzTG9jID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHNoYWRlckkuc2hhZGVyUHJvZ3JhbSwgXCJrc1wiKTtcclxuICBjb25zdCBwaExvYyA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihzaGFkZXJJLnNoYWRlclByb2dyYW0sIFwicGhcIik7XHJcblxyXG4gIGdsLnVuaWZvcm0zZihrYUxvYywgMC4yNDcyNSwgMC4yMjQ1LCAwLjA2NDUpO1xyXG4gIGdsLnVuaWZvcm0zZihrZExvYywgMC4zNDYxNSwgMC4zMTQzLCAwLjA5MDMpO1xyXG4gIGdsLnVuaWZvcm0zZihrc0xvYywgMC43OTczNTcsIDAuNzIzOTkxLCAwLjIwODAwNik7XHJcbiAgZ2wudW5pZm9ybTFmKHBoTG9jLCA4My4yKTtcclxuXHJcbiAgZ2wuZHJhd0VsZW1lbnRzKFxyXG4gICAgZ2wuVFJJQU5HTEVTLFxyXG4gICAgMTIsIC8vIG51bSB2ZXJ0aWNlcyB0byBwcm9jZXNzXHJcbiAgICBnbC5VTlNJR05FRF9TSE9SVCwgLy8gdHlwZSBvZiBpbmRpY2VzXHJcbiAgICAwIC8vIG9mZnNldCBvbiBieXRlcyB0byBpbmRpY2VzXHJcbiAgKTtcclxufVxyXG5hc3luYyBmdW5jdGlvbiBpbml0KCkge1xyXG4gIC8qIFRldHIgKi9cclxuICBzaGFkZXJJID0gYXdhaXQgc2hhZGVyQWRkKFwid2l0aExpZ2h0XCIpO1xyXG4gIHRldHJWZXJ0ZXhBcnJheSA9IGdsLmNyZWF0ZVZlcnRleEFycmF5KCk7XHJcbiAgZ2wuYmluZFZlcnRleEFycmF5KHRldHJWZXJ0ZXhBcnJheSk7XHJcbiAgdXNlU2hhZGVyKHNoYWRlckksIHRldHJWZXJ0ZXhQb3NpdGlvbnMsIHRldHJWZXJ0ZXhJbmRpY2VzKTtcclxuICBnbC5iaW5kVmVydGV4QXJyYXkobnVsbCk7XHJcbiAgLyogYWFhICovXHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIHVuaXRUZXRyQWRkKCkge1xyXG4gIHVuaXRBZGQoaW5pdCwgcmVuZGVyLCBcIlRldHJhaGVkcm9uXCIpO1xyXG59XHJcbiIsImltcG9ydCB7IGdsIH0gZnJvbSBcIi4uL21haW4uanNcIjtcclxuaW1wb3J0IHsgdW5pdEFkZCB9IGZyb20gXCIuL3VuaXRzLmpzXCI7XHJcbmltcG9ydCB7IGNhbSB9IGZyb20gXCIuLi91dGlscy9jb250cm9scy5qc1wiO1xyXG5pbXBvcnQgeyBtYXRyNCwgdmVjMyB9IGZyb20gXCIuLi91dGlscy9tdGguanNcIjtcclxuaW1wb3J0IHsgc2hhZGVyQWRkLCB1c2VTaGFkZXIgfSBmcm9tIFwiLi4vcm5kL3NoYWRlcnMuanNcIjtcclxuXHJcbmNvbnN0IG9jdGFWZXJ0ZXhQb3NpdGlvbnMgPSBuZXcgRmxvYXQzMkFycmF5KFtcclxuICAxLCAwLCAwLCAwLCAxLCAwLCAwLCAwLCAxLCAtMSwgMCwgMCwgMCwgLTEsIDAsIDAsIDAsIC0xLFxyXG5dKTtcclxuY29uc3Qgb2N0YVZlcnRleEluZGljZXMgPSBuZXcgVWludDE2QXJyYXkoW1xyXG4gIDAsIDEsIDIsIDAsIDIsIDQsIDQsIDIsIDMsIDMsIDIsIDEsXHJcblxyXG4gIDUsIDEsIDAsIDUsIDAsIDQsIDUsIDQsIDMsIDUsIDMsIDEsXHJcbl0pO1xyXG5cclxubGV0IG9jdGFWZXJ0ZXhBcnJheTtcclxubGV0IHNoYWRlckk7XHJcbmZ1bmN0aW9uIHJlbmRlcigpIHtcclxuICBnbC51c2VQcm9ncmFtKHNoYWRlckkuc2hhZGVyUHJvZ3JhbSk7XHJcbiAgbGV0IHRpbWVMb2MgPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24oc2hhZGVySS5zaGFkZXJQcm9ncmFtLCBcInRpbWVcIik7XHJcbiAgY29uc3QgcHJvamVjdGlvbkxvYyA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihcclxuICAgIHNoYWRlckkuc2hhZGVyUHJvZ3JhbSxcclxuICAgIFwicHJvamVjdGlvblwiXHJcbiAgKTtcclxuICBjb25zdCBtb2RlbFZpZXdMb2MgPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24oXHJcbiAgICBzaGFkZXJJLnNoYWRlclByb2dyYW0sXHJcbiAgICBcIm1vZGVsVmlld1wiXHJcbiAgKTtcclxuICBjb25zdCBsaWdodERpckxvYyA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihzaGFkZXJJLnNoYWRlclByb2dyYW0sIFwibGlnaHREaXJcIik7XHJcbiAgY29uc3QgY2FtTG9jTG9jID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHNoYWRlckkuc2hhZGVyUHJvZ3JhbSwgXCJjYW1Mb2NcIik7XHJcbiAgY29uc3Qgd29ybGRMb2MgPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24oc2hhZGVySS5zaGFkZXJQcm9ncmFtLCBcIndvcmxkXCIpO1xyXG4gIC8vICBkcmF3IG9jdGFcclxuICBnbC5iaW5kVmVydGV4QXJyYXkob2N0YVZlcnRleEFycmF5KTtcclxuICBnbC51bmlmb3JtTWF0cml4NGZ2KFxyXG4gICAgcHJvamVjdGlvbkxvYyxcclxuICAgIGZhbHNlLFxyXG4gICAgbmV3IEZsb2F0MzJBcnJheShjYW0ubWF0clByb2ouYSgpLmpvaW4oKS5zcGxpdChcIixcIikpXHJcbiAgKTtcclxuICBnbC51bmlmb3JtTWF0cml4NGZ2KFxyXG4gICAgbW9kZWxWaWV3TG9jLFxyXG4gICAgZmFsc2UsXHJcbiAgICBuZXcgRmxvYXQzMkFycmF5KGNhbS5tYXRyVmlldy5hKCkuam9pbigpLnNwbGl0KFwiLFwiKSlcclxuICApO1xyXG4gIGxldCBteU1hdHI0ID0gbmV3IG1hdHI0KCk7XHJcblxyXG4gIGdsLnVuaWZvcm0xZih0aW1lTG9jLCBEYXRlLm5vdygpKTtcclxuICBnbC51bmlmb3JtM2YobGlnaHREaXJMb2MsIDEsIDIsIDMpO1xyXG4gIGdsLnVuaWZvcm0zZihjYW1Mb2NMb2MsIGNhbS5sb2MueCwgY2FtLmxvYy55LCBjYW0ubG9jLnopO1xyXG5cclxuICAvKiBDdXN0b21pc2VhYmxlIHN0dWZmICovXHJcbiAgZ2wudW5pZm9ybU1hdHJpeDRmdihcclxuICAgIHdvcmxkTG9jLFxyXG4gICAgZmFsc2UsXHJcbiAgICBuZXcgRmxvYXQzMkFycmF5KFxyXG4gICAgICBteU1hdHI0XHJcbiAgICAgICAgLnJvdGF0ZVkoTWF0aC5zaW4oRGF0ZS5ub3coKSAvIDEwMDApICogMTgwKVxyXG4gICAgICAgIC5tdWwobXlNYXRyNC50cmFuc2xhdGUobmV3IHZlYzMoMywgMCwgMCkpKVxyXG4gICAgICAgIC5hKClcclxuICAgICAgICAuam9pbigpXHJcbiAgICAgICAgLnNwbGl0KFwiLFwiKVxyXG4gICAgKVxyXG4gICk7XHJcbiAgY29uc3Qga2FMb2MgPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24oc2hhZGVySS5zaGFkZXJQcm9ncmFtLCBcImthXCIpO1xyXG4gIGNvbnN0IGtkTG9jID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHNoYWRlckkuc2hhZGVyUHJvZ3JhbSwgXCJrZFwiKTtcclxuICBjb25zdCBrc0xvYyA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihzaGFkZXJJLnNoYWRlclByb2dyYW0sIFwia3NcIik7XHJcbiAgY29uc3QgcGhMb2MgPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24oc2hhZGVySS5zaGFkZXJQcm9ncmFtLCBcInBoXCIpO1xyXG5cclxuICBnbC51bmlmb3JtM2Yoa2FMb2MsIDAuMDUzNzUsIDAuMDUsIDAuMDY2MjUpO1xyXG4gIGdsLnVuaWZvcm0zZihrZExvYywgMC4xODI3NSwgMC4xNywgMC4yMjUyNSk7XHJcbiAgZ2wudW5pZm9ybTNmKGtzTG9jLCAwLjMzMjc0MSwgMC4zMjg2MzQsIDAuMzQ2NDM1KTtcclxuICBnbC51bmlmb3JtMWYocGhMb2MsIDM4LjQpO1xyXG5cclxuICBnbC5kcmF3RWxlbWVudHMoXHJcbiAgICBnbC5UUklBTkdMRVMsXHJcbiAgICAyNCwgLy8gbnVtIHZlcnRpY2VzIHRvIHByb2Nlc3NcclxuICAgIGdsLlVOU0lHTkVEX1NIT1JULCAvLyB0eXBlIG9mIGluZGljZXNcclxuICAgIDAgLy8gb2Zmc2V0IG9uIGJ5dGVzIHRvIGluZGljZXNcclxuICApO1xyXG59XHJcbmFzeW5jIGZ1bmN0aW9uIGluaXQoKSB7XHJcbiAgLyogT2N0YSAqL1xyXG5cclxuICBzaGFkZXJJID0gYXdhaXQgc2hhZGVyQWRkKFwid2l0aExpZ2h0XCIpO1xyXG4gIG9jdGFWZXJ0ZXhBcnJheSA9IGdsLmNyZWF0ZVZlcnRleEFycmF5KCk7XHJcbiAgZ2wuYmluZFZlcnRleEFycmF5KG9jdGFWZXJ0ZXhBcnJheSk7XHJcbiAgdXNlU2hhZGVyKHNoYWRlckksIG9jdGFWZXJ0ZXhQb3NpdGlvbnMsIG9jdGFWZXJ0ZXhJbmRpY2VzKTtcclxuICBnbC5iaW5kVmVydGV4QXJyYXkobnVsbCk7XHJcblxyXG4gIC8qIGFhYSAqL1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiB1bml0T2N0YUFkZCgpIHtcclxuICB1bml0QWRkKGluaXQsIHJlbmRlciwgXCJPY3RhaGVkcm9uXCIpO1xyXG59XHJcbiIsImltcG9ydCB7IGdsIH0gZnJvbSBcIi4uL21haW4uanNcIjtcclxuaW1wb3J0IHsgdW5pdEFkZCB9IGZyb20gXCIuL3VuaXRzLmpzXCI7XHJcbmltcG9ydCB7IGNhbSB9IGZyb20gXCIuLi91dGlscy9jb250cm9scy5qc1wiO1xyXG5pbXBvcnQgeyBtYXRyNCwgdmVjMyB9IGZyb20gXCIuLi91dGlscy9tdGguanNcIjtcclxuaW1wb3J0IHsgc2hhZGVyQWRkLCB1c2VTaGFkZXIgfSBmcm9tIFwiLi4vcm5kL3NoYWRlcnMuanNcIjtcclxuXHJcbmNvbnN0IFBISSA9IDEuNjE4MDMzOTg4NztcclxuXHJcbmNvbnN0IGljb1ZlcnRleFBvc2l0aW9ucyA9IG5ldyBGbG9hdDMyQXJyYXkoW1xyXG4gIDAsXHJcbiAgMSxcclxuICBQSEksXHJcbiAgMSxcclxuICBQSEksXHJcbiAgMCxcclxuICBQSEksXHJcbiAgMCxcclxuICAxLFxyXG5cclxuICAwLFxyXG4gIC0xLFxyXG4gIFBISSxcclxuICAtMSxcclxuICBQSEksXHJcbiAgMCxcclxuICBQSEksXHJcbiAgMCxcclxuICAtMSxcclxuXHJcbiAgMCxcclxuICAxLFxyXG4gIC1QSEksXHJcbiAgMSxcclxuICAtUEhJLFxyXG4gIDAsXHJcbiAgLVBISSxcclxuICAwLFxyXG4gIDEsXHJcblxyXG4gIDAsXHJcbiAgLTEsXHJcbiAgLVBISSxcclxuICAtMSxcclxuICAtUEhJLFxyXG4gIDAsXHJcbiAgLVBISSxcclxuICAwLFxyXG4gIC0xLFxyXG5dKTtcclxuXHJcbmNvbnN0IGljb1ZlcnRleEluZGljZXMgPSBuZXcgVWludDE2QXJyYXkoW1xyXG4gIDAsIDIsIDEsIDAsIDEsIDQsIDAsIDQsIDgsIDAsIDgsIDMsIDAsIDMsIDIsXHJcblxyXG4gIDExLCA4LCA0LCAxMSwgNCwgNiwgMTEsIDYsIDksIDExLCA5LCAxMCwgMTEsIDEwLCA5LFxyXG5cclxuICA3LCAzLCAxMCwgNywgMTAsIDksIDcsIDksIDUsIDcsIDUsIDIsIDcsIDIsIDMsXHJcblxyXG4gIDIsIDUsIDEsIDEsIDUsIDYsIDUsIDYsIDksIDEwLCAzLCA4LCAxLCA0LCA2LFxyXG5dKTtcclxuXHJcbmxldCBpY29WZXJ0ZXhBcnJheTtcclxubGV0IHNoYWRlckk7XHJcbmZ1bmN0aW9uIHJlbmRlcigpIHtcclxuICBnbC51c2VQcm9ncmFtKHNoYWRlckkuc2hhZGVyUHJvZ3JhbSk7XHJcbiAgbGV0IHRpbWVMb2MgPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24oc2hhZGVySS5zaGFkZXJQcm9ncmFtLCBcInRpbWVcIik7XHJcbiAgY29uc3QgcHJvamVjdGlvbkxvYyA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihcclxuICAgIHNoYWRlckkuc2hhZGVyUHJvZ3JhbSxcclxuICAgIFwicHJvamVjdGlvblwiXHJcbiAgKTtcclxuICBjb25zdCBtb2RlbFZpZXdMb2MgPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24oXHJcbiAgICBzaGFkZXJJLnNoYWRlclByb2dyYW0sXHJcbiAgICBcIm1vZGVsVmlld1wiXHJcbiAgKTtcclxuICBjb25zdCB3b3JsZExvYyA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihzaGFkZXJJLnNoYWRlclByb2dyYW0sIFwid29ybGRcIik7XHJcbiAgLy8gIGRyYXcgaWNvXHJcbiAgZ2wuYmluZFZlcnRleEFycmF5KGljb1ZlcnRleEFycmF5KTtcclxuICBnbC51bmlmb3JtTWF0cml4NGZ2KFxyXG4gICAgcHJvamVjdGlvbkxvYyxcclxuICAgIGZhbHNlLFxyXG4gICAgbmV3IEZsb2F0MzJBcnJheShjYW0ubWF0clByb2ouYSgpLmpvaW4oKS5zcGxpdChcIixcIikpXHJcbiAgKTtcclxuICBnbC51bmlmb3JtTWF0cml4NGZ2KFxyXG4gICAgbW9kZWxWaWV3TG9jLFxyXG4gICAgZmFsc2UsXHJcbiAgICBuZXcgRmxvYXQzMkFycmF5KGNhbS5tYXRyVmlldy5hKCkuam9pbigpLnNwbGl0KFwiLFwiKSlcclxuICApO1xyXG4gIGxldCBteU1hdHI0ID0gbmV3IG1hdHI0KCk7XHJcbiAgZ2wudW5pZm9ybU1hdHJpeDRmdihcclxuICAgIHdvcmxkTG9jLFxyXG4gICAgZmFsc2UsXHJcbiAgICBuZXcgRmxvYXQzMkFycmF5KFxyXG4gICAgICBteU1hdHI0XHJcbiAgICAgICAgLnJvdGF0ZVgoRGF0ZS5ub3coKSAvIDEwKVxyXG4gICAgICAgIC5tdWwobXlNYXRyNC50cmFuc2xhdGUobmV3IHZlYzMoLTMsIDAsIDApKSlcclxuICAgICAgICAuYSgpXHJcbiAgICAgICAgLmpvaW4oKVxyXG4gICAgICAgIC5zcGxpdChcIixcIilcclxuICAgIClcclxuICApO1xyXG4gIGNvbnN0IGNhbUxvY0xvYyA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihzaGFkZXJJLnNoYWRlclByb2dyYW0sIFwiY2FtTG9jXCIpO1xyXG4gIGNvbnN0IGxpZ2h0RGlyTG9jID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHNoYWRlckkuc2hhZGVyUHJvZ3JhbSwgXCJsaWdodERpclwiKTtcclxuXHJcbiAgZ2wudW5pZm9ybTNmKGxpZ2h0RGlyTG9jLCAxLCAxLCAxKTtcclxuICBnbC51bmlmb3JtM2YoY2FtTG9jTG9jLCBjYW0ubG9jLngsIGNhbS5sb2MueSwgY2FtLmxvYy56KTtcclxuICAvKiBDdXN0b21pc2VhYmxlIHN0dWZmICovXHJcblxyXG4gIGNvbnN0IGthTG9jID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHNoYWRlckkuc2hhZGVyUHJvZ3JhbSwgXCJrYVwiKTtcclxuICBjb25zdCBrZExvYyA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihzaGFkZXJJLnNoYWRlclByb2dyYW0sIFwia2RcIik7XHJcbiAgY29uc3Qga3NMb2MgPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24oc2hhZGVySS5zaGFkZXJQcm9ncmFtLCBcImtzXCIpO1xyXG4gIGNvbnN0IHBoTG9jID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHNoYWRlckkuc2hhZGVyUHJvZ3JhbSwgXCJwaFwiKTtcclxuICBnbC51bmlmb3JtM2YoXHJcbiAgICBrYUxvYyxcclxuICAgIE1hdGguc2luKERhdGUubm93KCkgLyA1MDApIC8gNCArIDAuMjUsXHJcbiAgICBNYXRoLmNvcyhEYXRlLm5vdygpIC8gMzAwKSAvIDQgKyAwLjI1LFxyXG4gICAgTWF0aC5zaW4oRGF0ZS5ub3coKSAvIDEwMDAgKyA1KSAvIDQgKyAwLjI1XHJcbiAgKTtcclxuICBnbC51bmlmb3JtM2Yoa2RMb2MsIDAuMDc1NjgsIDAuNjE0MjQsIDAuMDc1NjgpO1xyXG4gIGdsLnVuaWZvcm0zZihrc0xvYywgMC42MzMsIDAuNzI3ODExLCAwLjYzMyk7XHJcbiAgZ2wudW5pZm9ybTFmKHBoTG9jLCA3Ni44KTtcclxuXHJcbiAgZ2wudW5pZm9ybTFmKHRpbWVMb2MsIERhdGUubm93KCkpO1xyXG5cclxuICBnbC5kcmF3RWxlbWVudHMoXHJcbiAgICBnbC5UUklBTkdMRVMsXHJcbiAgICA2MCwgLy8gbnVtIHZlcnRpY2VzIHRvIHByb2Nlc3NcclxuICAgIGdsLlVOU0lHTkVEX1NIT1JULCAvLyB0eXBlIG9mIGluZGljZXNcclxuICAgIDAgLy8gb2Zmc2V0IG9uIGJ5dGVzIHRvIGluZGljZXNcclxuICApO1xyXG59XHJcbmFzeW5jIGZ1bmN0aW9uIGluaXQoKSB7XHJcbiAgLyogSWNvICovXHJcbiAgc2hhZGVySSA9IGF3YWl0IHNoYWRlckFkZChcIndpdGhMaWdodFwiKTtcclxuICBpY29WZXJ0ZXhBcnJheSA9IGdsLmNyZWF0ZVZlcnRleEFycmF5KCk7XHJcbiAgZ2wuYmluZFZlcnRleEFycmF5KGljb1ZlcnRleEFycmF5KTtcclxuICB1c2VTaGFkZXIoc2hhZGVySSwgaWNvVmVydGV4UG9zaXRpb25zLCBpY29WZXJ0ZXhJbmRpY2VzKTtcclxuICBnbC5iaW5kVmVydGV4QXJyYXkobnVsbCk7XHJcbiAgLy9nbC5zaGFkZXJNb2RlbChnbC5GTEFUKTtcclxuICAvKiBhYWEgKi9cclxufVxyXG5leHBvcnQgZnVuY3Rpb24gdW5pdEljb0FkZCgpIHtcclxuICB1bml0QWRkKGluaXQsIHJlbmRlciwgXCJJY29zYWhlZHJvblwiKTtcclxufVxyXG4iLCJpbXBvcnQgeyBnbCB9IGZyb20gXCIuLi9tYWluLmpzXCI7XHJcbmltcG9ydCB7IHVuaXRBZGQgfSBmcm9tIFwiLi4vdW5pdHMvdW5pdHMuanNcIjtcclxuaW1wb3J0IHsgbWF0cjQsIHZlYzMsIHZlYzQgfSBmcm9tIFwiLi4vdXRpbHMvbXRoLmpzXCI7XHJcbmltcG9ydCB7IGNhbSB9IGZyb20gXCIuLi91dGlscy9jb250cm9scy5qc1wiO1xyXG5pbXBvcnQgeyBzaGFkZXJBZGQsIHVzZVNoYWRlciB9IGZyb20gXCIuLi9ybmQvc2hhZGVycy5qc1wiO1xyXG5cclxuY29uc3QgY3ViZVZlcnRleFBvc2l0aW9ucyA9IG5ldyBGbG9hdDMyQXJyYXkoW1xyXG4gIDAsIDEsIDAsIDAsIDAsIDAuNSwgMCwgMCwgLTAuNSxcclxuXHJcbiAgMCwgMSwgMCwgMC41LCAwLCAwLCAtMC41LCAwLCAwLFxyXG5dKTtcclxuXHJcbmxldCBtYXRyaWNlcyA9IFtdO1xyXG5sZXQgd29ybGRMb2M7XHJcbmxldCBjb2xvckxvYztcclxubGV0IGN1YmVWZXJ0ZXhBcnJheTtcclxubGV0IHNoYWRlckk7XHJcbmZ1bmN0aW9uIHJlbmRlcigpIHtcclxuICBnbC51c2VQcm9ncmFtKHNoYWRlckkuc2hhZGVyUHJvZ3JhbSk7XHJcbiAgZ2wuYmluZFZlcnRleEFycmF5KGN1YmVWZXJ0ZXhBcnJheSk7XHJcblxyXG4gIGNvbnN0IHByb2plY3Rpb25Mb2MgPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24oXHJcbiAgICBzaGFkZXJJLnNoYWRlclByb2dyYW0sXHJcbiAgICBcInByb2plY3Rpb25cIlxyXG4gICk7XHJcbiAgY29uc3QgbW9kZWxWaWV3TG9jID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxyXG4gICAgc2hhZGVySS5zaGFkZXJQcm9ncmFtLFxyXG4gICAgXCJtb2RlbFZpZXdcIlxyXG4gICk7XHJcbiAgd29ybGRMb2MgPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24oc2hhZGVySS5zaGFkZXJQcm9ncmFtLCBcIndvcmxkXCIpO1xyXG4gIGNvbG9yTG9jID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHNoYWRlckkuc2hhZGVyUHJvZ3JhbSwgXCJjb2xvclwiKTtcclxuICBnbC51bmlmb3JtTWF0cml4NGZ2KFxyXG4gICAgcHJvamVjdGlvbkxvYyxcclxuICAgIGZhbHNlLFxyXG4gICAgbmV3IEZsb2F0MzJBcnJheShjYW0ubWF0clByb2ouYSgpLmpvaW4oKS5zcGxpdChcIixcIikpXHJcbiAgKTtcclxuICBnbC51bmlmb3JtTWF0cml4NGZ2KFxyXG4gICAgbW9kZWxWaWV3TG9jLFxyXG4gICAgZmFsc2UsXHJcbiAgICBuZXcgRmxvYXQzMkFycmF5KGNhbS5tYXRyVmlldy5hKCkuam9pbigpLnNwbGl0KFwiLFwiKSlcclxuICApO1xyXG5cclxuICBsZXQgY29sb3IgPSBuZXcgdmVjNCgwLjgsIDAuNDcsIDAuMywgMSk7XHJcbiAgZ2wudW5pZm9ybTRmKGNvbG9yTG9jLCBjb2xvci54LCBjb2xvci55LCBjb2xvci56LCBjb2xvci53KTtcclxuXHJcbiAgbWF0cmljZXMuZm9yRWFjaCgoaXQpID0+IHtcclxuICAgIGdsLnVuaWZvcm1NYXRyaXg0ZnYod29ybGRMb2MsIGZhbHNlLCBpdCk7XHJcbiAgICBnbC5kcmF3QXJyYXlzKFxyXG4gICAgICBnbC5UUklBTkdMRVMsXHJcbiAgICAgIDAsXHJcbiAgICAgIDYgLy8gbnVtIHZlcnRpY2VzIHRvIHByb2Nlc3NcclxuICAgICAgLy8gZ2wuVU5TSUdORURfU0hPUlQsIC8vIHR5cGUgb2YgaW5kaWNlc1xyXG4gICAgICAvLzAgLy8gb2Zmc2V0IG9uIGJ5dGVzIHRvIGluZGljZVxyXG4gICAgKTtcclxuICB9KTtcclxuICBtYXRyaWNlcyA9IFtdO1xyXG59XHJcblxyXG5hc3luYyBmdW5jdGlvbiBpbml0KCkge1xyXG4gIC8qIFRldHIgKi9cclxuICBzaGFkZXJJID0gYXdhaXQgc2hhZGVyQWRkKFwibWFya2Vyc1wiKTtcclxuICBjdWJlVmVydGV4QXJyYXkgPSBnbC5jcmVhdGVWZXJ0ZXhBcnJheSgpO1xyXG4gIGdsLmJpbmRWZXJ0ZXhBcnJheShjdWJlVmVydGV4QXJyYXkpO1xyXG4gIHVzZVNoYWRlcihzaGFkZXJJLCBjdWJlVmVydGV4UG9zaXRpb25zKTtcclxuICBnbC5iaW5kVmVydGV4QXJyYXkobnVsbCk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB1bml0TXJrQWRkKCkge1xyXG4gIHVuaXRBZGQoaW5pdCwgcmVuZGVyLCBcIk1hcmtlciBzeXN0ZW1cIik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBtYXJrZXJEcmF3KFxyXG4gIHN0YXJ0ID0gbmV3IHZlYzMoMCksXHJcbiAgZW5kID0gbmV3IHZlYzMoMTAwKSxcclxuICB3aWR0aCA9IDFcclxuICAvLyAgIGNvbG9yID0gbmV3IHZlYzQoMSwgMCwgMSwgMSlcclxuKSB7XHJcbiAgbGV0IG15TWF0cjQgPSBuZXcgbWF0cjQoKTtcclxuICBsZXQgdXAgPSBuZXcgdmVjMygwLCAxLCAwKTtcclxuICAvL2xldCByaWdodCA9IG5ldyB2ZWMzKDAsIDAsIDEpO1xyXG5cclxuICBsZXQgY2VudGVyZWQgPSBlbmQuc3ViKHN0YXJ0KTtcclxuICBtYXRyaWNlcy5wdXNoKFxyXG4gICAgbmV3IEZsb2F0MzJBcnJheShcclxuICAgICAgbXlNYXRyNFxyXG4gICAgICAgIC5zY2FsZShuZXcgdmVjMyh3aWR0aCwgY2VudGVyZWQubGVuKCksIHdpZHRoKSlcclxuICAgICAgICAvKi5tdWwoXHJcbiAgICAgICAgICBteU1hdHI0LnJvdGF0ZVooXHJcbiAgICAgICAgICAgICh1cC5hbmdsZShuZXcgdmVjMyhjZW50ZXJlZC54LCBjZW50ZXJlZC55LCAwKSwgcmlnaHQpICogMTgwKSAvXHJcbiAgICAgICAgICAgICAgTWF0aC5QSVxyXG4gICAgICAgICAgKVxyXG4gICAgICAgIClcclxuICAgICAgICAubXVsKFxyXG4gICAgICAgICAgbXlNYXRyNC5yb3RhdGVZKFxyXG4gICAgICAgICAgICA5MCArXHJcbiAgICAgICAgICAgICAgKHJpZ2h0LmFuZ2xlKG5ldyB2ZWMzKGNlbnRlcmVkLngsIDAsIGNlbnRlcmVkLnopKSAqIDE4MCkgLyBNYXRoLlBJXHJcbiAgICAgICAgICApXHJcbiAgICAgICAgKSovXHJcbiAgICAgICAgLm11bChcclxuICAgICAgICAgIG15TWF0cjQucm90YXRlKDE4MCwgY2VudGVyZWQubm9ybWFsaXplKCkubGVycCh1cCwgMC41KS5ub3JtYWxpemUoKSlcclxuICAgICAgICApXHJcbiAgICAgICAgLm11bChteU1hdHI0LnRyYW5zbGF0ZShzdGFydCkpXHJcbiAgICAgICAgLmEoKVxyXG4gICAgICAgIC5qb2luKClcclxuICAgICAgICAuc3BsaXQoXCIsXCIpXHJcbiAgICApXHJcbiAgKTtcclxufVxyXG4iLCJpbXBvcnQgeyB1bml0QWRkIH0gZnJvbSBcIi4vdW5pdHMuanNcIjtcclxuaW1wb3J0IHsgdmVjMywgdmVjNCB9IGZyb20gXCIuLi91dGlscy9tdGguanNcIjtcclxuaW1wb3J0IHsgbWFya2VyRHJhdyB9IGZyb20gXCIuLi91dGlscy9tYXJrZXJzLmpzXCI7XHJcbmltcG9ydCB7IGNhbSB9IGZyb20gXCIuLi91dGlscy9jb250cm9scy5qc1wiO1xyXG5cclxuZnVuY3Rpb24gcmVuZGVyKCkge1xyXG4gIG1hcmtlckRyYXcoXHJcbiAgICBuZXcgdmVjMygwLCAwLCAwKSxcclxuICAgIGNhbS51c2VyTG9jLnN1YihuZXcgdmVjMygwLCAxLCAwKSksXHJcbiAgICAxLFxyXG4gICAgbmV3IHZlYzQoMC41LCAwLCAwLjMsIDEpXHJcbiAgKTtcclxuICBtYXJrZXJEcmF3KFxyXG4gICAgbmV3IHZlYzMoMCwgMCwgMCksXHJcbiAgICBuZXcgdmVjMygxMCwgMTAsIDEwKSxcclxuICAgIDEsXHJcbiAgICBuZXcgdmVjNCgwLjUsIDAsIDAuMywgMSlcclxuICApO1xyXG59XHJcbmFzeW5jIGZ1bmN0aW9uIGluaXQoKSB7fVxyXG5leHBvcnQgZnVuY3Rpb24gdW5pdERiZ0FkZCgpIHtcclxuICB1bml0QWRkKGluaXQsIHJlbmRlciwgXCJEZWJ1Z1wiKTtcclxufVxyXG4iLCJpbXBvcnQgeyB1bml0QWRkIH0gZnJvbSBcIi4vdW5pdHMuanNcIjtcclxuaW1wb3J0IHsgdmVjMywgdmVjNCB9IGZyb20gXCIuLi91dGlscy9tdGguanNcIjtcclxuaW1wb3J0IHsgbWFya2VyRHJhdyB9IGZyb20gXCIuLi91dGlscy9tYXJrZXJzLmpzXCI7XHJcblxyXG5mdW5jdGlvbiByZW5kZXIoKSB7XHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCAzMDA7IGkrKykge1xyXG4gICAgbWFya2VyRHJhdyhcclxuICAgICAgbmV3IHZlYzMoaSAqIDMsIDAsIDApLFxyXG4gICAgICBuZXcgdmVjMyhpICogMywgaSwgTWF0aC5zaW4oaSkgKiBpICogMiksXHJcbiAgICAgIDAuMSAqIGksXHJcbiAgICAgIG5ldyB2ZWM0KDAuNSwgMCwgMC4zLCAxKVxyXG4gICAgKTtcclxuICB9XHJcbiAgbWFya2VyRHJhdyhuZXcgdmVjMygwLCAwLCAwKSwgbmV3IHZlYzMoMSwgMSwgMSksIDEsIG5ldyB2ZWM0KDAuNSwgMCwgMC4zLCAxKSk7XHJcbiAgbWFya2VyRHJhdyhcclxuICAgIG5ldyB2ZWMzKDAsIDAsIDApLFxyXG4gICAgbmV3IHZlYzMoLTEsIC0xLCAtMSksXHJcbiAgICAxLFxyXG4gICAgbmV3IHZlYzQoMC41LCAwLCAwLjMsIDEpXHJcbiAgKTtcclxufVxyXG5hc3luYyBmdW5jdGlvbiBpbml0KCkge31cclxuZXhwb3J0IGZ1bmN0aW9uIHVuaXRNYXJrZXJzQWRkKCkge1xyXG4gIHVuaXRBZGQoaW5pdCwgcmVuZGVyLCBcIm1hcmtlcnNcIik7XHJcbn1cclxuIiwiaW1wb3J0IHsgZ2wgfSBmcm9tIFwiLi4vbWFpbi5qc1wiO1xyXG5pbXBvcnQgeyBjYW0gfSBmcm9tIFwiLi4vdXRpbHMvY29udHJvbHMuanNcIjtcclxuaW1wb3J0IHsgbWF0cjQsIHZlYzIsIHZlYzMsIHZlYzQgfSBmcm9tIFwiLi4vdXRpbHMvbXRoLmpzXCI7XHJcbmltcG9ydCB7IHNoYWRlckFkZCwgdXNlU2hhZGVyIH0gZnJvbSBcIi4vc2hhZGVycy5qc1wiO1xyXG5pbXBvcnQgeyBjYWxjdWxhdGVOb3JtYWxzIH0gZnJvbSBcIi4uL3V0aWxzL3V0aWxzLmpzXCI7XHJcblxyXG5leHBvcnQgbGV0IHByaW1pdGl2ZXMgPSBbXTtcclxuXHJcbmV4cG9ydCBjbGFzcyB0ZXh0dXJlIHtcclxuICBjb25zdHJ1Y3RvcihmaWxlTmFtZSkge1xyXG4gICAgdGhpcy50ZXggPSBsb2FkSW1hZ2UoZmlsZU5hbWUpOyAvKiBPcGVuR0wgdGV4dHVyZSBJZCAqL1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIG10bCB7XHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBuYW1lID0gXCJOYW1lIG5vdCBzZXRcIixcclxuICAgIGthID0gbmV3IHZlYzMoMC4yNSwgMC4yNSwgMC4yNSksXHJcbiAgICBrZCA9IG5ldyB2ZWMzKDAuNCwgMC40LCAwLjQpLFxyXG4gICAga3MgPSBuZXcgdmVjMygwLjc3NDU5NywgMC43NzQ1OTcsIDAuNzc0NTk3KSxcclxuICAgIHBoID0gNzYuOCxcclxuICAgIHRyYW5zID0gMSxcclxuICAgIHNoYWRlck5hbWUgPSBudWxsLFxyXG4gICAgdGV4ID0gW251bGxdXHJcbiAgKSB7XHJcbiAgICB0aGlzLmthID0ga2E7XHJcbiAgICB0aGlzLmtkID0ga2Q7XHJcbiAgICB0aGlzLmtzID0ga3M7XHJcbiAgICB0aGlzLnBoID0gcGg7XHJcbiAgICB0aGlzLnRyYW5zID0gdHJhbnM7XHJcbiAgICB0aGlzLnNoYWRlck5hbWUgPSBzaGFkZXJOYW1lO1xyXG4gICAgdGhpcy50ZXggPSBbLi4udGV4XTtcclxuICAgIHRoaXMubmFtZSA9IG5hbWU7XHJcbiAgfVxyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBsb2FkT2JqKGlucHV0KSB7XHJcbiAgbGV0IGZpbGUgPSBpbnB1dC50YXJnZXQuZmlsZXNbMF07XHJcblxyXG4gIGxldCByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xyXG5cclxuICByZWFkZXIucmVhZEFzVGV4dChmaWxlKTtcclxuXHJcbiAgcmVhZGVyLm9ubG9hZCA9IChlKSA9PiB7XHJcbiAgICBwcmltTG9hZE9iaihlLnRhcmdldC5yZXN1bHQpLnRoZW4oKGl0KSA9PiBwcmltaXRpdmVzLnB1c2goaXQpKTtcclxuICB9O1xyXG5cclxuICByZWFkZXIub25lcnJvciA9IGZ1bmN0aW9uICgpIHtcclxuICAgIGNvbnNvbGUubG9nKHJlYWRlci5lcnJvcik7XHJcbiAgfTtcclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHByaW1Mb2FkT2JqKGZpbGUpIHtcclxuICBsZXQgdmVydGljZXMgPSBbMF07XHJcbiAgbGV0IGluZGljZXMgPSBbXTtcclxuICBsZXQgbm9ybWFscyA9IFtdO1xyXG4gIGxldCBzdHJpbmdzID0gZmlsZS5zcGxpdChcIlxcblwiKTtcclxuXHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHJpbmdzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICBsZXQgc3RyaW5nID0gc3RyaW5nc1tpXS5zcGxpdChcIiBcIik7XHJcbiAgICBpZiAoc3RyaW5nWzBdID09IFwidlwiKSB7XHJcbiAgICAgIGxldCB4ID0gK3N0cmluZ1sxXSxcclxuICAgICAgICB5ID0gK3N0cmluZ1syXSxcclxuICAgICAgICB6ID0gK3N0cmluZ1szXTtcclxuXHJcbiAgICAgIHZlcnRpY2VzLnB1c2gobmV3IHZlYzMoeCwgeSwgeikpO1xyXG4gICAgfSBlbHNlIGlmIChzdHJpbmdbMF0gPT0gXCJmXCIpIHtcclxuICAgICAgaW5kaWNlcy5wdXNoKCtzdHJpbmdbMV0uc3BsaXQoXCIvXCIpWzBdKTtcclxuICAgICAgaW5kaWNlcy5wdXNoKCtzdHJpbmdbMl0uc3BsaXQoXCIvXCIpWzBdKTtcclxuICAgICAgaW5kaWNlcy5wdXNoKCtzdHJpbmdbM10uc3BsaXQoXCIvXCIpWzBdKTtcclxuICAgIH0gZWxzZSBpZiAoc3RyaW5nWzBdID09IFwidm5cIikge1xyXG4gICAgICBsZXQgeCA9ICtzdHJpbmdbMV0sXHJcbiAgICAgICAgeSA9ICtzdHJpbmdbMl0sXHJcbiAgICAgICAgeiA9ICtzdHJpbmdbM107XHJcbiAgICAgIG5vcm1hbHMucHVzaChuZXcgdmVjMyh4LCB5LCB6KSk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIGlmIChub3JtYWxzLmxlbmd0aCA9PSAwKSB7XHJcbiAgICBub3JtYWxzID0gY2FsY3VsYXRlTm9ybWFscyh2ZXJ0aWNlcywgaW5kaWNlcyk7XHJcbiAgfVxyXG4gIGxldCByZWFsViA9IFtdO1xyXG4gIHZlcnRpY2VzLmZvckVhY2goKGl0LCBpbmRleCkgPT4gcmVhbFYucHVzaChuZXcgdmVydGV4KGl0LCBub3JtYWxzW2luZGV4XSkpKTtcclxuICBsZXQgcmVzID0gbmV3IHByaW0ocmVhbFYsIGluZGljZXMpO1xyXG4gIHJlcy5tdGwgPSBuZXcgbXRsKCk7XHJcbiAgcmVzLm10bC5zaGFkZXJOYW1lID0gXCJ3aXRoTGlnaHRcIjtcclxuICBhd2FpdCByZXMuY3JlYXRlKCk7XHJcbiAgcmV0dXJuIHJlcztcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGxvYWRJbWFnZShzcmMpIHtcclxuICBjb25zdCBpbWcgPSBuZXcgSW1hZ2UoKTtcclxuICBpbWcuc3JjID0gc3JjO1xyXG4gIGxldCBpbWFnZSA9IGdsLmNyZWF0ZVRleHR1cmUoKTtcclxuICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCBpbWFnZSk7XHJcbiAgZ2wudGV4SW1hZ2UyRChcclxuICAgIGdsLlRFWFRVUkVfMkQsXHJcbiAgICAwLFxyXG4gICAgZ2wuUkdCQSxcclxuICAgIDEsXHJcbiAgICAxLFxyXG4gICAgMCxcclxuICAgIGdsLlJHQkEsXHJcbiAgICBnbC5VTlNJR05FRF9CWVRFLFxyXG4gICAgbmV3IFVpbnQ4QXJyYXkoWzAsIDAsIDI1NSwgMjU1XSlcclxuICApO1xyXG4gIGltZy5vbmxvYWQgPSAoKSA9PiB7XHJcbiAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCBpbWFnZSk7XHJcbiAgICBnbC50ZXhJbWFnZTJEKGdsLlRFWFRVUkVfMkQsIDAsIGdsLlJHQkEsIGdsLlJHQkEsIGdsLlVOU0lHTkVEX0JZVEUsIGltZyk7XHJcbiAgICBnbC5nZW5lcmF0ZU1pcG1hcChnbC5URVhUVVJFXzJEKTtcclxuICAgIGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9XUkFQX1MsIGdsLlJFUEVBVCk7XHJcbiAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfV1JBUF9ULCBnbC5SRVBFQVQpO1xyXG4gICAgZ2wudGV4UGFyYW1ldGVyaShcclxuICAgICAgZ2wuVEVYVFVSRV8yRCxcclxuICAgICAgZ2wuVEVYVFVSRV9NSU5fRklMVEVSLFxyXG4gICAgICBnbC5MSU5FQVJfTUlQTUFQX0xJTkVBUlxyXG4gICAgKTtcclxuICAgIGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9NQUdfRklMVEVSLCBnbC5MSU5FQVIpO1xyXG4gIH07XHJcbiAgcmV0dXJuIGltYWdlO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgdmVydGV4IHtcclxuICBjb25zdHJ1Y3RvcihwID0gbmV3IHZlYzMoKSwgbiA9IG5ldyB2ZWMzKCksIHQgPSBuZXcgdmVjMigpLCBjID0gbmV3IHZlYzQoKSkge1xyXG4gICAgdGhpcy5wID0gcDtcclxuICAgIHRoaXMubiA9IG47XHJcbiAgICB0aGlzLnQgPSB0O1xyXG4gICAgdGhpcy5jID0gYztcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBwcmltIHtcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHZCdWYsXHJcbiAgICBpQnVmID0gbnVsbCxcclxuICAgIG10bCA9IG51bGwsXHJcbiAgICB0cmFucyA9IG5ldyBtYXRyNCgpLFxyXG4gICAgdHlwZSA9IGdsLlRSSUFOR0xFUyxcclxuICAgIHZhID0gbnVsbFxyXG4gICkge1xyXG4gICAgdGhpcy52YSA9IHZhO1xyXG4gICAgdGhpcy5tdGwgPSBtdGw7XHJcbiAgICB0aGlzLnZCdWYgPSB2QnVmO1xyXG4gICAgdGhpcy5pQnVmID0gaUJ1ZjtcclxuICAgIHRoaXMudHJhbnMgPSB0cmFucztcclxuICAgIHRoaXMudHlwZSA9IHR5cGU7XHJcbiAgfVxyXG5cclxuICBkcmF3KHdvcmxkKSB7XHJcbiAgICBnbC51c2VQcm9ncmFtKHRoaXMuc2hhZGVyLnNoYWRlclByb2dyYW0pO1xyXG4gICAgbGV0IHRpbWVMb2MgPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24odGhpcy5zaGFkZXIuc2hhZGVyUHJvZ3JhbSwgXCJ0aW1lXCIpO1xyXG4gICAgY29uc3QgcHJvamVjdGlvbkxvYyA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihcclxuICAgICAgdGhpcy5zaGFkZXIuc2hhZGVyUHJvZ3JhbSxcclxuICAgICAgXCJwcm9qZWN0aW9uXCJcclxuICAgICk7XHJcbiAgICBjb25zdCBtb2RlbFZpZXdMb2MgPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24oXHJcbiAgICAgIHRoaXMuc2hhZGVyLnNoYWRlclByb2dyYW0sXHJcbiAgICAgIFwibW9kZWxWaWV3XCJcclxuICAgICk7XHJcbiAgICBjb25zdCBsaWdodERpckxvYyA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihcclxuICAgICAgdGhpcy5zaGFkZXIuc2hhZGVyUHJvZ3JhbSxcclxuICAgICAgXCJsaWdodERpclwiXHJcbiAgICApO1xyXG4gICAgY29uc3QgY2FtTG9jTG9jID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxyXG4gICAgICB0aGlzLnNoYWRlci5zaGFkZXJQcm9ncmFtLFxyXG4gICAgICBcImNhbUxvY1wiXHJcbiAgICApO1xyXG4gICAgY29uc3Qgd29ybGRMb2MgPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24odGhpcy5zaGFkZXIuc2hhZGVyUHJvZ3JhbSwgXCJ3b3JsZFwiKTtcclxuXHJcbiAgICBnbC5iaW5kVmVydGV4QXJyYXkodGhpcy52YSk7XHJcbiAgICBnbC51bmlmb3JtTWF0cml4NGZ2KFxyXG4gICAgICBwcm9qZWN0aW9uTG9jLFxyXG4gICAgICBmYWxzZSxcclxuICAgICAgbmV3IEZsb2F0MzJBcnJheShjYW0ubWF0clByb2ouYSgpLmpvaW4oKS5zcGxpdChcIixcIikpXHJcbiAgICApO1xyXG4gICAgZ2wudW5pZm9ybU1hdHJpeDRmdihcclxuICAgICAgbW9kZWxWaWV3TG9jLFxyXG4gICAgICBmYWxzZSxcclxuICAgICAgbmV3IEZsb2F0MzJBcnJheShjYW0ubWF0clZpZXcuYSgpLmpvaW4oKS5zcGxpdChcIixcIikpXHJcbiAgICApO1xyXG5cclxuICAgIGdsLnVuaWZvcm0xZih0aW1lTG9jLCBEYXRlLm5vdygpKTtcclxuICAgIGdsLnVuaWZvcm0zZihsaWdodERpckxvYywgMSwgMiwgMyk7XHJcbiAgICBnbC51bmlmb3JtM2YoY2FtTG9jTG9jLCBjYW0ubG9jLngsIGNhbS5sb2MueSwgY2FtLmxvYy56KTtcclxuXHJcbiAgICAvKiBDdXN0b21pc2VhYmxlIHN0dWZmICovXHJcbiAgICBnbC51bmlmb3JtTWF0cml4NGZ2KFxyXG4gICAgICB3b3JsZExvYyxcclxuICAgICAgZmFsc2UsXHJcbiAgICAgIG5ldyBGbG9hdDMyQXJyYXkod29ybGQuYSgpLmpvaW4oKS5zcGxpdChcIixcIikpXHJcbiAgICApO1xyXG4gICAgY29uc3Qga2FMb2MgPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24odGhpcy5zaGFkZXIuc2hhZGVyUHJvZ3JhbSwgXCJrYVwiKTtcclxuICAgIGNvbnN0IGtkTG9jID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHRoaXMuc2hhZGVyLnNoYWRlclByb2dyYW0sIFwia2RcIik7XHJcbiAgICBjb25zdCBrc0xvYyA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbih0aGlzLnNoYWRlci5zaGFkZXJQcm9ncmFtLCBcImtzXCIpO1xyXG4gICAgY29uc3QgcGhMb2MgPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24odGhpcy5zaGFkZXIuc2hhZGVyUHJvZ3JhbSwgXCJwaFwiKTtcclxuXHJcbiAgICBnbC51bmlmb3JtM2Yoa2FMb2MsIHRoaXMubXRsLmthLngsIHRoaXMubXRsLmthLnksIHRoaXMubXRsLmthLnopO1xyXG4gICAgZ2wudW5pZm9ybTNmKGtkTG9jLCB0aGlzLm10bC5rZC54LCB0aGlzLm10bC5rZC55LCB0aGlzLm10bC5rZC56KTtcclxuICAgIGdsLnVuaWZvcm0zZihrc0xvYywgdGhpcy5tdGwua3MueCwgdGhpcy5tdGwua3MueSwgdGhpcy5tdGwua3Mueik7XHJcbiAgICBnbC51bmlmb3JtMWYocGhMb2MsIHRoaXMubXRsLnBoKTtcclxuXHJcbiAgICBpZiAodGhpcy5pQnVmICE9IG51bGwpIHtcclxuICAgICAgLy8gZ2wuYmluZEJ1ZmZlcihnbC5FTEVNRU5UX0FSUkFZX0JVRkZFUiwgdGhpcy5pQnVmKTtcclxuICAgICAgZ2wuZHJhd0VsZW1lbnRzKFxyXG4gICAgICAgIGdsLlRSSUFOR0xFUyxcclxuICAgICAgICB0aGlzLmlCdWYubGVuZ3RoLCAvLyBudW0gdmVydGljZXMgdG8gcHJvY2Vzc1xyXG4gICAgICAgIGdsLlVOU0lHTkVEX1NIT1JULCAvLyB0eXBlIG9mIGluZGljZXNcclxuICAgICAgICAwIC8vIG9mZnNldCBvbiBieXRlcyB0byBpbmRpY2VzXHJcbiAgICAgICk7XHJcbiAgICAgIC8vZ2wuYmluZEJ1ZmZlcihnbC5FTEVNRU5UX0FSUkFZX0JVRkZFUiwgMCk7XHJcbiAgICB9IGVsc2UgZ2wuZHJhd0FycmF5cyhnbC50eXBlLCAwLCB0aGlzLnZCdWYubGVuZ3RoKTtcclxuICB9XHJcblxyXG4gIGFzeW5jIGNyZWF0ZSgpIHtcclxuICAgIHRoaXMuc2hhZGVyID0gYXdhaXQgc2hhZGVyQWRkKHRoaXMubXRsLnNoYWRlck5hbWUpO1xyXG4gICAgdGhpcy52YSA9IGdsLmNyZWF0ZVZlcnRleEFycmF5KCk7XHJcbiAgICBnbC5iaW5kVmVydGV4QXJyYXkodGhpcy52YSk7XHJcbiAgICB1c2VTaGFkZXIoXHJcbiAgICAgIHRoaXMuc2hhZGVyLFxyXG4gICAgICBuZXcgRmxvYXQzMkFycmF5KHRoaXMudkJ1Zi5tYXAoKGVsKSA9PiBbZWwucC54LCBlbC5wLnksIGVsLnAuel0pLmZsYXQoKSksXHJcbiAgICAgIG5ldyBVaW50MTZBcnJheSh0aGlzLmlCdWYpLFxyXG4gICAgICBuZXcgRmxvYXQzMkFycmF5KHRoaXMudkJ1Zi5tYXAoKGVsKSA9PiBbZWwubi54LCBlbC5uLnksIGVsLm4uel0pLmZsYXQoKSlcclxuICAgICk7XHJcbiAgICBnbC5iaW5kVmVydGV4QXJyYXkobnVsbCk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgcHJpbXMge1xyXG4gIGNvbnN0cnVjdG9yKG51bU9mUHJpbXMpIHtcclxuICAgIHRoaXMubnVtT2ZQcmltcyA9IG51bU9mUHJpbXM7XHJcbiAgICB0aGlzLnRyYW5zID0gbmV3IG1hdHI0KCk7XHJcbiAgICB0aGlzLm1pbkJCID0gdGhpcy5tYXhCQiA9IHZlYzMoMCk7XHJcbiAgICB0aGlzLnByaW1zID0gW107XHJcbiAgfVxyXG5cclxuICBkcmF3KHdvcmxkKSB7XHJcbiAgICBjb25zdCBtID0gdGhpcy50cmFucy5tdWxNYXRyKHdvcmxkKTtcclxuXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubnVtT2ZQcmltczsgaSsrKSB7XHJcbiAgICAgIHRoaXMucHJpbXNbaV0uZHJhdyhtLCB0aGlzLm51bU9mUHJpbXMsIGkpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gYWRkVGV4dHVyZSgpIHtcclxuICB2YXIgdGV4dHVyZSA9IGdsLmNyZWF0ZVRleHR1cmUoKTtcclxuICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCB0ZXh0dXJlKTtcclxuICBnbC50ZXhJbWFnZTJEKFxyXG4gICAgZ2wuVEVYVFVSRV8yRCxcclxuICAgIDAsXHJcbiAgICBnbC5SR0JBLFxyXG4gICAgMSxcclxuICAgIDEsXHJcbiAgICAwLFxyXG4gICAgZ2wuUkdCQSxcclxuICAgIGdsLlVOU0lHTkVEX0JZVEUsXHJcbiAgICBkYXRhXHJcbiAgKTtcclxuICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfTUFHX0ZJTFRFUiwgZ2wuTkVBUkVTVCk7XHJcbiAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX01JTl9GSUxURVIsIGdsLk5FQVJFU1QpO1xyXG4gIHJldHVybiB0ZXh0dXJlO1xyXG59XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBwcmltc0xvYWQoZmlsZU5hbWUpIHtcclxuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGZpbGVOYW1lKTtcclxuICBsZXQgZGF0YUJ1ZiA9IGF3YWl0IHJlc3BvbnNlLmFycmF5QnVmZmVyKCk7XHJcbiAgbGV0IGJ1ZiA9IG5ldyBVaW50OEFycmF5KGRhdGFCdWYpO1xyXG5cclxuICBsZXQgbWF0ZXJpYWxzID0gW107XHJcbiAgbGV0IHRleHR1cmVzID0gW107XHJcbiAgbGV0IHB0ciA9IDA7XHJcblxyXG4gIGNvbnN0IHNpZ24gPSBidWZcclxuICAgIC5zbGljZShwdHIsIChwdHIgKz0gNCkpXHJcbiAgICAucmVkdWNlKChyZXNTdHIsIGNoKSA9PiAocmVzU3RyICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoY2gpKSwgXCJcIik7XHJcbiAgaWYgKHNpZ24gIT09IFwiRzNETVwiKSByZXR1cm4gbnVsbDtcclxuXHJcbiAgbGV0IFtudW1PZlByaW1zLCBudW1PZk1hdGVyaWFscywgbnVtT2ZUZXh0dXJlc10gPSBuZXcgVWludDMyQXJyYXkoXHJcbiAgICBkYXRhQnVmLnNsaWNlKHB0ciwgKHB0ciArPSA0ICogMykpXHJcbiAgKTtcclxuXHJcbiAgbGV0IHBycyA9IG5ldyBwcmltcyhudW1PZlByaW1zKTtcclxuXHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1PZlByaW1zOyBpKyspIHtcclxuICAgIGxldCBbbnVtT2ZWLCBudW1PZkksIG10bE5vXSA9IG5ldyBVaW50MzJBcnJheShcclxuICAgICAgZGF0YUJ1Zi5zbGljZShwdHIsIChwdHIgKz0gNCAqIDMpKVxyXG4gICAgKTtcclxuXHJcbiAgICBsZXQgdiA9IG5ldyBGbG9hdDMyQXJyYXkoXHJcbiAgICAgIGRhdGFCdWYuc2xpY2UocHRyLCAocHRyICs9IDQgKiAoMyArIDIgKyAzICsgNCkgKiBudW1PZlYpKVxyXG4gICAgKTtcclxuICAgIGxldCBpbmQgPSBuZXcgVWludDMyQXJyYXkoZGF0YUJ1Zi5zbGljZShwdHIsIChwdHIgKz0gNCAqIG51bU9mSSkpKTtcclxuXHJcbiAgICBwcnMucHJpbXMucHVzaChuZXcgcHJpbSh2LCBpbmQpKTtcclxuICAgIHBycy5wcmltc1tpXS5tdGwgPSBtYXRlcmlhbHNbbXRsTm9dO1xyXG4gICAgcHJzLnByaW1zW2ldLmNyZWF0ZSgpO1xyXG4gICAgaWYgKGkgPT09IDApXHJcbiAgICAgIChwcnMubWluQkIgPSBwcnMucHJpbXNbMF0ubWluQkIpLCAocHJzLm1heEJCID0gcHJzLnByaW1zWzBdLm1heEJCKTtcclxuICAgIGVsc2Uge1xyXG4gICAgICBpZiAocHJzLm1pbkJCLnggPiBwcnMucHJpbXNbaV0ubWluQkIueClcclxuICAgICAgICBwcnMubWluQkIueCA9IHBycy5wcmltc1tpXS5taW5CQi54O1xyXG4gICAgICBpZiAocHJzLm1heEJCLnggPCBwcnMucHJpbXNbaV0ubWF4QkIueClcclxuICAgICAgICBwcnMubWF4QkIueCA9IHBycy5wcmltc1tpXS5tYXhCQi54O1xyXG5cclxuICAgICAgaWYgKHBycy5taW5CQi55ID4gcHJzLnByaW1zW2ldLm1pbkJCLnkpXHJcbiAgICAgICAgcHJzLm1pbkJCLnkgPSBwcnMucHJpbXNbaV0ubWluQkIueTtcclxuICAgICAgaWYgKHBycy5tYXhCQi55IDwgcHJzLnByaW1zW2ldLm1heEJCLnkpXHJcbiAgICAgICAgcHJzLm1heEJCLnkgPSBwcnMucHJpbXNbaV0ubWF4QkIueTtcclxuXHJcbiAgICAgIGlmIChwcnMubWluQkIueiA+IHBycy5wcmltc1tpXS5taW5CQi56KVxyXG4gICAgICAgIHBycy5taW5CQi56ID0gcHJzLnByaW1zW2ldLm1pbkJCLno7XHJcbiAgICAgIGlmIChwcnMubWF4QkIueiA8IHBycy5wcmltc1tpXS5tYXhCQi56KVxyXG4gICAgICAgIHBycy5tYXhCQi56ID0gcHJzLnByaW1zW2ldLm1heEJCLno7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBmb3IgKGxldCBtID0gMDsgbSA8IG51bU9mTWF0ZXJpYWxzOyBtKyspIHtcclxuICAgIGNvbnN0IG10bE5hbWUgPSBidWZcclxuICAgICAgLnNsaWNlKHB0ciwgKHB0ciArPSAzMDApKVxyXG4gICAgICAucmVkdWNlKFxyXG4gICAgICAgIChyZXNfc3RyLCBjaCkgPT4gKHJlc19zdHIgKz0gY2ggPT0gMCA/IFwiXCIgOiBTdHJpbmcuZnJvbUNoYXJDb2RlKGNoKSksXHJcbiAgICAgICAgXCJcIlxyXG4gICAgICApO1xyXG4gICAgbGV0IHMgPSBuZXcgRmxvYXQzMkFycmF5KGRhdGFCdWYuc2xpY2UocHRyLCAocHRyICs9IDQgKiAxMSkpKTtcclxuICAgIGxldCB0eHRhcnIgPSBuZXcgSW50MzJBcnJheShkYXRhQnVmLnNsaWNlKHB0ciwgKHB0ciArPSA0ICogOCkpKTtcclxuICAgIGxldCBtYXRlcmlhbCA9IG5ldyBtdGwoXHJcbiAgICAgIG10bE5hbWUsXHJcbiAgICAgIG5ldyB2ZWMzKHNbMF0sIHNbMV0sIHNbMl0pLFxyXG4gICAgICBuZXcgdmVjMyhzWzNdLCBzWzRdLCBzWzVdKSxcclxuICAgICAgbmV3IHZlYzMoc1s2XSwgc1s3XSwgc1s4XSksXHJcbiAgICAgIHNbOV0sXHJcbiAgICAgIHNbMTBdLFxyXG4gICAgICAwXHJcbiAgICApO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCA4OyBpKyspIG10bC50ZXhbaV0gPSB0ZXh0dXJlc1t0eHRhcnJbaV1dO1xyXG4gICAgbWF0ZXJpYWxzW21dID0gbWF0ZXJpYWw7XHJcbiAgICBwdHIgKz0gMzAwICsgNDtcclxuICB9XHJcblxyXG4gIGZvciAobGV0IHQgPSAwOyB0IDwgbnVtT2ZUZXh0dXJlczsgdCsrKSB7XHJcbiAgICBjb25zdCB0ZXhOYW1lID0gYnVmXHJcbiAgICAgIC5zbGljZShwdHIsIChwdHIgKz0gMzAwKSlcclxuICAgICAgLnJlZHVjZShcclxuICAgICAgICAocmVzX3N0ciwgY2gpID0+IChyZXNfc3RyICs9IGNoID09IDAgPyBcIlwiIDogU3RyaW5nLmZyb21DaGFyQ29kZShjaCkpLFxyXG4gICAgICAgIFwiXCJcclxuICAgICAgKTtcclxuXHJcbiAgICBsZXQgW3csIGgsIGNdID0gbmV3IFVpbnQzMkFycmF5KGRhdGFCdWYuc2xpY2UocHRyLCAocHRyICs9IDQgKiAzKSkpO1xyXG4gICAgbGV0IGJpdHMgPSBidWYuc2xpY2UocHRyLCAocHRyICs9IHcgKiBoICogYykpO1xyXG5cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYml0cy5sZW5ndGg7IGkgKz0gNCkge1xyXG4gICAgICBjb25zdCB0ID0gYml0c1tpXTtcclxuICAgICAgYml0c1tpXSA9IGJpdHNbaSArIDJdO1xyXG4gICAgICBiaXRzW2kgKyAyXSA9IHQ7XHJcbiAgICB9XHJcblxyXG4gICAgdGV4dHVyZXNbdF0gPSBhZGRUZXh0dXJlKHRleE5hbWUsIGJpdHMsIHcsIGgpO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHBycztcclxufVxyXG4iLCJpbXBvcnQgeyB1bml0QWRkIH0gZnJvbSBcIi4vdW5pdHMuanNcIjtcclxuaW1wb3J0IHsgcHJpbWl0aXZlcyB9IGZyb20gXCIuLi9ybmQvcHJpbXMuanNcIjtcclxuXHJcbmZ1bmN0aW9uIHJlbmRlcigpIHtcclxuICBwcmltaXRpdmVzLmZvckVhY2goKGl0KSA9PiBpdC5kcmF3KGl0LnRyYW5zKSk7XHJcbn1cclxuYXN5bmMgZnVuY3Rpb24gaW5pdCgpIHt9XHJcbmV4cG9ydCBmdW5jdGlvbiB1bml0T2JqQWRkKCkge1xyXG4gIHVuaXRBZGQoaW5pdCwgcmVuZGVyLCBcIk9ialwiKTtcclxufVxyXG4iLCJpbXBvcnQgeyBnbCB9IGZyb20gXCIuLi9tYWluLmpzXCI7XHJcbmltcG9ydCB7IHVuaXRBZGQgfSBmcm9tIFwiLi91bml0cy5qc1wiO1xyXG5pbXBvcnQgeyBjYW0gfSBmcm9tIFwiLi4vdXRpbHMvY29udHJvbHMuanNcIjtcclxuaW1wb3J0IHsgbWF0cjQsIHZlYzMgfSBmcm9tIFwiLi4vdXRpbHMvbXRoLmpzXCI7XHJcbmltcG9ydCB7IHNoYWRlckFkZCwgdXNlU2hhZGVyIH0gZnJvbSBcIi4uL3JuZC9zaGFkZXJzLmpzXCI7XHJcblxyXG5jb25zdCBwbGFuZVZlcnRleFBvc2l0aW9ucyA9IG5ldyBGbG9hdDMyQXJyYXkoW1xyXG4gIDEwLCAtNSwgMTAsIC0xMCwgLTUsIC0xMCwgMTAsIC01LCAtMTAsXHJcblxyXG4gIDEwLCAtNSwgMTAsIC0xMCwgLTUsIDEwLCAtMTAsIC01LCAtMTAsXHJcbl0pO1xyXG5mb3IgKGxldCBpID0gMDsgaSA8IDE4OyBpICs9IDMpIHtcclxuICBwbGFuZVZlcnRleFBvc2l0aW9uc1tpXSAqPSAxMDA7XHJcbiAgcGxhbmVWZXJ0ZXhQb3NpdGlvbnNbaSArIDFdID0gMDtcclxuICBwbGFuZVZlcnRleFBvc2l0aW9uc1tpICsgMl0gKj0gMTAwO1xyXG59XHJcbmxldCBwbGFuZVZlcnRleEFycmF5O1xyXG5sZXQgc2hhZGVySTtcclxuZnVuY3Rpb24gcmVuZGVyKCkge1xyXG4gIGdsLnVzZVByb2dyYW0oc2hhZGVySS5zaGFkZXJQcm9ncmFtKTtcclxuICBsZXQgdGltZUxvYyA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihzaGFkZXJJLnNoYWRlclByb2dyYW0sIFwidGltZVwiKTtcclxuICBjb25zdCBwcm9qZWN0aW9uTG9jID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxyXG4gICAgc2hhZGVySS5zaGFkZXJQcm9ncmFtLFxyXG4gICAgXCJwcm9qZWN0aW9uXCJcclxuICApO1xyXG4gIGNvbnN0IG1vZGVsVmlld0xvYyA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihcclxuICAgIHNoYWRlckkuc2hhZGVyUHJvZ3JhbSxcclxuICAgIFwibW9kZWxWaWV3XCJcclxuICApO1xyXG4gIGNvbnN0IHdvcmxkTG9jID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHNoYWRlckkuc2hhZGVyUHJvZ3JhbSwgXCJ3b3JsZFwiKTtcclxuICAvLyAgZHJhdyBkb2RlXHJcbiAgZ2wuYmluZFZlcnRleEFycmF5KHBsYW5lVmVydGV4QXJyYXkpO1xyXG4gIGdsLnVuaWZvcm1NYXRyaXg0ZnYoXHJcbiAgICBwcm9qZWN0aW9uTG9jLFxyXG4gICAgZmFsc2UsXHJcbiAgICBuZXcgRmxvYXQzMkFycmF5KGNhbS5tYXRyUHJvai5hKCkuam9pbigpLnNwbGl0KFwiLFwiKSlcclxuICApO1xyXG4gIGdsLnVuaWZvcm1NYXRyaXg0ZnYoXHJcbiAgICBtb2RlbFZpZXdMb2MsXHJcbiAgICBmYWxzZSxcclxuICAgIG5ldyBGbG9hdDMyQXJyYXkoY2FtLm1hdHJWaWV3LmEoKS5qb2luKCkuc3BsaXQoXCIsXCIpKVxyXG4gICk7XHJcbiAgbGV0IG15TWF0cjQgPSBuZXcgbWF0cjQoKTtcclxuICBnbC51bmlmb3JtTWF0cml4NGZ2KFxyXG4gICAgd29ybGRMb2MsXHJcbiAgICBmYWxzZSxcclxuICAgIG5ldyBGbG9hdDMyQXJyYXkoXHJcbiAgICAgIG15TWF0cjQudHJhbnNsYXRlKG5ldyB2ZWMzKC0zLCAwLCAwKSkuYSgpLmpvaW4oKS5zcGxpdChcIixcIilcclxuICAgIClcclxuICApO1xyXG5cclxuICBjb25zdCBjYW1Mb2NMb2MgPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24oc2hhZGVySS5zaGFkZXJQcm9ncmFtLCBcImNhbUxvY1wiKTtcclxuICBjb25zdCBsaWdodERpckxvYyA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihzaGFkZXJJLnNoYWRlclByb2dyYW0sIFwibGlnaHREaXJcIik7XHJcblxyXG4gIGdsLnVuaWZvcm0zZihsaWdodERpckxvYywgMSwgMSwgMSk7XHJcbiAgZ2wudW5pZm9ybTNmKGNhbUxvY0xvYywgY2FtLmxvYy54LCBjYW0ubG9jLnksIGNhbS5sb2Mueik7XHJcbiAgLyogQ3VzdG9taXNlYWJsZSBzdHVmZiAqL1xyXG5cclxuICBjb25zdCBrYUxvYyA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihzaGFkZXJJLnNoYWRlclByb2dyYW0sIFwia2FcIik7XHJcbiAgY29uc3Qga2RMb2MgPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24oc2hhZGVySS5zaGFkZXJQcm9ncmFtLCBcImtkXCIpO1xyXG4gIGNvbnN0IGtzTG9jID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHNoYWRlckkuc2hhZGVyUHJvZ3JhbSwgXCJrc1wiKTtcclxuICBjb25zdCBwaExvYyA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihzaGFkZXJJLnNoYWRlclByb2dyYW0sIFwicGhcIik7XHJcbiAgZ2wudW5pZm9ybTNmKGthTG9jLCAwLjAxLCAwLjMsIDAuMSk7XHJcbiAgZ2wudW5pZm9ybTNmKGtkTG9jLCAwLjA3NTY4LCAwLjYxNDI0LCAwLjA3NTY4KTtcclxuICBnbC51bmlmb3JtM2Yoa3NMb2MsIDAuNjMzLCAwLjcyNzgxMSwgMC42MzMpO1xyXG4gIGdsLnVuaWZvcm0xZihwaExvYywgNzYuOCk7XHJcblxyXG4gIGdsLnVuaWZvcm0xZih0aW1lTG9jLCBEYXRlLm5vdygpKTtcclxuXHJcbiAgZ2wuZHJhd0FycmF5cyhnbC5UUklBTkdMRVMsIDAsIDYpO1xyXG59XHJcbmFzeW5jIGZ1bmN0aW9uIGluaXQoKSB7XHJcbiAgc2hhZGVySSA9IGF3YWl0IHNoYWRlckFkZChcIndpdGhMaWdodFwiKTtcclxuICBwbGFuZVZlcnRleEFycmF5ID0gZ2wuY3JlYXRlVmVydGV4QXJyYXkoKTtcclxuICBnbC5iaW5kVmVydGV4QXJyYXkocGxhbmVWZXJ0ZXhBcnJheSk7XHJcbiAgdXNlU2hhZGVyKHNoYWRlckksIHBsYW5lVmVydGV4UG9zaXRpb25zKTtcclxuICBnbC5iaW5kVmVydGV4QXJyYXkobnVsbCk7XHJcbiAgLyogYWFhICovXHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIHVuaXRQbGFuZUFkZCgpIHtcclxuICB1bml0QWRkKGluaXQsIHJlbmRlciwgXCJQbGFuZVwiKTtcclxufVxyXG4iLCJpbXBvcnQgeyB1bml0QWRkIH0gZnJvbSBcIi4vdW5pdHMuanNcIjtcclxuaW1wb3J0IHsgcHJpbUxvYWRPYmogfSBmcm9tIFwiLi4vcm5kL3ByaW1zLmpzXCI7XHJcbmltcG9ydCB7IG1hdHI0LCB2ZWMzIH0gZnJvbSBcIi4uL3V0aWxzL210aC5qc1wiO1xyXG5sZXQgZG9kZTtcclxubGV0IG15TWF0cjQgPSBuZXcgbWF0cjQoKTtcclxuZnVuY3Rpb24gcmVuZGVyKCkge1xyXG4gIGRvZGUubXRsLmthLnggPSBNYXRoLnNpbihEYXRlLm5vdygpIC8gMTAwKTtcclxuICBkb2RlLmRyYXcoXHJcbiAgICBteU1hdHI0XHJcbiAgICAgIC5zY2FsZShcclxuICAgICAgICBuZXcgdmVjMyhcclxuICAgICAgICAgIChNYXRoLnNpbihEYXRlLm5vdygpIC8gNTAwKSArIDIpICogMSxcclxuICAgICAgICAgIChNYXRoLmNvcyhEYXRlLm5vdygpIC8gMjAwKSArIDIpICogMSxcclxuICAgICAgICAgIChNYXRoLnNpbihEYXRlLm5vdygpIC8gMzAwICsgNSkgKyAyKSAqIDFcclxuICAgICAgICApXHJcbiAgICAgIClcclxuICAgICAgLm11bChteU1hdHI0LnRyYW5zbGF0ZShuZXcgdmVjMygwLCAtMywgMCkpKVxyXG4gICk7XHJcbn1cclxuYXN5bmMgZnVuY3Rpb24gaW5pdCgpIHtcclxuICBsZXQgb2JqO1xyXG5cclxuICBjb25zdCBwciA9IGZldGNoKGBiaW4vbW9kZWxzL2RvZGUub2JqYClcclxuICAgIC50aGVuKChyZXMpID0+IHJlcy50ZXh0KCkpXHJcbiAgICAudGhlbigoZGF0YSkgPT4ge1xyXG4gICAgICBvYmogPSBkYXRhO1xyXG4gICAgfSk7XHJcblxyXG4gIGF3YWl0IHByLnRoZW4oKCkgPT4ge1xyXG4gICAgcHJpbUxvYWRPYmoob2JqKS50aGVuKChpdCkgPT4gKGRvZGUgPSBpdCkpO1xyXG4gIH0pO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiB1bml0RG9kZUFkZCgpIHtcclxuICB1bml0QWRkKGluaXQsIHJlbmRlciwgXCJEb2RlY2FoZWRyb25cIik7XHJcbn1cclxuIiwiaW1wb3J0IHsgdW5pdEFkZCB9IGZyb20gXCIuL3VuaXRzLmpzXCI7XHJcbmltcG9ydCB7IHByaW1Mb2FkT2JqIH0gZnJvbSBcIi4uL3JuZC9wcmltcy5qc1wiO1xyXG5pbXBvcnQgeyBtYXRyNCwgdmVjMyB9IGZyb20gXCIuLi91dGlscy9tdGguanNcIjtcclxubGV0IHByaW1pdGl2ZTtcclxubGV0IG15TWF0cjQgPSBuZXcgbWF0cjQoKTtcclxubGV0IHN1Y2Nlc3MgPSAxO1xyXG5mdW5jdGlvbiByZW5kZXIoKSB7XHJcbiAgaWYgKHN1Y2Nlc3MpIHtcclxuICAgIHByaW1pdGl2ZS5kcmF3KFxyXG4gICAgICBteU1hdHI0XHJcbiAgICAgICAgLnNjYWxlKFxyXG4gICAgICAgICAgbmV3IHZlYzMoXHJcbiAgICAgICAgICAgIChNYXRoLnNpbihEYXRlLm5vdygpIC8gMjAwKSAvIDUgKyAxLjIpICogMC4yLFxyXG4gICAgICAgICAgICAoTWF0aC5jb3MoRGF0ZS5ub3coKSAvIDMwMCkgLyA1ICsgMS4yKSAqIDAuMixcclxuICAgICAgICAgICAgKE1hdGguc2luKERhdGUubm93KCkgLyA0MDAgKyA1KSAvIDUgKyAxLjIpICogMC4yXHJcbiAgICAgICAgICApXHJcbiAgICAgICAgKVxyXG4gICAgICAgIC5tdWwobXlNYXRyNC50cmFuc2xhdGUobmV3IHZlYzMoMCwgLTMsIDApKSlcclxuICAgICAgICAubXVsKG15TWF0cjQudHJhbnNsYXRlKG5ldyB2ZWMzKC0xMCwgMCwgMCkpKVxyXG4gICAgKTtcclxuICAgIGxldCBuID0gNDA7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG4gKiBuOyBpKyspIHtcclxuICAgICAgcHJpbWl0aXZlLm10bC5rYSA9IG5ldyB2ZWMzKFxyXG4gICAgICAgIChNYXRoLnNpbihEYXRlLm5vdygpIC8gMjAwICsgaSkgLyA1ICsgMS4yKSAqIDAuNCxcclxuICAgICAgICAoTWF0aC5jb3MoRGF0ZS5ub3coKSAvIDMwMCArIGkpIC8gNSArIDEuMikgKiAwLjQsXHJcbiAgICAgICAgKE1hdGguc2luKERhdGUubm93KCkgLyA0MDAgKyA1ICsgaSkgLyA1ICsgMS4yKSAqIDAuNFxyXG4gICAgICApO1xyXG4gICAgICBwcmltaXRpdmUuZHJhdyhcclxuICAgICAgICBteU1hdHI0XHJcbiAgICAgICAgICAuc2NhbGUoXHJcbiAgICAgICAgICAgIG5ldyB2ZWMzKFxyXG4gICAgICAgICAgICAgIChNYXRoLnNpbihEYXRlLm5vdygpIC8gMjAwICsgaSkgLyA1ICsgMS4yKSAqIDAuMixcclxuICAgICAgICAgICAgICAoTWF0aC5jb3MoRGF0ZS5ub3coKSAvIDMwMCArIGkpIC8gNSArIDEuMikgKiAwLjIsXHJcbiAgICAgICAgICAgICAgKE1hdGguc2luKERhdGUubm93KCkgLyA0MDAgKyA1ICsgaSkgLyA1ICsgMS4yKSAqIDAuMlxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgICApXHJcbiAgICAgICAgICAubXVsKFxyXG4gICAgICAgICAgICBteU1hdHI0LnRyYW5zbGF0ZShuZXcgdmVjMygwLCBNYXRoLmZsb29yKGkgLyBuKSAqIDUsIC0oaSAlIG4pICogNSkpXHJcbiAgICAgICAgICApXHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbmFzeW5jIGZ1bmN0aW9uIGluaXQoKSB7XHJcbiAgbGV0IG9iajtcclxuXHJcbiAgYXdhaXQgZmV0Y2goYGJpbi9tb2RlbHMvY293MS5vYmpgKVxyXG4gICAgLnRoZW4oKHJlcykgPT4gcmVzLnRleHQoKSlcclxuICAgIC50aGVuKChkYXRhKSA9PiB7XHJcbiAgICAgIG9iaiA9IGRhdGE7XHJcbiAgICB9KVxyXG4gICAgLmNhdGNoKCgpID0+IChzdWNjZXNzID0gMCkpO1xyXG5cclxuICBwcmltaXRpdmUgPSBhd2FpdCBwcmltTG9hZE9iaihvYmopO1xyXG4gIHByaW1pdGl2ZS5tdGwuc2hhZGVyTmFtZSA9IFwid2l0aExpZ2h0U21vb3RoXCI7XHJcbiAgYXdhaXQgcHJpbWl0aXZlLmNyZWF0ZSgpO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiB1bml0Q293QWRkKCkge1xyXG4gIHVuaXRBZGQoaW5pdCwgcmVuZGVyLCBcImNvd3NcIik7XHJcbn1cclxuIiwiaW1wb3J0IHsgdW5pdEFkZCB9IGZyb20gXCIuL3VuaXRzLmpzXCI7XHJcbmltcG9ydCB7IHByaW1Mb2FkT2JqIH0gZnJvbSBcIi4uL3JuZC9wcmltcy5qc1wiO1xyXG5pbXBvcnQgeyBtYXRyNCwgdmVjMyB9IGZyb20gXCIuLi91dGlscy9tdGguanNcIjtcclxuaW1wb3J0IHsgY2FtIH0gZnJvbSBcIi4uL3V0aWxzL2NvbnRyb2xzLmpzXCI7XHJcbmltcG9ydCB7IHVzZXJzLCBnbCB9IGZyb20gXCIuLi9tYWluLmpzXCI7XHJcblxyXG5sZXQgcHJpbWl0aXZlO1xyXG5sZXQgbXlNYXRyNCA9IG5ldyBtYXRyNCgpO1xyXG5sZXQgc3VjY2VzcyA9IDE7XHJcbmxldCBzaWRlID0gbmV3IHZlYzMoMCwgMCwgLTEpO1xyXG5sZXQgcGxhY2VzSFRNTDtcclxuZnVuY3Rpb24gcmVuZGVyKCkge1xyXG4gIGlmIChzdWNjZXNzKSB7XHJcbiAgICBwcmltaXRpdmUuZHJhdyhcclxuICAgICAgbXlNYXRyNFxyXG4gICAgICAgIC5yb3RhdGVZKChzaWRlLmFuZ2xlKGNhbS51c2VyRGlyKSAqIDE4MCkgLyBNYXRoLlBJKVxyXG4gICAgICAgIC5tdWwobXlNYXRyNC50cmFuc2xhdGUobmV3IHZlYzMoY2FtLnVzZXJMb2MueCwgMCwgY2FtLnVzZXJMb2MueikpKVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIGZvciAobGV0IHVzZXJDYW0gb2YgdXNlcnMpIHtcclxuICAgIGlmICh1c2VyQ2FtICE9IG51bGwgJiYgY2FtLmlkICE9IHVzZXJDYW0uaWQpIHtcclxuICAgICAgbGV0IHdvcmxkID0gbXlNYXRyNFxyXG4gICAgICAgIC5yb3RhdGVZKFxyXG4gICAgICAgICAgKHNpZGUuYW5nbGUoXHJcbiAgICAgICAgICAgIG5ldyB2ZWMzKHVzZXJDYW0ucmlnaHQueCwgdXNlckNhbS5yaWdodC55LCB1c2VyQ2FtLnJpZ2h0LnopXHJcbiAgICAgICAgICApICpcclxuICAgICAgICAgICAgMTgwKSAvXHJcbiAgICAgICAgICAgIE1hdGguUElcclxuICAgICAgICApXHJcbiAgICAgICAgLm11bChteU1hdHI0LnNjYWxlKG5ldyB2ZWMzKDEsIDEsIDEpKSlcclxuICAgICAgICAubXVsKFxyXG4gICAgICAgICAgbXlNYXRyNC50cmFuc2xhdGUobmV3IHZlYzModXNlckNhbS51c2VyTG9jLngsIDAsIHVzZXJDYW0udXNlckxvYy56KSlcclxuICAgICAgICApO1xyXG4gICAgICBwcmltaXRpdmUuZHJhdyh3b3JsZCk7XHJcblxyXG4gICAgICBsZXQgY2xpcHNwYWNlID0gbmV3IHZlYzMoXHJcbiAgICAgICAgdXNlckNhbS51c2VyTG9jLngsXHJcbiAgICAgICAgdXNlckNhbS51c2VyTG9jLnksXHJcbiAgICAgICAgdXNlckNhbS51c2VyTG9jLnpcclxuICAgICAgKTtcclxuXHJcbiAgICAgIGlmIChcclxuICAgICAgICBjYW0udXNlckRpci5hbmdsZShjbGlwc3BhY2Uuc3ViKGNhbS5sb2MpKSA+IDEuNTcgfHxcclxuICAgICAgICBjYW0udXNlckRpci5hbmdsZShjbGlwc3BhY2Uuc3ViKGNhbS5sb2MpKSA8IC0xLjU3XHJcbiAgICAgIClcclxuICAgICAgICBjb250aW51ZTtcclxuXHJcbiAgICAgIGNsaXBzcGFjZSA9IGNsaXBzcGFjZS5tdWxNYXRyKGNhbS5tYXRyVmlldykubXVsTWF0cihjYW0ubWF0clByb2opO1xyXG5cclxuICAgICAgbGV0IHBpeGVsWCA9IChjbGlwc3BhY2UueCAqIDAuNSArIDAuNSkgKiBnbC5jYW52YXMud2lkdGg7XHJcbiAgICAgIGxldCBwaXhlbFkgPSAoY2xpcHNwYWNlLnkgKiAtMC41ICsgMC41KSAqIGdsLmNhbnZhcy5oZWlnaHQ7XHJcblxyXG4gICAgICBsZXQgcGxhY2VUYWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcclxuICAgICAgY29uc3QgbmFtZVRhZyA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHVzZXJDYW0udXNlck5hbWUpO1xyXG4gICAgICBwbGFjZVRhZy5hcHBlbmRDaGlsZChuYW1lVGFnKTtcclxuXHJcbiAgICAgIHBsYWNlVGFnLmNsYXNzTmFtZSA9IFwicGxhY2VcIjtcclxuICAgICAgcGxhY2VUYWcuc3R5bGUubGVmdCA9IE1hdGguZmxvb3IocGl4ZWxYKSArIFwicHhcIjtcclxuICAgICAgcGxhY2VUYWcuc3R5bGUudG9wID0gTWF0aC5mbG9vcihwaXhlbFkpICsgXCJweFwiO1xyXG4gICAgICBwbGFjZVRhZy5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcclxuICAgICAgcGxhY2VUYWcuc3R5bGUuZm9udFNpemUgPSBcIjI0cHhcIjtcclxuICAgICAgcGxhY2VUYWcuc3R5bGUuY29sb3IgPSBcImdyZWVuXCI7XHJcbiAgICAgIHBsYWNlVGFnLnN0eWxlLmZvbnRGYW1pbHkgPSBcImltcGFjdFwiO1xyXG4gICAgICBwbGFjZVRhZy5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcImJsYWNrXCI7XHJcbiAgICAgIHBsYWNlVGFnLnN0eWxlLmJvcmRlclJhZGl1cyA9IFwiMTBweFwiO1xyXG4gICAgICBwbGFjZVRhZy5zdHlsZS5wYWRkaW5nUmlnaHQgPSBwbGFjZVRhZy5zdHlsZS5wYWRkaW5nTGVmdCA9IFwiM3B4XCI7XHJcbiAgICAgIHBsYWNlc0hUTUwuYXBwZW5kQ2hpbGQocGxhY2VUYWcpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5hc3luYyBmdW5jdGlvbiBpbml0KCkge1xyXG4gIGxldCBvYmo7XHJcbiAgcGxhY2VzSFRNTCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicGxhY2VzXCIpO1xyXG5cclxuICBwcmltaXRpdmUgPSBhd2FpdCBwcmltTG9hZE9iaihvYmopO1xyXG4gIHByaW1pdGl2ZS5jYXRjaCgoKSA9PiAoc3VjY2VzcyA9IDApKTtcclxuXHJcbiAgcHJpbWl0aXZlLm10bC5zaGFkZXJOYW1lID0gXCJ3aXRoTGlnaHRTbW9vdGhcIjtcclxuICBhd2FpdCBwcmltaXRpdmUuY3JlYXRlKCk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB1bml0QmlrZUFkZCgpIHtcclxuICB1bml0QWRkKGluaXQsIHJlbmRlciwgXCJ1c2VyXCIpO1xyXG59XHJcbiIsImltcG9ydCB7IGdsIH0gZnJvbSBcIi4uL21haW4uanNcIjtcclxuaW1wb3J0IHsgdW5pdEFkZCB9IGZyb20gXCIuL3VuaXRzLmpzXCI7XHJcbmltcG9ydCB7IGNhbSB9IGZyb20gXCIuLi91dGlscy9jb250cm9scy5qc1wiO1xyXG5pbXBvcnQgeyBtYXRyNCwgdmVjMywgdmVjNCB9IGZyb20gXCIuLi91dGlscy9tdGguanNcIjtcclxuaW1wb3J0IHsgc2hhZGVyQWRkLCB1c2VTaGFkZXIgfSBmcm9tIFwiLi4vcm5kL3NoYWRlcnMuanNcIjtcclxuXHJcbmxldCB6b29tID0gMTM7XHJcblxyXG5sZXQgc2l6ZSA9IDIwO1xyXG5cclxubGV0IG1heFRpbGVSZW5kZXJMZW5ndGggPSAxNjtcclxuXHJcbmxldCByb3VnaG5lc3MgPSAzO1xyXG5cclxuY29uc3QgcGxhbmVWZXJ0ZXhQb3NpdGlvbnMgPSBuZXcgRmxvYXQzMkFycmF5KFtcclxuICBzaXplIC8gMixcclxuICAwLFxyXG4gIHNpemUgLyAyLFxyXG5cclxuICAtc2l6ZSAvIDIsXHJcbiAgMCxcclxuICBzaXplIC8gMixcclxuXHJcbiAgc2l6ZSAvIDIsXHJcbiAgMCxcclxuICAtc2l6ZSAvIDIsXHJcblxyXG4gIHNpemUgLyAyLFxyXG4gIDAsXHJcbiAgLXNpemUgLyAyLFxyXG5cclxuICAtc2l6ZSAvIDIsXHJcbiAgMCxcclxuICBzaXplIC8gMixcclxuXHJcbiAgLXNpemUgLyAyLFxyXG4gIDAsXHJcbiAgLXNpemUgLyAyLFxyXG5dKTtcclxuXHJcbmNvbnN0IG1hcFZlcnRleFRleGNvb3JkcyA9IG5ldyBGbG9hdDMyQXJyYXkoW1xyXG4gIDEsIDEsIDAsIDEsIDEsIDAsXHJcblxyXG4gIDEsIDAsIDAsIDEsIDAsIDAsXHJcbl0pO1xyXG5sZXQgcGxhY2VzSFRNTDtcclxubGV0IHRpbGVWQTtcclxubGV0IHNoYWRlckk7XHJcblxyXG5sZXQgdGlsZXMgPSBbXTtcclxuXHJcbmxldCByb3VnaFRpbGVzID0gW107XHJcblxyXG5sZXQgb2xkVXNlckxvYyA9IG5ldyB2ZWMzKDAsIDEwMDAsIDApO1xyXG4vKiBSYWRpdXMoaW4gc2l6ZXMpIGF0IHdoaWNoIHRvIHJlbmRlciB0aWxlcyAqL1xyXG5cclxubGV0IG1heFRpbGVSZW5kZXJMZW5ndGgyID0gbWF4VGlsZVJlbmRlckxlbmd0aCAqIG1heFRpbGVSZW5kZXJMZW5ndGg7XHJcbmxldCBtYXhUaWxlUmVuZGVyQnVmZmVyTGVuZ3RoMiA9IG1heFRpbGVSZW5kZXJMZW5ndGgyICogNTtcclxuXHJcbmxldCBtYXhSb3VnaFRpbGVSZW5kZXJCdWZmZXJMZW5ndGgyID1cclxuICBtYXhUaWxlUmVuZGVyQnVmZmVyTGVuZ3RoMiAqIHJvdWdobmVzcyAqIHJvdWdobmVzcztcclxubGV0IG1heFJvdWdoVGlsZVJlbmRlckxlbmd0aCA9IG1heFRpbGVSZW5kZXJMZW5ndGggKiByb3VnaG5lc3M7XHJcbmxldCBtYXhSb3VnaFRpbGVSZW5kZXJMZW5ndGgyID1cclxuICBtYXhSb3VnaFRpbGVSZW5kZXJMZW5ndGggKiBtYXhSb3VnaFRpbGVSZW5kZXJMZW5ndGg7XHJcblxyXG5jb25zdCBzdGFydExvbiA9IDMwLjMzNTA5ODY7XHJcbmNvbnN0IHN0YXJ0TGF0ID0gNTkuOTM0MjgwMjtcclxuY29uc3Qgc3RhcnRUaWxlWCA9IGxvbjJ0aWxlKHN0YXJ0TG9uLCB6b29tKTtcclxuY29uc3Qgc3RhcnRUaWxlWSA9IGxhdDJ0aWxlKHN0YXJ0TGF0LCB6b29tKTtcclxuYXN5bmMgZnVuY3Rpb24gbG9hZFBsYWNlQ2F0ZWdvcnkocGxhY2VzLCBjYXRlZ29yeSwgeCwgeSwgem9vbSA9IHpvb20sIGFtb3VudCkge1xyXG4gIGxldCBsb24xID0gdGlsZTJsb24oeCAtIDAuNSwgem9vbSk7XHJcbiAgbGV0IGxhdDEgPSB0aWxlMmxhdCh5IC0gMC41LCB6b29tKTtcclxuICBsZXQgbG9uMiA9IHRpbGUybG9uKHggKyAwLjUsIHpvb20pO1xyXG4gIGxldCBsYXQyID0gdGlsZTJsYXQoeSArIDAuNSwgem9vbSk7XHJcblxyXG4gIGxldCBwbGFjZXNVcmwgPSBgaHR0cHM6Ly9hcGkuZ2VvYXBpZnkuY29tL3YyL3BsYWNlcz9jYXRlZ29yaWVzPSR7Y2F0ZWdvcnl9JmZpbHRlcj1yZWN0JTNBJHtsb24xfSUyQyR7bGF0MX0lMkMke2xvbjJ9JTJDJHtsYXQyfSZsaW1pdD0ke2Ftb3VudH0mYXBpS2V5PWNhMjExODUyMzU2NDRkMGY4MjFiZTRkZmEzYzJkNmYzYDtcclxuXHJcbiAgdHJ5IHtcclxuICAgIGxldCByZXMgPSBhd2FpdCBmZXRjaChwbGFjZXNVcmwsIHtcclxuICAgICAgbWV0aG9kOiBcIkdFVFwiLFxyXG4gICAgfSk7XHJcbiAgICBsZXQgcmVzdWx0ID0gYXdhaXQgcmVzLmpzb24oKTtcclxuXHJcbiAgICBwbGFjZXMucHVzaChcclxuICAgICAgLi4ucmVzdWx0LmZlYXR1cmVzXHJcbiAgICAgICAgLm1hcCgoZmVhdHVyZSkgPT4ge1xyXG4gICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgbmFtZTogZmVhdHVyZS5wcm9wZXJ0aWVzLm5hbWUsXHJcbiAgICAgICAgICAgIHg6IGxvbjJwbGFjZShmZWF0dXJlLnByb3BlcnRpZXMubG9uLCB6b29tKSAtIHN0YXJ0VGlsZVgsXHJcbiAgICAgICAgICAgIHk6IGxhdDJwbGFjZShmZWF0dXJlLnByb3BlcnRpZXMubGF0LCB6b29tKSAtIHN0YXJ0VGlsZVksXHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmZpbHRlcigoaXQpID0+IGl0Lm5hbWUpXHJcbiAgICApO1xyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcbn1cclxuXHJcbmNsYXNzIHRpbGUge1xyXG4gIGNvbnN0cnVjdG9yKHBvcykge1xyXG4gICAgdGhpcy5ibG9ja1BvcyA9XHJcbiAgICAgIHBvczsgLyogVGhpcyB2ZWN0b3Igc2hvdWxkIGJlIG11bHRpcGxpZWQgYnkgU0laRSB0byBiZSBpbiB3b3JsZCBjb29yZHMgKi9cclxuICAgIHRoaXMucGxhY2VzID0gW107XHJcbiAgICB0aGlzLmxvYWRDb3VudGVyID0gMDtcclxuICB9XHJcbiAgYXN5bmMgbG9hZCgpIHtcclxuICAgIGxldCB0aWxlc2V0X2lkID0gXCJtYXBib3guc2F0ZWxsaXRlXCI7XHJcbiAgICBsZXQgYWNjZXNzX3Rva2VuID1cclxuICAgICAgXCJway5leUoxSWpvaWJITTBJaXdpWVNJNkltTnNhWGx1WW1ZeU9EQTFibkF6Y1hRNGFtbHdlR293YzNnaWZRLjZjUWlRUXhzaU8zV1VJYktGT1FybXdcIjtcclxuICAgIGxldCBmb3JtYXQgPSBcInBuZ1wiO1xyXG4gICAgbGV0IHggPSAwOyAvL3RoaXMueDtcclxuICAgIGxldCB5ID0gMDsgLy90aGlzLnk7XHJcbiAgICB4ID0gc3RhcnRUaWxlWCArIHRoaXMuYmxvY2tQb3MueDtcclxuICAgIHkgPSBzdGFydFRpbGVZICsgdGhpcy5ibG9ja1Bvcy56O1xyXG5cclxuICAgIGxldCB1cmwgPSBgaHR0cHM6Ly9hcGkubWFwYm94LmNvbS92NC8ke3RpbGVzZXRfaWR9LyR7em9vbX0vJHt4fS8ke3l9LiR7Zm9ybWF0fT9hY2Nlc3NfdG9rZW49JHthY2Nlc3NfdG9rZW59YDtcclxuXHJcbiAgICBsb2FkUGxhY2VDYXRlZ29yeSh0aGlzLnBsYWNlcywgXCJwb3B1bGF0ZWRfcGxhY2UuY2l0eVwiLCB4LCB5LCB6b29tLCAxMCk7XHJcbiAgICBsb2FkUGxhY2VDYXRlZ29yeSh0aGlzLnBsYWNlcywgXCJwb3B1bGF0ZWRfcGxhY2UuY291bnR5XCIsIHgsIHksIHpvb20sIDEwKTtcclxuICAgIGxvYWRQbGFjZUNhdGVnb3J5KHRoaXMucGxhY2VzLCBcIm5hdHVyYWwubW91bnRhaW5cIiwgeCwgeSwgem9vbSwgMTApO1xyXG4gICAgbG9hZFBsYWNlQ2F0ZWdvcnkodGhpcy5wbGFjZXMsIFwibmF0dXJhbC53YXRlclwiLCB4LCB5LCB6b29tLCAxMCk7XHJcblxyXG4gICAgLyogZmV0Y2hlcyBmb3IgYSBsb2NhdGlvbiAqL1xyXG4gICAgdHJ5IHtcclxuICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2godXJsKTtcclxuICAgICAgaWYgKHJlc3BvbnNlLm9rKSB7XHJcbiAgICAgICAgbGV0IGJsb2IgPSBhd2FpdCByZXNwb25zZS5ibG9iKCk7XHJcbiAgICAgICAgbGV0IGltYWdlQk0gPSBhd2FpdCBjcmVhdGVJbWFnZUJpdG1hcChibG9iKTtcclxuXHJcbiAgICAgICAgdGhpcy50ZXh0dXJlID0gZ2wuY3JlYXRlVGV4dHVyZSgpO1xyXG4gICAgICAgIGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIHRoaXMudGV4dHVyZSk7XHJcbiAgICAgICAgZ2wudGV4SW1hZ2UyRChcclxuICAgICAgICAgIGdsLlRFWFRVUkVfMkQsXHJcbiAgICAgICAgICAwLCAvLyBtaXAgbGV2ZWxcclxuICAgICAgICAgIGdsLlJHQkEsIC8vIGludGVybmFsIGZvcm1hdFxyXG4gICAgICAgICAgaW1hZ2VCTS53aWR0aCwgLy8gd2lkdGhcclxuICAgICAgICAgIGltYWdlQk0uaGVpZ2h0LCAvLyBoZWlnaHRcclxuICAgICAgICAgIDAsIC8vIGJvcmRlclxyXG4gICAgICAgICAgZ2wuUkdCQSwgLy8gZm9ybWF0XHJcbiAgICAgICAgICBnbC5VTlNJR05FRF9CWVRFLCAvLyB0eXBlXHJcbiAgICAgICAgICBpbWFnZUJNIC8vIGRhdGFcclxuICAgICAgICApO1xyXG4gICAgICAgIGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9NSU5fRklMVEVSLCBnbC5ORUFSRVNUKTtcclxuICAgICAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfTUFHX0ZJTFRFUiwgZ2wuTkVBUkVTVCk7XHJcbiAgICAgICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX1dSQVBfUywgZ2wuQ0xBTVBfVE9fRURHRSk7XHJcbiAgICAgICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX1dSQVBfVCwgZ2wuQ0xBTVBfVE9fRURHRSk7XHJcbiAgICAgICAgdGhpcy5pc0xvYWRlZCA9IHRydWU7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgaWYgKHRoaXMubG9hZENvdW50ZXIrKyA8IDMpIHRoaXMubG9hZCgpO1xyXG4gICAgICAgIGVsc2UgY29uc29sZS5sb2coYEF0IHVybCAke3VybH0gd2FzIGFuIEhUVFAgZXJyb3I6IGAgKyByZXNwb25zZS5zdGF0dXMpO1xyXG4gICAgICB9XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBpZiAodGhpcy5sb2FkQ291bnRlcisrIDwgMykgdGhpcy5sb2FkKCk7XHJcbiAgICAgIGVsc2UgY29uc29sZS5sb2coYEF0IHVybCAke3VybH0gd2FzIGFuIEhUVFAgZXJyb3I6IGAgKyBlcnJvcik7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcbn1cclxuLypcclxuICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJoaWRlXCIpLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBhc3luYygpPT57XHJcbiAgICAgICAgICAgICAgICBhd2FpdCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImRzQ2FuXCIpLnJlcXVlc3RQb2ludGVyTG9jayh7XHJcbiAgICAgICAgICAgICAgICAgICAgdW5hZGp1c3RlZE1vdmVtZW50OiB0cnVlXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4qL1xyXG5mdW5jdGlvbiByZWxvYWRUaWxlcygpIHtcclxuICAvKiBsb2FkIGFsbCB0aGUgbmVhciBhbmQgdW5sb2FkZWQgeWV0ICovXHJcbiAgLypzaXplICo9IE1hdGgucG93KDIsIHJvdWdobmVzcyk7XHJcbiAgem9vbSAtPSByb3VnaG5lc3M7XHJcbiAgY2FtLnVzZXJCbG9ja1BvcyA9IG5ldyB2ZWMzKFxyXG4gICAgTWF0aC5mbG9vcihjYW0udXNlckxvYy54IC8gc2l6ZSksXHJcbiAgICAwLFxyXG4gICAgTWF0aC5mbG9vcihjYW0udXNlckxvYy56IC8gc2l6ZSlcclxuICApO1xyXG5cclxuICAvKiBST1VHSCBUSUxFUyovXHJcblxyXG4gIC8qIERlbGV0ZSB0aGUgdG9vIGZhcmF3YXkgb25lcyAqL1xyXG4gIC8qcm91Z2hUaWxlcyA9IHJvdWdoVGlsZXMuZmlsdGVyKFxyXG4gICAgKHRpbGUpID0+XHJcbiAgICAgICh0aWxlLmJsb2NrUG9zLnggLSBjYW0udXNlckJsb2NrUG9zLngpICpcclxuICAgICAgICAodGlsZS5ibG9ja1Bvcy54IC0gY2FtLnVzZXJCbG9ja1Bvcy54KSArXHJcbiAgICAgICAgKHRpbGUuYmxvY2tQb3MueiAtIGNhbS51c2VyQmxvY2tQb3MueikgKlxyXG4gICAgICAgICAgKHRpbGUuYmxvY2tQb3MueiAtIGNhbS51c2VyQmxvY2tQb3MueikgPFxyXG4gICAgICBtYXhSb3VnaFRpbGVSZW5kZXJCdWZmZXJMZW5ndGgyXHJcbiAgKTtcclxuICBmb3IgKGxldCB4ID0gLW1heFJvdWdoVGlsZVJlbmRlckxlbmd0aCArIDE7IHggPCBtYXhSb3VnaFRpbGVSZW5kZXJMZW5ndGg7IHgrKylcclxuICAgIGZvciAoXHJcbiAgICAgIGxldCB5ID0gLW1heFJvdWdoVGlsZVJlbmRlckxlbmd0aCArIDE7XHJcbiAgICAgIHkgPCBtYXhSb3VnaFRpbGVSZW5kZXJMZW5ndGg7XHJcbiAgICAgIHkrK1xyXG4gICAgKVxyXG4gICAgICBpZiAoeCAqIHggKyB5ICogeSA8IG1heFJvdWdoVGlsZVJlbmRlckxlbmd0aDIpXHJcbiAgICAgICAgaWYgKFxyXG4gICAgICAgICAgIXJvdWdoVGlsZXMuZmluZChcclxuICAgICAgICAgICAgKHRpbGUpID0+XHJcbiAgICAgICAgICAgICAgdGlsZS5ibG9ja1Bvcy54ID09IHggKyBjYW0udXNlckJsb2NrUG9zLnggJiZcclxuICAgICAgICAgICAgICB0aWxlLmJsb2NrUG9zLnogPT0geSArIGNhbS51c2VyQmxvY2tQb3MuelxyXG4gICAgICAgICAgKVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgbGV0IG5ld1RpbGUgPSBuZXcgdGlsZShcclxuICAgICAgICAgICAgbmV3IHZlYzMoeCArIGNhbS51c2VyQmxvY2tQb3MueCwgMCwgeSArIGNhbS51c2VyQmxvY2tQb3MueilcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgICBuZXdUaWxlLmxvYWQoKS50aGVuKChpdCkgPT4gcm91Z2hUaWxlcy5wdXNoKGl0KSk7XHJcbiAgICAgICAgfVxyXG4gIHpvb20gKz0gcm91Z2huZXNzO1xyXG4gIHNpemUgLz0gTWF0aC5wb3coMiwgcm91Z2huZXNzKTsqL1xyXG4gIGNhbS51c2VyQmxvY2tQb3MgPSBuZXcgdmVjMyhcclxuICAgIE1hdGguZmxvb3IoY2FtLnVzZXJMb2MueCAvIHNpemUpLFxyXG4gICAgMCxcclxuICAgIE1hdGguZmxvb3IoY2FtLnVzZXJMb2MueiAvIHNpemUpXHJcbiAgKTtcclxuICAvKiB1c3VhbCBvbmVzKi9cclxuICAvKiBEZWxldGUgdGhlIHRvbyBmYXJhd2F5IG9uZXMgKi9cclxuICB0aWxlcyA9IHRpbGVzLmZpbHRlcihcclxuICAgICh0aWxlKSA9PlxyXG4gICAgICAodGlsZS5ibG9ja1Bvcy54IC0gY2FtLnVzZXJCbG9ja1Bvcy54KSAqXHJcbiAgICAgICAgKHRpbGUuYmxvY2tQb3MueCAtIGNhbS51c2VyQmxvY2tQb3MueCkgK1xyXG4gICAgICAgICh0aWxlLmJsb2NrUG9zLnogLSBjYW0udXNlckJsb2NrUG9zLnopICpcclxuICAgICAgICAgICh0aWxlLmJsb2NrUG9zLnogLSBjYW0udXNlckJsb2NrUG9zLnopIDxcclxuICAgICAgbWF4VGlsZVJlbmRlckJ1ZmZlckxlbmd0aDJcclxuICApO1xyXG5cclxuICBmb3IgKGxldCB4ID0gLW1heFRpbGVSZW5kZXJMZW5ndGggKyAxOyB4IDwgbWF4VGlsZVJlbmRlckxlbmd0aDsgeCsrKVxyXG4gICAgZm9yIChsZXQgeSA9IC1tYXhUaWxlUmVuZGVyTGVuZ3RoICsgMTsgeSA8IG1heFRpbGVSZW5kZXJMZW5ndGg7IHkrKylcclxuICAgICAgaWYgKHggKiB4ICsgeSAqIHkgPCBtYXhUaWxlUmVuZGVyTGVuZ3RoMilcclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICAhdGlsZXMuZmluZChcclxuICAgICAgICAgICAgKHRpbGUpID0+XHJcbiAgICAgICAgICAgICAgdGlsZS5ibG9ja1Bvcy54ID09IHggKyBjYW0udXNlckJsb2NrUG9zLnggJiZcclxuICAgICAgICAgICAgICB0aWxlLmJsb2NrUG9zLnogPT0geSArIGNhbS51c2VyQmxvY2tQb3MuelxyXG4gICAgICAgICAgKVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgbGV0IG5ld1RpbGUgPSBuZXcgdGlsZShcclxuICAgICAgICAgICAgbmV3IHZlYzMoeCArIGNhbS51c2VyQmxvY2tQb3MueCwgMCwgeSArIGNhbS51c2VyQmxvY2tQb3MueilcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgICBuZXdUaWxlLmxvYWQoKTtcclxuICAgICAgICAgIHRpbGVzLnB1c2gobmV3VGlsZSk7XHJcbiAgICAgICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiByZW5kZXIoKSB7XHJcbiAgLyogU2hhZGVyIGhhbmRsaW5nLiBNYWtlIGZ1bmN0aW9uISAqL1xyXG5cclxuICBnbC51c2VQcm9ncmFtKHNoYWRlckkuc2hhZGVyUHJvZ3JhbSk7XHJcbiAgbGV0IHRpbWVMb2MgPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24oc2hhZGVySS5zaGFkZXJQcm9ncmFtLCBcInRpbWVcIik7XHJcbiAgY29uc3QgcHJvamVjdGlvbkxvYyA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihcclxuICAgIHNoYWRlckkuc2hhZGVyUHJvZ3JhbSxcclxuICAgIFwicHJvamVjdGlvblwiXHJcbiAgKTtcclxuICBjb25zdCBtb2RlbFZpZXdMb2MgPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24oXHJcbiAgICBzaGFkZXJJLnNoYWRlclByb2dyYW0sXHJcbiAgICBcIm1vZGVsVmlld1wiXHJcbiAgKTtcclxuICBjb25zdCB3b3JsZExvYyA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihzaGFkZXJJLnNoYWRlclByb2dyYW0sIFwid29ybGRcIik7XHJcbiAgZ2wuYmluZFZlcnRleEFycmF5KHRpbGVWQSk7XHJcbiAgZ2wudW5pZm9ybU1hdHJpeDRmdihcclxuICAgIHByb2plY3Rpb25Mb2MsXHJcbiAgICBmYWxzZSxcclxuICAgIG5ldyBGbG9hdDMyQXJyYXkoY2FtLm1hdHJQcm9qLmEoKS5qb2luKCkuc3BsaXQoXCIsXCIpKVxyXG4gICk7XHJcbiAgZ2wudW5pZm9ybU1hdHJpeDRmdihcclxuICAgIG1vZGVsVmlld0xvYyxcclxuICAgIGZhbHNlLFxyXG4gICAgbmV3IEZsb2F0MzJBcnJheShjYW0ubWF0clZpZXcuYSgpLmpvaW4oKS5zcGxpdChcIixcIikpXHJcbiAgKTtcclxuICBsZXQgbXlNYXRyNCA9IG5ldyBtYXRyNCgpO1xyXG5cclxuICBjb25zdCBjYW1Mb2NMb2MgPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24oc2hhZGVySS5zaGFkZXJQcm9ncmFtLCBcImNhbUxvY1wiKTtcclxuICBjb25zdCBsaWdodERpckxvYyA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihzaGFkZXJJLnNoYWRlclByb2dyYW0sIFwibGlnaHREaXJcIik7XHJcblxyXG4gIGdsLnVuaWZvcm0zZihsaWdodERpckxvYywgMSwgMSwgMSk7XHJcbiAgZ2wudW5pZm9ybTNmKGNhbUxvY0xvYywgY2FtLmxvYy54LCBjYW0ubG9jLnksIGNhbS5sb2Mueik7XHJcblxyXG4gIC8qIEN1c3RvbWlzZWFibGUgc3R1ZmYgKi9cclxuICBjb25zdCBrYUxvYyA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihzaGFkZXJJLnNoYWRlclByb2dyYW0sIFwia2FcIik7XHJcbiAgY29uc3Qga2RMb2MgPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24oc2hhZGVySS5zaGFkZXJQcm9ncmFtLCBcImtkXCIpO1xyXG4gIGNvbnN0IGtzTG9jID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHNoYWRlckkuc2hhZGVyUHJvZ3JhbSwgXCJrc1wiKTtcclxuICBjb25zdCBwaExvYyA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihzaGFkZXJJLnNoYWRlclByb2dyYW0sIFwicGhcIik7XHJcbiAgZ2wudW5pZm9ybTNmKGthTG9jLCAwLjAxLCAwLjMsIDAuMSk7XHJcbiAgZ2wudW5pZm9ybTNmKGtkTG9jLCAwLjA3NTY4LCAwLjYxNDI0LCAwLjA3NTY4KTtcclxuICBnbC51bmlmb3JtM2Yoa3NMb2MsIDAuNjMzLCAwLjcyNzgxMSwgMC42MzMpO1xyXG4gIGdsLnVuaWZvcm0xZihwaExvYywgNzYuOCk7XHJcblxyXG4gIGdsLnVuaWZvcm0xZih0aW1lTG9jLCBEYXRlLm5vdygpKTtcclxuXHJcbiAgY29uc3QgdGV4TG9jID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHNoYWRlckkuc2hhZGVyUHJvZ3JhbSwgXCJ0ZXgwXCIpO1xyXG4gIGxldCB0ZXhVbml0ID0gMDtcclxuXHJcbiAgLyogVGlsZXMgcmVuZGVyaW5nICovXHJcblxyXG4gIGlmIChvbGRVc2VyTG9jLnN1YihjYW0udXNlckxvYykubGVuMigpID4gc2l6ZSAqIHNpemUgKiAxMCkge1xyXG4gICAgcmVsb2FkVGlsZXMoKTtcclxuICAgIG9sZFVzZXJMb2MgPSBjYW0udXNlckxvYy5jb3B5KCk7XHJcbiAgfVxyXG4gIC8qXHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCByb3VnaFRpbGVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAvKiBQYXNzIHBvc2l0aW9uICovXHJcbiAgLyogIGdsLnVuaWZvcm1NYXRyaXg0ZnYoXHJcbiAgICAgIHdvcmxkTG9jLFxyXG4gICAgICBmYWxzZSxcclxuICAgICAgbmV3IEZsb2F0MzJBcnJheShcclxuICAgICAgICBteU1hdHI0XHJcbiAgICAgICAgICAudHJhbnNsYXRlKFxyXG4gICAgICAgICAgICBuZXcgdmVjMyhcclxuICAgICAgICAgICAgICByb3VnaFRpbGVzW2ldLmJsb2NrUG9zLnggKiBNYXRoLnBvdyhzaXplLCByb3VnaG5lc3MpLFxyXG4gICAgICAgICAgICAgIC0wLjEsXHJcbiAgICAgICAgICAgICAgcm91Z2hUaWxlc1tpXS5ibG9ja1Bvcy56ICogTWF0aC5wb3coc2l6ZSwgcm91Z2huZXNzKVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgICApXHJcbiAgICAgICAgICAuYSgpXHJcbiAgICAgICAgICAuam9pbigpXHJcbiAgICAgICAgICAuc3BsaXQoXCIsXCIpXHJcbiAgICAgIClcclxuICAgICk7XHJcblxyXG4gICAgLyogQmluZCB0ZXh0dXJlICovXHJcbiAgLyogICBnbC5hY3RpdmVUZXh0dXJlKGdsLlRFWFRVUkUwICsgdGV4VW5pdCk7XHJcbiAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCByb3VnaFRpbGVzW2ldLnRleHR1cmUpO1xyXG4gICAgZ2wudW5pZm9ybTFpKHRleExvYywgdGV4VW5pdCk7XHJcblxyXG4gICAgZ2wuZHJhd0FycmF5cyhnbC5UUklBTkdMRVMsIDAsIDYpO1xyXG4gIH0qL1xyXG4gIHBsYWNlc0hUTUwuaW5uZXJIVE1MID0gXCJcIjtcclxuICBmb3IgKGxldCBpID0gMDsgaSA8IHRpbGVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAvLyBpZiAodGlsZXNbaV0uaXNMb2FkZWQpIHtcclxuICAgIGxldCB3b3JsZCA9IG15TWF0cjQudHJhbnNsYXRlKFxyXG4gICAgICBuZXcgdmVjMyh0aWxlc1tpXS5ibG9ja1Bvcy54ICogc2l6ZSwgMCwgdGlsZXNbaV0uYmxvY2tQb3MueiAqIHNpemUpXHJcbiAgICApO1xyXG4gICAgLyogUGFzcyBwb3NpdGlvbiAqL1xyXG4gICAgZ2wudW5pZm9ybU1hdHJpeDRmdihcclxuICAgICAgd29ybGRMb2MsXHJcbiAgICAgIGZhbHNlLFxyXG4gICAgICBuZXcgRmxvYXQzMkFycmF5KHdvcmxkLmEoKS5qb2luKCkuc3BsaXQoXCIsXCIpKVxyXG4gICAgKTtcclxuXHJcbiAgICAvKiBCaW5kIHRleHR1cmUgKi9cclxuICAgIGdsLmFjdGl2ZVRleHR1cmUoZ2wuVEVYVFVSRTAgKyB0ZXhVbml0KTtcclxuICAgIGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIHRpbGVzW2ldLnRleHR1cmUpO1xyXG4gICAgZ2wudW5pZm9ybTFpKHRleExvYywgdGV4VW5pdCk7XHJcblxyXG4gICAgZ2wuZHJhd0FycmF5cyhnbC5UUklBTkdMRVMsIDAsIDYpO1xyXG4gICAgbGV0IGRyYXdUaWxlcyA9IGZhbHNlO1xyXG4gICAgaWYgKGRyYXdUaWxlcylcclxuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aWxlc1tpXS5wbGFjZXMubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICBsZXQgY2xpcHNwYWNlID0gbmV3IHZlYzMoXHJcbiAgICAgICAgICB0aWxlc1tpXS5wbGFjZXNbal0ueCAqIHNpemUsXHJcbiAgICAgICAgICAwLFxyXG4gICAgICAgICAgdGlsZXNbaV0ucGxhY2VzW2pdLnkgKiBzaXplXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgaWYgKFxyXG4gICAgICAgICAgY2FtLnVzZXJEaXIuYW5nbGUoY2xpcHNwYWNlLnN1YihjYW0ubG9jKSkgPiAxLjU3IHx8XHJcbiAgICAgICAgICBjYW0udXNlckRpci5hbmdsZShjbGlwc3BhY2Uuc3ViKGNhbS5sb2MpKSA8IC0xLjU3XHJcbiAgICAgICAgKVxyXG4gICAgICAgICAgY29udGludWU7XHJcblxyXG4gICAgICAgIC8vIHZlYzMgLyB2ZWM0IGRpZmZlcmVuY2VcclxuICAgICAgICBjbGlwc3BhY2UgPSBjbGlwc3BhY2UubXVsTWF0cihjYW0ubWF0clZpZXcpLm11bE1hdHIoY2FtLm1hdHJQcm9qKTtcclxuXHJcbiAgICAgICAgbGV0IHBpeGVsWCA9IChjbGlwc3BhY2UueCAqIDAuNSArIDAuNSkgKiBnbC5jYW52YXMud2lkdGg7XHJcbiAgICAgICAgbGV0IHBpeGVsWSA9IChjbGlwc3BhY2UueSAqIC0wLjUgKyAwLjUpICogZ2wuY2FudmFzLmhlaWdodDtcclxuXHJcbiAgICAgICAgbGV0IHBsYWNlVGFnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XHJcbiAgICAgICAgY29uc3QgbmFtZVRhZyA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHRpbGVzW2ldLnBsYWNlc1tqXS5uYW1lKTtcclxuICAgICAgICBwbGFjZVRhZy5hcHBlbmRDaGlsZChuYW1lVGFnKTtcclxuXHJcbiAgICAgICAgcGxhY2VUYWcuY2xhc3NOYW1lID0gXCJwbGFjZVwiO1xyXG4gICAgICAgIHBsYWNlVGFnLnN0eWxlLmxlZnQgPSBNYXRoLmZsb29yKHBpeGVsWCkgKyBcInB4XCI7XHJcbiAgICAgICAgcGxhY2VUYWcuc3R5bGUudG9wID0gTWF0aC5mbG9vcihwaXhlbFkpICsgXCJweFwiO1xyXG4gICAgICAgIHBsYWNlVGFnLnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xyXG4gICAgICAgIHBsYWNlVGFnLnN0eWxlLmNvbG9yID0gXCJyZWRcIjtcclxuICAgICAgICBwbGFjZVRhZy5zdHlsZS5mb250RmFtaWx5ID0gXCJpbXBhY3RcIjtcclxuICAgICAgICBwbGFjZVRhZy5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcImJsYWNrXCI7XHJcbiAgICAgICAgcGxhY2VUYWcuc3R5bGUuYm9yZGVyUmFkaXVzID0gXCIxMHB4XCI7XHJcbiAgICAgICAgcGxhY2VUYWcuc3R5bGUucGFkZGluZ1JpZ2h0ID0gcGxhY2VUYWcuc3R5bGUucGFkZGluZ0xlZnQgPSBcIjNweFwiO1xyXG4gICAgICAgIHBsYWNlc0hUTUwuYXBwZW5kQ2hpbGQocGxhY2VUYWcpO1xyXG4gICAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5hc3luYyBmdW5jdGlvbiBpbml0KCkge1xyXG4gIHNoYWRlckkgPSBhd2FpdCBzaGFkZXJBZGQoXCJtYXBcIik7XHJcbiAgdGlsZVZBID0gZ2wuY3JlYXRlVmVydGV4QXJyYXkoKTtcclxuICBnbC5iaW5kVmVydGV4QXJyYXkodGlsZVZBKTtcclxuICB1c2VTaGFkZXIoc2hhZGVySSwgcGxhbmVWZXJ0ZXhQb3NpdGlvbnMpO1xyXG5cclxuICBjb25zdCB0ZXhjb29yZExvYyA9IGdsLmdldEF0dHJpYkxvY2F0aW9uKHNoYWRlckkuc2hhZGVyUHJvZ3JhbSwgXCJ0ZXhDb29yZFwiKTtcclxuICBjb25zdCB0ZXhjb29yZEJ1ZmZlciA9IGdsLmNyZWF0ZUJ1ZmZlcigpO1xyXG5cclxuICBnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgdGV4Y29vcmRCdWZmZXIpO1xyXG4gIGdsLmJ1ZmZlckRhdGEoZ2wuQVJSQVlfQlVGRkVSLCBtYXBWZXJ0ZXhUZXhjb29yZHMsIGdsLlNUQVRJQ19EUkFXKTtcclxuICBnbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSh0ZXhjb29yZExvYyk7XHJcbiAgZ2wudmVydGV4QXR0cmliUG9pbnRlcihcclxuICAgIHRleGNvb3JkTG9jLCAvLyBsb2NhdGlvblxyXG4gICAgMiwgLy8gc2l6ZSAoY29tcG9uZW50cyBwZXIgaXRlcmF0aW9uKVxyXG4gICAgZ2wuRkxPQVQsIC8vIHR5cGUgb2YgdG8gZ2V0IGZyb20gYnVmZmVyXHJcbiAgICBmYWxzZSwgLy8gbm9ybWFsaXplXHJcbiAgICAwLCAvLyBzdHJpZGUgKGJ5dGVzIHRvIGFkdmFuY2UgZWFjaCBpdGVyYXRpb24pXHJcbiAgICAwIC8vIG9mZnNldCAoYnl0ZXMgZnJvbSBzdGFydCBvZiBidWZmZXIpXHJcbiAgKTtcclxuICBnbC5iaW5kVmVydGV4QXJyYXkobnVsbCk7XHJcbiAgLyogYWFhICovXHJcbiAgY2FtLnVzZXJCbG9ja1BvcyA9IG5ldyB2ZWMzKFxyXG4gICAgTWF0aC5mbG9vcihjYW0udXNlckxvYy54IC8gc2l6ZSksXHJcbiAgICAwLFxyXG4gICAgTWF0aC5mbG9vcihjYW0udXNlckxvYy56IC8gc2l6ZSlcclxuICApO1xyXG4gIHBsYWNlc0hUTUwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInBsYWNlc1wiKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHVuaXRNYXBBZGQoKSB7XHJcbiAgdW5pdEFkZChpbml0LCByZW5kZXIsIFwiTWFwXCIpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBsb24ydGlsZShsb24sIHpvb20pIHtcclxuICByZXR1cm4gTWF0aC5mbG9vcigoKGxvbiArIDE4MCkgLyAzNjApICogTWF0aC5wb3coMiwgem9vbSkpO1xyXG59XHJcbmZ1bmN0aW9uIGxhdDJ0aWxlKGxhdCwgem9vbSkge1xyXG4gIHJldHVybiBNYXRoLmZsb29yKFxyXG4gICAgKCgxIC1cclxuICAgICAgTWF0aC5sb2coXHJcbiAgICAgICAgTWF0aC50YW4oKGxhdCAqIE1hdGguUEkpIC8gMTgwKSArIDEgLyBNYXRoLmNvcygobGF0ICogTWF0aC5QSSkgLyAxODApXHJcbiAgICAgICkgL1xyXG4gICAgICAgIE1hdGguUEkpIC9cclxuICAgICAgMikgKlxyXG4gICAgICBNYXRoLnBvdygyLCB6b29tKVxyXG4gICk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGxvbjJwbGFjZShsb24sIHpvb20pIHtcclxuICByZXR1cm4gKChsb24gKyAxODApIC8gMzYwKSAqIE1hdGgucG93KDIsIHpvb20pO1xyXG59XHJcbmZ1bmN0aW9uIGxhdDJwbGFjZShsYXQsIHpvb20pIHtcclxuICByZXR1cm4gKFxyXG4gICAgKCgxIC1cclxuICAgICAgTWF0aC5sb2coXHJcbiAgICAgICAgTWF0aC50YW4oKGxhdCAqIE1hdGguUEkpIC8gMTgwKSArIDEgLyBNYXRoLmNvcygobGF0ICogTWF0aC5QSSkgLyAxODApXHJcbiAgICAgICkgL1xyXG4gICAgICAgIE1hdGguUEkpIC9cclxuICAgICAgMikgKlxyXG4gICAgTWF0aC5wb3coMiwgem9vbSlcclxuICApO1xyXG59XHJcblxyXG5mdW5jdGlvbiB0aWxlMmxvbih4LCB6KSB7XHJcbiAgcmV0dXJuICh4IC8gTWF0aC5wb3coMiwgeikpICogMzYwIC0gMTgwO1xyXG59XHJcblxyXG5mdW5jdGlvbiB0aWxlMmxhdCh5LCB6KSB7XHJcbiAgdmFyIG4gPSBNYXRoLlBJIC0gKDIgKiBNYXRoLlBJICogeSkgLyBNYXRoLnBvdygyLCB6KTtcclxuICByZXR1cm4gKDE4MCAvIE1hdGguUEkpICogTWF0aC5hdGFuKDAuNSAqIChNYXRoLmV4cChuKSAtIE1hdGguZXhwKC1uKSkpO1xyXG59XHJcbiIsImltcG9ydCB7IGdsLCBjYW52YXMgfSBmcm9tIFwiLi4vbWFpbi5qc1wiO1xyXG5pbXBvcnQgeyB1bml0QWRkIH0gZnJvbSBcIi4vdW5pdHMuanNcIjtcclxuaW1wb3J0IHsgc2hhZGVyQWRkIH0gZnJvbSBcIi4uL3JuZC9zaGFkZXJzLmpzXCI7XHJcbmltcG9ydCB7IG1vdXNlLCBjYW0gfSBmcm9tIFwiLi4vdXRpbHMvY29udHJvbHMuanNcIjtcclxuXHJcbmxldCBwb3MgPSBbXTtcclxubGV0IHNoYWRlclByb2dyYW07XHJcbmxldCBza3lTaGFkZXI7XHJcbmxldCBmcmFjVmVydGV4QXJyYXk7XHJcbmNvbnN0IHJjb2VmZiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicmNvZWZmXCIpO1xyXG5jb25zdCBnY29lZmYgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImdjb2VmZlwiKTtcclxuY29uc3QgYmNvZWZmID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJiY29lZmZcIik7XHJcbmNvbnN0IGEgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImFcIik7XHJcbmNvbnN0IGIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJcIik7XHJcbmxldCBzdGFydFRpbWUgPSBEYXRlLm5vdygpO1xyXG5sZXQgZmJUZXh0dXJlV2lkdGg7XHJcbmxldCBmYlRleHR1cmVIZWlnaHQ7XHJcbmxldCBmYjtcclxubGV0IGZiVGV4dHVyZTtcclxubGV0IGRlcHRoUkI7XHJcbmxldCB0ZXhVbml0ID0gNjtcclxuZnVuY3Rpb24gcmVuZGVyKCkge1xyXG4gIGdsLmRpc2FibGUoZ2wuREVQVEhfVEVTVCk7XHJcblxyXG4gIGdsLmJpbmRGcmFtZWJ1ZmZlcihnbC5GUkFNRUJVRkZFUiwgZmIpO1xyXG4gIGdsLnZpZXdwb3J0KDAsIDAsIGZiVGV4dHVyZVdpZHRoLCBmYlRleHR1cmVIZWlnaHQpO1xyXG4gIC8qIFJlbmRlciB0byB0ZXh0dXJlICovXHJcbiAgLy8gZ2wuY2xlYXIoZ2wuQ09MT1JfQlVGRkVSX0JJVCk7XHJcblxyXG4gIGdsLmJpbmRWZXJ0ZXhBcnJheShmcmFjVmVydGV4QXJyYXkpO1xyXG4gIGdsLnVzZVByb2dyYW0oc2hhZGVyUHJvZ3JhbS5zaGFkZXJQcm9ncmFtKTtcclxuICBsZXQgdGltZUxvYyA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihzaGFkZXJQcm9ncmFtLnNoYWRlclByb2dyYW0sIFwidGltZVwiKTtcclxuICBsZXQgeExvYyA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihzaGFkZXJQcm9ncmFtLnNoYWRlclByb2dyYW0sIFwieFwiKTtcclxuICBsZXQgeUxvYyA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihzaGFkZXJQcm9ncmFtLnNoYWRlclByb2dyYW0sIFwieVwiKTtcclxuICBsZXQgem9vbSA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihzaGFkZXJQcm9ncmFtLnNoYWRlclByb2dyYW0sIFwiem9vbVwiKTtcclxuICBsZXQgcmNvZWZmTG9jID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHNoYWRlclByb2dyYW0uc2hhZGVyUHJvZ3JhbSwgXCJyY29lZmZcIik7XHJcbiAgbGV0IGdjb2VmZkxvYyA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihzaGFkZXJQcm9ncmFtLnNoYWRlclByb2dyYW0sIFwiZ2NvZWZmXCIpO1xyXG4gIGxldCBiY29lZmZMb2MgPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24oc2hhZGVyUHJvZ3JhbS5zaGFkZXJQcm9ncmFtLCBcImJjb2VmZlwiKTtcclxuICBsZXQgYUxvYyA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihzaGFkZXJQcm9ncmFtLnNoYWRlclByb2dyYW0sIFwiYVwiKTtcclxuICBsZXQgYkxvYyA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihzaGFkZXJQcm9ncmFtLnNoYWRlclByb2dyYW0sIFwiYlwiKTtcclxuICBnbC51bmlmb3JtMWYodGltZUxvYywgKERhdGUubm93KCkgLSBzdGFydFRpbWUpIC8gMTAwMCk7XHJcbiAgZ2wudW5pZm9ybTFmKHlMb2MsIDAuNCk7XHJcbiAgZ2wudW5pZm9ybTFmKHhMb2MsIDAuNCk7XHJcbiAgZ2wudW5pZm9ybTFmKHpvb20sIDEpO1xyXG4gIGdsLnVuaWZvcm0xZihyY29lZmZMb2MsIHJjb2VmZi52YWx1ZSk7XHJcbiAgZ2wudW5pZm9ybTFmKGdjb2VmZkxvYywgZ2NvZWZmLnZhbHVlKTtcclxuICBnbC51bmlmb3JtMWYoYmNvZWZmTG9jLCBiY29lZmYudmFsdWUpO1xyXG4gIGdsLnVuaWZvcm0xZihhTG9jLCBhLnZhbHVlKTtcclxuICBnbC51bmlmb3JtMWYoYkxvYywgYi52YWx1ZSAqIDUpO1xyXG4gIGdsLnVzZVByb2dyYW0oc2hhZGVyUHJvZ3JhbS5zaGFkZXJQcm9ncmFtKTtcclxuICBnbC5kcmF3QXJyYXlzKGdsLlRSSUFOR0xFX1NUUklQLCAwLCA0KTtcclxuXHJcbiAgLyogUmVuZGVyIHRvIHRoZSBza3kgKi9cclxuICBnbC51c2VQcm9ncmFtKHNreVNoYWRlci5zaGFkZXJQcm9ncmFtKTtcclxuICBjb25zdCB0ZXhMb2MgPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24oc2t5U2hhZGVyLnNoYWRlclByb2dyYW0sIFwidGV4MFwiKTtcclxuXHJcbiAgZ2wuYmluZEZyYW1lYnVmZmVyKGdsLkZSQU1FQlVGRkVSLCBudWxsKTtcclxuICBnbC52aWV3cG9ydChcclxuICAgIDAsXHJcbiAgICAwLFxyXG4gICAgY2FtLmZyYW1lVyxcclxuICAgIGNhbS5mcmFtZUhcclxuICAgIC8vICBNYXRoLm1heChnbC5jYW52YXMud2lkdGgsIGdsLmNhbnZhcy5oZWlnaHQpXHJcbiAgKTtcclxuXHJcbiAgZ2wuYWN0aXZlVGV4dHVyZShnbC5URVhUVVJFMCArIHRleFVuaXQpO1xyXG4gIGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIGZiVGV4dHVyZSk7XHJcbiAgZ2wudW5pZm9ybTFpKHRleExvYywgdGV4VW5pdCk7XHJcblxyXG4gIGxldCBjYW1EaXJMb2MgPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24oc2t5U2hhZGVyLnNoYWRlclByb2dyYW0sIFwiY2FtRGlyXCIpO1xyXG4gIGxldCBjYW1VcExvYyA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihza3lTaGFkZXIuc2hhZGVyUHJvZ3JhbSwgXCJjYW1VcFwiKTtcclxuICBsZXQgY2FtUmlnaHRMb2MgPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24oc2t5U2hhZGVyLnNoYWRlclByb2dyYW0sIFwiY2FtUmlnaHRcIik7XHJcbiAgbGV0IHByb2pEaXN0TG9jID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHNreVNoYWRlci5zaGFkZXJQcm9ncmFtLCBcInByb2pEaXN0XCIpO1xyXG4gIGxldCBmcmFtZVdMb2MgPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24oc2t5U2hhZGVyLnNoYWRlclByb2dyYW0sIFwiZnJhbWVXXCIpO1xyXG5cclxuICBsZXQgZnJhbWVITG9jID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHNreVNoYWRlci5zaGFkZXJQcm9ncmFtLCBcImZyYW1lSFwiKTtcclxuICBnbC51bmlmb3JtM2YoY2FtRGlyTG9jLCBjYW0uZGlyLngsIGNhbS5kaXIueSwgY2FtLmRpci56KTtcclxuICBnbC51bmlmb3JtM2YoY2FtVXBMb2MsIGNhbS51cC54LCBjYW0udXAueSwgY2FtLnVwLnopO1xyXG4gIGdsLnVuaWZvcm0zZihjYW1SaWdodExvYywgY2FtLnJpZ2h0LngsIGNhbS5yaWdodC55LCBjYW0ucmlnaHQueik7XHJcbiAgZ2wudW5pZm9ybTFmKHByb2pEaXN0TG9jLCBjYW0ucHJvakRpc3QpO1xyXG4gIGdsLnVuaWZvcm0xZihmcmFtZVdMb2MsIGNhbS5mcmFtZVcpO1xyXG4gIGdsLnVuaWZvcm0xZihmcmFtZUhMb2MsIGNhbS5mcmFtZUgpO1xyXG5cclxuICBnbC51c2VQcm9ncmFtKHNreVNoYWRlci5zaGFkZXJQcm9ncmFtKTtcclxuICBnbC5kcmF3QXJyYXlzKGdsLlRSSUFOR0xFX1NUUklQLCAwLCA0KTtcclxuXHJcbiAgZ2wuZW5hYmxlKGdsLkRFUFRIX1RFU1QpO1xyXG59XHJcblxyXG5hc3luYyBmdW5jdGlvbiBpbml0KCkge1xyXG4gIGZyYWNWZXJ0ZXhBcnJheSA9IGdsLmNyZWF0ZVZlcnRleEFycmF5KCk7XHJcbiAgZ2wuYmluZFZlcnRleEFycmF5KGZyYWNWZXJ0ZXhBcnJheSk7XHJcbiAgc2hhZGVyUHJvZ3JhbSA9IGF3YWl0IHNoYWRlckFkZChcIm1hbmRlbGJyb3RcIik7XHJcbiAgcG9zID0gWy0xLCAtMSwgMCwgLTEsIDEsIDAsIDEsIC0xLCAwLCAxLCAxLCAwXTtcclxuXHJcbiAgbGV0IHBvc0xvYyA9IGdsLmdldEF0dHJpYkxvY2F0aW9uKHNoYWRlclByb2dyYW0uc2hhZGVyUHJvZ3JhbSwgXCJpbl9wb3NcIik7XHJcbiAgbGV0IHBvc2l0aW9uQnVmZmVyID0gZ2wuY3JlYXRlQnVmZmVyKCk7XHJcbiAgZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIHBvc2l0aW9uQnVmZmVyKTtcclxuICBnbC5idWZmZXJEYXRhKGdsLkFSUkFZX0JVRkZFUiwgbmV3IEZsb2F0MzJBcnJheShwb3MpLCBnbC5TVEFUSUNfRFJBVyk7XHJcbiAgZ2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkocG9zTG9jKTtcclxuICBnbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKHBvc0xvYywgMywgZ2wuRkxPQVQsIGZhbHNlLCAwLCAwKTtcclxuXHJcbiAgLyogQWRkaXRpb25hbCBpbml0aWFsaXphdGlvbiAqL1xyXG4gIHNreVNoYWRlciA9IGF3YWl0IHNoYWRlckFkZChcInNreVwiKTtcclxuXHJcbiAgcG9zTG9jID0gZ2wuZ2V0QXR0cmliTG9jYXRpb24oc2hhZGVyUHJvZ3JhbS5zaGFkZXJQcm9ncmFtLCBcImluX3Bvc1wiKTtcclxuICBwb3NpdGlvbkJ1ZmZlciA9IGdsLmNyZWF0ZUJ1ZmZlcigpO1xyXG4gIGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCBwb3NpdGlvbkJ1ZmZlcik7XHJcbiAgZ2wuYnVmZmVyRGF0YShnbC5BUlJBWV9CVUZGRVIsIG5ldyBGbG9hdDMyQXJyYXkocG9zKSwgZ2wuU1RBVElDX0RSQVcpO1xyXG4gIGdsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KHBvc0xvYyk7XHJcbiAgZ2wudmVydGV4QXR0cmliUG9pbnRlcihwb3NMb2MsIDMsIGdsLkZMT0FULCBmYWxzZSwgMCwgMCk7XHJcblxyXG4gIGZiVGV4dHVyZVdpZHRoID0gY2FtLmZyYW1lVyAqIDM7XHJcbiAgZmJUZXh0dXJlSGVpZ2h0ID0gY2FtLmZyYW1lSCAqIDM7XHJcbiAgZmJUZXh0dXJlID0gZ2wuY3JlYXRlVGV4dHVyZSgpO1xyXG4gIGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIGZiVGV4dHVyZSk7XHJcbiAgZ2wudGV4SW1hZ2UyRChcclxuICAgIGdsLlRFWFRVUkVfMkQsXHJcbiAgICAwLCAvLyBtaXAgbGV2ZWxcclxuICAgIGdsLlJHQkEsIC8vIGludGVybmFsIGZvcm1hdFxyXG4gICAgZmJUZXh0dXJlV2lkdGgsIC8vIHdpZHRoXHJcbiAgICBmYlRleHR1cmVIZWlnaHQsIC8vIGhlaWdodFxyXG4gICAgMCwgLy8gYm9yZGVyXHJcbiAgICBnbC5SR0JBLCAvLyBmb3JtYXRcclxuICAgIGdsLlVOU0lHTkVEX0JZVEUsIC8vIHR5cGVcclxuICAgIG51bGwgLy8gZGF0YVxyXG4gICk7XHJcbiAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX01JTl9GSUxURVIsIGdsLkxJTkVBUik7XHJcblxyXG4gIGRlcHRoUkIgPSBnbC5jcmVhdGVSZW5kZXJidWZmZXIoKTtcclxuICBnbC5iaW5kUmVuZGVyYnVmZmVyKGdsLlJFTkRFUkJVRkZFUiwgZGVwdGhSQik7XHJcbiAgZ2wucmVuZGVyYnVmZmVyU3RvcmFnZShcclxuICAgIGdsLlJFTkRFUkJVRkZFUixcclxuICAgIGdsLkRFUFRIX0NPTVBPTkVOVDE2LCAvLyBmb3JtYXRcclxuICAgIGZiVGV4dHVyZVdpZHRoLCAvLyB3aWR0aCxcclxuICAgIGZiVGV4dHVyZUhlaWdodCAvLyBoZWlnaHQsXHJcbiAgKTtcclxuXHJcbiAgZmIgPSBnbC5jcmVhdGVGcmFtZWJ1ZmZlcigpO1xyXG4gIGdsLmJpbmRGcmFtZWJ1ZmZlcihnbC5GUkFNRUJVRkZFUiwgZmIpO1xyXG4gIGdsLmZyYW1lYnVmZmVyVGV4dHVyZTJEKFxyXG4gICAgZ2wuRlJBTUVCVUZGRVIsXHJcbiAgICBnbC5DT0xPUl9BVFRBQ0hNRU5UMCxcclxuICAgIGdsLlRFWFRVUkVfMkQsXHJcbiAgICBmYlRleHR1cmUsXHJcbiAgICAwXHJcbiAgKTtcclxuICBnbC5mcmFtZWJ1ZmZlclJlbmRlcmJ1ZmZlcihcclxuICAgIGdsLkZSQU1FQlVGRkVSLFxyXG4gICAgZ2wuREVQVEhfQVRUQUNITUVOVCxcclxuICAgIGdsLlJFTkRFUkJVRkZFUixcclxuICAgIGRlcHRoUkJcclxuICApO1xyXG5cclxuICBnbC5iaW5kVmVydGV4QXJyYXkobnVsbCk7IC8qIGFhYSAqL1xyXG4gIGdsLmJpbmRGcmFtZWJ1ZmZlcihnbC5GUkFNRUJVRkZFUiwgbnVsbCk7XHJcbiAgZ2wuYmluZFJlbmRlcmJ1ZmZlcihnbC5SRU5ERVJCVUZGRVIsIG51bGwpO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiB1bml0RnJhY3RhbFNreUFkZCgpIHtcclxuICB1bml0QWRkKGluaXQsIHJlbmRlciwgXCJGcmFjdGFsIHNreVwiKTtcclxufVxyXG4iLCJpbXBvcnQgeyB1bml0QWRkIH0gZnJvbSBcIi4vdW5pdHMuanNcIjtcclxuaW1wb3J0IHsgdmVjMyB9IGZyb20gXCIuLi91dGlscy9tdGguanNcIjtcclxuaW1wb3J0IHsgY2FtIH0gZnJvbSBcIi4uL3V0aWxzL2NvbnRyb2xzLmpzXCI7XHJcblxyXG5mdW5jdGlvbiByZW5kZXIoKSB7XHJcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJpbmZvQnV0dG9uXCIpLm9uY2xpY2sgPSAoKSA9PiB7XHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImluZm9cIikuc3R5bGUudmlzaWJpbGl0eSA9XHJcbiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiaW5mb1wiKS5zdHlsZS52aXNpYmlsaXR5ID09IFwidmlzaWJsZVwiXHJcbiAgICAgICAgPyBcImhpZGRlblwiXHJcbiAgICAgICAgOiBcInZpc2libGVcIjtcclxuICB9O1xyXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiaW5mb1wiKS5zdHlsZS5jb2xvciA9IFwiYmxhY2tcIjtcclxuXHJcbiAgbGV0IG5vcnRoID0gbmV3IHZlYzMoMCwgMCwgLTEpO1xyXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY29tcGFzc0JveFwiKS5zdHlsZS5iYWNrZ3JvdW5kUG9zaXRpb24gPVxyXG4gICAgKG5vcnRoLmFuZ2xlKG5ldyB2ZWMzKGNhbS5kaXIueCwgMCwgY2FtLmRpci56KSkgKiAxODAwKSAvIE1hdGguUEkgK1xyXG4gICAgNDAwICtcclxuICAgIFwicHggMHB4XCI7XHJcbn1cclxuXHJcbmFzeW5jIGZ1bmN0aW9uIGluaXQoKSB7fVxyXG5leHBvcnQgZnVuY3Rpb24gdW5pdEludGVyZmFjZUFkZCgpIHtcclxuICB1bml0QWRkKGluaXQsIHJlbmRlciwgXCJJbnRlcmZhY2VcIik7XHJcbn1cclxuIiwiaW1wb3J0IHsgdW5pdEFkZCB9IGZyb20gXCIuL3VuaXRzLmpzXCI7XHJcbmltcG9ydCB7IGNsb3RoIH0gZnJvbSBcIi4uL3V0aWxzL2Nsb3RoLmpzXCI7XHJcbmltcG9ydCB7IGtleXMgfSBmcm9tIFwiLi4vdXRpbHMvY29udHJvbHMuanNcIjtcclxuaW1wb3J0IHsgdmVjMyB9IGZyb20gXCIuLi91dGlscy9tdGguanNcIjtcclxuaW1wb3J0IHsgY2FtIH0gZnJvbSBcIi4uL3V0aWxzL2NvbnRyb2xzLmpzXCI7XHJcbmltcG9ydCB7IG1hcmtlckRyYXcgfSBmcm9tIFwiLi4vdXRpbHMvbWFya2Vycy5qc1wiO1xyXG5cclxuY29uc3QgZmxhZyA9IG5ldyBjbG90aCgpO1xyXG5mdW5jdGlvbiBoYW5kbGVIYXJkQ29uc3RyYWludHMoc29tZUNsb3RoKSB7XHJcbiAgc29tZUNsb3RoLnBbMF0gPSBjYW0udXNlckxvYy5hZGQobmV3IHZlYzMoMCwgMSwgMCkpLnN1YihjYW0udXNlckRpci5tdWwoMC41KSk7XHJcbiAgc29tZUNsb3RoLnBbOV0gPSBjYW0udXNlckxvYy5hZGQobmV3IHZlYzMoMCwgMS44LCAwKSkuc3ViKGNhbS51c2VyRGlyKTtcclxufVxyXG5mdW5jdGlvbiByZW5kZXIoKSB7XHJcbiAgaWYgKCFrZXlzW1wiU3BhY2VcIl0pIGZsYWcudXBkYXRlKDEwKTtcclxuICBmbGFnLndpbmQgPSBuZXcgdmVjMygwLjAwMDA2ICogTWF0aC5zaW4oRGF0ZS5ub3coKSksIDAsIDApO1xyXG4gIGZsYWcuZHJhdygpO1xyXG4gIG1hcmtlckRyYXcoXHJcbiAgICBjYW0udXNlckxvYyxcclxuICAgIGNhbS51c2VyTG9jLmFkZChuZXcgdmVjMygwLCAxLjgsIDApKS5zdWIoY2FtLnVzZXJEaXIpLFxyXG4gICAgMC4xXHJcbiAgKTtcclxufVxyXG5cclxuYXN5bmMgZnVuY3Rpb24gaW5pdCgpIHtcclxuICBmbGFnLmNyZWF0ZURlZmF1bHQoMTAsIDEwLCAwLjAwMDAxLCAwLjA4LCAwLjk4LCAwLjkpO1xyXG4gIGZsYWcuaGFuZGxlSGFyZENvbnN0cmFpbnRzID0gaGFuZGxlSGFyZENvbnN0cmFpbnRzO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdW5pdENsb3RoQWRkKCkge1xyXG4gIHVuaXRBZGQoaW5pdCwgcmVuZGVyLCBcImNsb3RoXCIpO1xyXG59XHJcbiIsImltcG9ydCB7IHZlYzIsIHZlYzMgLyp2ZWM0LCBtYXRyNCAqLyB9IGZyb20gXCIuLi91dGlscy9tdGguanNcIjtcclxuaW1wb3J0IHsgaXNQYXVzZSB9IGZyb20gXCIuLi91dGlscy9jb250cm9scy5qc1wiO1xyXG5pbXBvcnQgeyBtYXJrZXJEcmF3IH0gZnJvbSBcIi4uL3V0aWxzL21hcmtlcnMuanNcIjtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRQb2ludFNwaGVyZVBlbmV0cmF0aW9uUG9pbnRzKHBvaW50LCBjLCByKSB7XHJcbiAgaWYgKHBvaW50LnN1YihjKS5sZW4yKCkgPiByICogcikgcmV0dXJuIG51bGw7XHJcbiAgcmV0dXJuIGMuYWRkKHBvaW50LnN1YihjKS5tdWwociAvIHBvaW50LnN1YihjKS5sZW4oKSkpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0UG9pbnRDaXJjbGVQZW5ldHJhdGlvblBvaW50cyhwb2ludCwgYywgcikge1xyXG4gIGlmIChcclxuICAgIG5ldyB2ZWMyKHBvaW50LlgsIHBvaW50LlopLnN1YihuZXcgdmVjMihjLlgsIGMuWikpLmxlbjIoKSA+IHIgKiByIHx8XHJcbiAgICBwb2ludC5ZID4gYy5ZIHx8XHJcbiAgICBwb2ludC5ZIDwgYy5ZIC0gMVxyXG4gIClcclxuICAgIHJldHVybiBudWxsO1xyXG5cclxuICByZXR1cm4gbmV3IHZlYzMocG9pbnQuWCwgYy5ZLCBwb2ludC5aKTtcclxufVxyXG5cclxubGV0IGRlbHRhVGltZSA9IDEwO1xyXG5cclxuZXhwb3J0IGNsYXNzIGNsb3RoIHtcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMudyA9IDA7XHJcbiAgICB0aGlzLmggPSAwO1xyXG4gICAgdGhpcy5zaXplID0gMC4xO1xyXG4gICAgdGhpcy5udW1PZkNvbnN0cmFpbnRzID0gMDtcclxuICAgIHRoaXMuY29uc3RyYWludHMgPSBbXTtcclxuICAgIHRoaXMucCA9IFtdO1xyXG4gICAgdGhpcy5vbGRQID0gW107XHJcbiAgICB0aGlzLmZvcmNlcyA9IFtdO1xyXG4gICAgdGhpcy53aW5kID0gbmV3IHZlYzMoMCwgMCwgMCk7XHJcbiAgICB0aGlzLndlaWdodCA9IDA7XHJcbiAgICB0aGlzLmZyaWN0aW9uID0gMDtcclxuICAgIHRoaXMuc3RpZmZuZXNzID0gMDtcclxuICAgIHRoaXMuaGFuZGxlQ29sbGlzaW9ucyA9IG51bGw7XHJcbiAgICB0aGlzLmhhbmRsZUhhcmRDb25zdHJhaW50cyA9IG51bGw7XHJcbiAgICB0aGlzLm51bUl0ZXJhdGlvbnMgPSAxO1xyXG4gIH1cclxuXHJcbiAgY3JlYXRlRGVmYXVsdChcclxuICAgIHdpZHRoID0gMTAsXHJcbiAgICBoZWlnaHQgPSAxMCxcclxuICAgIHdlaWdodCA9IDAuMDEsXHJcbiAgICBzaXplID0gMSxcclxuICAgIGZyaWN0aW9uID0gMC45OSxcclxuICAgIHN0aWZmbmVzcyA9IDAuOTlcclxuICApIHtcclxuICAgIHRoaXMudyA9IHdpZHRoO1xyXG4gICAgdGhpcy5oID0gaGVpZ2h0O1xyXG4gICAgdGhpcy53ZWlnaHQgPSB3ZWlnaHQ7XHJcbiAgICB0aGlzLmZyaWN0aW9uID0gZnJpY3Rpb247XHJcbiAgICB0aGlzLnN0aWZmbmVzcyA9IHN0aWZmbmVzcztcclxuICAgIHRoaXMuc2l6ZSA9IHNpemU7XHJcbiAgICAvLyBjbG90aCBjb25zdHJhaW50c1xyXG4gICAgbGV0IHAgPSAwO1xyXG4gICAgZm9yIChsZXQgeSA9IDA7IHkgPCBoZWlnaHQ7IHkrKykge1xyXG4gICAgICBmb3IgKGxldCB4ID0gMDsgeCA8IHdpZHRoOyB4KyspIHtcclxuICAgICAgICBpZiAoeCA8IHdpZHRoIC0gMSkge1xyXG4gICAgICAgICAgdGhpcy5jb25zdHJhaW50c1twXSA9IHtcclxuICAgICAgICAgICAgcGFydGljbGVBOiB5ICogd2lkdGggKyB4LFxyXG4gICAgICAgICAgICBwYXJ0aWNsZUI6IHkgKiB3aWR0aCArICh4ICsgMSksXHJcbiAgICAgICAgICAgIHJlc3RMZW5ndGg6IHNpemUsXHJcbiAgICAgICAgICAgIGRhbXBlcjogMCxcclxuICAgICAgICAgICAgc3RyZXRjaDogbmV3IHZlYzMoKSxcclxuICAgICAgICAgIH07XHJcbiAgICAgICAgICBwKys7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh5IDwgaGVpZ2h0IC0gMSkge1xyXG4gICAgICAgICAgdGhpcy5jb25zdHJhaW50c1twXSA9IHtcclxuICAgICAgICAgICAgcGFydGljbGVBOiB5ICogd2lkdGggKyB4LFxyXG4gICAgICAgICAgICBwYXJ0aWNsZUI6ICh5ICsgMSkgKiB3aWR0aCArIHgsXHJcbiAgICAgICAgICAgIHJlc3RMZW5ndGg6IHNpemUsXHJcbiAgICAgICAgICAgIGRhbXBlcjogMCxcclxuICAgICAgICAgICAgc3RyZXRjaDogbmV3IHZlYzMoKSxcclxuICAgICAgICAgIH07XHJcbiAgICAgICAgICBwKys7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICB0aGlzLm51bU9mQ29uc3RyYWludHMgPSBwO1xyXG5cclxuICAgIC8vIGNsb3RoIHBhcnRpY2xlIHBvc2l0aW9uc1xyXG4gICAgZm9yIChsZXQgeSA9IDA7IHkgPCBoZWlnaHQ7IHkrKykge1xyXG4gICAgICBmb3IgKGxldCB4ID0gMDsgeCA8IHdpZHRoOyB4KyspIHtcclxuICAgICAgICBjb25zdCBwb3MgPSBuZXcgdmVjMyh4ICogc2l6ZSwgMCwgeSAqIHNpemUpO1xyXG4gICAgICAgIHRoaXMucFt5ICogd2lkdGggKyB4XSA9IHBvcztcclxuICAgICAgICB0aGlzLm9sZFBbeSAqIHdpZHRoICsgeF0gPSBwb3MuY29weSgpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBhY2N1bXVsYXRlRm9yY2VzKCkge1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLncgKiB0aGlzLmg7IGkrKykge1xyXG4gICAgICB0aGlzLmZvcmNlc1tpXSA9IHRoaXMud2luZC5hZGQobmV3IHZlYzMoMCwgLXRoaXMud2VpZ2h0LCAwKSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICB2ZXJsZXRTdGVwKCkge1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLncgKiB0aGlzLmg7IGkrKykge1xyXG4gICAgICBjb25zdCBvbGRQb3MgPSB0aGlzLnBbaV0uY29weSgpO1xyXG4gICAgICBjb25zdCBuZXdQb3MgPSB0aGlzLnBbaV1cclxuICAgICAgICAuYWRkKHRoaXMucFtpXS5zdWIodGhpcy5vbGRQW2ldKS5tdWwodGhpcy5mcmljdGlvbikpXHJcbiAgICAgICAgLmFkZCh0aGlzLmZvcmNlc1tpXS5tdWwoZGVsdGFUaW1lKSk7XHJcbiAgICAgIHRoaXMucFtpXSA9IG5ld1BvcztcclxuICAgICAgdGhpcy5vbGRQW2ldID0gb2xkUG9zO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc2F0aXNmeUNvbnN0cmFpbnRzKCkge1xyXG4gICAgZm9yIChsZXQgaXRlcmF0aW9uID0gMDsgaXRlcmF0aW9uIDwgdGhpcy5udW1JdGVyYXRpb25zOyBpdGVyYXRpb24rKykge1xyXG4gICAgICBpZiAodGhpcy5oYW5kbGVDb2xsaXNpb25zICE9PSBudWxsKSB7XHJcbiAgICAgICAgdGhpcy5oYW5kbGVDb2xsaXNpb25zKHRoaXMpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubnVtT2ZDb25zdHJhaW50czsgaSsrKSB7XHJcbiAgICAgICAgY29uc3QgY29uc3RyYWludCA9IHRoaXMuY29uc3RyYWludHNbaV07XHJcbiAgICAgICAgbGV0IGRlbHRhID0gdGhpcy5wW2NvbnN0cmFpbnQucGFydGljbGVCXS5zdWIoXHJcbiAgICAgICAgICB0aGlzLnBbY29uc3RyYWludC5wYXJ0aWNsZUFdXHJcbiAgICAgICAgKTtcclxuICAgICAgICBkZWx0YSA9IGRlbHRhLm11bChcclxuICAgICAgICAgICh0aGlzLnN0aWZmbmVzcyAqIGNvbnN0cmFpbnQucmVzdExlbmd0aCkgL1xyXG4gICAgICAgICAgICAoZGVsdGEubGVuKCkgKyBjb25zdHJhaW50LnJlc3RMZW5ndGgpIC1cclxuICAgICAgICAgICAgMC41XHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgdGhpcy5wW2NvbnN0cmFpbnQucGFydGljbGVBXSA9IHRoaXMucFtjb25zdHJhaW50LnBhcnRpY2xlQV0uc3ViKGRlbHRhKTtcclxuXHJcbiAgICAgICAgdGhpcy5wW2NvbnN0cmFpbnQucGFydGljbGVCXSA9IHRoaXMucFtjb25zdHJhaW50LnBhcnRpY2xlQl0uYWRkKGRlbHRhKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGlzLmhhbmRsZUhhcmRDb25zdHJhaW50cyAhPT0gbnVsbCkge1xyXG4gICAgICB0aGlzLmhhbmRsZUhhcmRDb25zdHJhaW50cyh0aGlzKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHVwZGF0ZShzcGVlZCA9IDEpIHtcclxuICAgIGlmICghaXNQYXVzZSkge1xyXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNwZWVkOyBpKyspIHtcclxuICAgICAgICB0aGlzLnNhdGlzZnlDb25zdHJhaW50cygpO1xyXG4gICAgICAgIHRoaXMuYWNjdW11bGF0ZUZvcmNlcygpO1xyXG4gICAgICAgIHRoaXMudmVybGV0U3RlcCgpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBkcmF3KCkge1xyXG4gICAgZm9yIChsZXQgeSA9IDA7IHkgPCB0aGlzLmg7IHkrKykge1xyXG4gICAgICBmb3IgKGxldCB4ID0gMDsgeCA8IHRoaXMudzsgeCsrKSB7XHJcbiAgICAgICAgbWFya2VyRHJhdyhcclxuICAgICAgICAgIHRoaXMucFt0aGlzLmNvbnN0cmFpbnRzW3kgKiB0aGlzLncgKyB4XS5wYXJ0aWNsZUFdLFxyXG4gICAgICAgICAgdGhpcy5wW3RoaXMuY29uc3RyYWludHNbeSAqIHRoaXMudyArIHhdLnBhcnRpY2xlQl0sXHJcbiAgICAgICAgICB0aGlzLnNpemUgLyAzXHJcbiAgICAgICAgKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZvciAobGV0IHkgPSAwOyB5IDwgdGhpcy5oIC0gMTsgeSsrKSB7XHJcbiAgICAgIGZvciAobGV0IHggPSAwOyB4IDwgdGhpcy53OyB4KyspIHtcclxuICAgICAgICBjb25zdCBjb25zdHJhaW50ID1cclxuICAgICAgICAgIHRoaXMuY29uc3RyYWludHNbdGhpcy5oICogKHRoaXMudyAtIDEpICsgeSAqIHRoaXMudyArIHhdO1xyXG4gICAgICAgIC8qY29uc3Qgc3RyZXRjaCA9IGNvbnN0cmFpbnQuc3RyZXRjaDtcclxuICAgICAgICAgICAgICAgY29uc3QgY29sb3IgPSBuZXcgdmVjNChcclxuICAgICAgICAgIDEgLSBzdHJldGNoWzBdICogODAsXHJcbiAgICAgICAgICAxIC0gc3RyZXRjaFsxXSAqIDgwLFxyXG4gICAgICAgICAgMSAtIHN0cmV0Y2hbMl0gKiA4MCxcclxuICAgICAgICAgIDFcclxuICAgICAgICApO1xyXG4qL1xyXG4gICAgICAgIG1hcmtlckRyYXcoXHJcbiAgICAgICAgICB0aGlzLnBbY29uc3RyYWludC5wYXJ0aWNsZUFdLFxyXG4gICAgICAgICAgdGhpcy5wW2NvbnN0cmFpbnQucGFydGljbGVCXSxcclxuICAgICAgICAgIHRoaXMuc2l6ZSAvIDNcclxuICAgICAgICApO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IHVuaXRDdWJlQWRkIH0gZnJvbSBcIi4vdW5pdEN1YmUuanNcIjtcclxuaW1wb3J0IHsgdW5pdFRldHJBZGQgfSBmcm9tIFwiLi91bml0VGV0cmFoZWRyb24uanNcIjtcclxuaW1wb3J0IHsgdW5pdE9jdGFBZGQgfSBmcm9tIFwiLi91bml0T2N0YWhlZHJvbi5qc1wiO1xyXG5pbXBvcnQgeyB1bml0SWNvQWRkIH0gZnJvbSBcIi4vdW5pdEljb3NhaGVkcm9uLmpzXCI7XHJcbmltcG9ydCB7IHVuaXRNcmtBZGQgfSBmcm9tIFwiLi4vdXRpbHMvbWFya2Vycy5qc1wiO1xyXG5pbXBvcnQgeyB1bml0RGJnQWRkIH0gZnJvbSBcIi4vdW5pdERiZy5qc1wiO1xyXG5pbXBvcnQgeyB1bml0TWFya2Vyc0FkZCB9IGZyb20gXCIuL3VuaXRtYXJrZXIuanNcIjtcclxuaW1wb3J0IHsgdW5pdE9iakFkZCB9IGZyb20gXCIuL3VuaXRPYmouanNcIjtcclxuaW1wb3J0IHsgdW5pdFBsYW5lQWRkIH0gZnJvbSBcIi4vdW5pdFBsYW5lLmpzXCI7XHJcbmltcG9ydCB7IHVuaXREb2RlQWRkIH0gZnJvbSBcIi4vdW5pdERvZGVjYWhlZHJvbi5qc1wiO1xyXG5pbXBvcnQgeyB1bml0Q293QWRkIH0gZnJvbSBcIi4vdW5pdENvdy5qc1wiO1xyXG5pbXBvcnQgeyB1bml0QmlrZUFkZCB9IGZyb20gXCIuL3VuaXRCaWtlLmpzXCI7XHJcbmltcG9ydCB7IHVuaXRNYXBBZGQgfSBmcm9tIFwiLi91bml0TWFwLmpzXCI7XHJcbmltcG9ydCB7IHVuaXRGcmFjdGFsU2t5QWRkIH0gZnJvbSBcIi4vdW5pdEZyYWN0YWxTa3kuanNcIjtcclxuaW1wb3J0IHsgdW5pdEludGVyZmFjZUFkZCB9IGZyb20gXCIuL3VuaXRJbnRlcmZhY2UuanNcIjtcclxuaW1wb3J0IHsgdW5pdENsb3RoQWRkIH0gZnJvbSBcIi4vdW5pdENsb3RoLmpzXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgdW5pdCB7XHJcbiAgY29uc3RydWN0b3IoaW5pdCwgcmVuZGVyLCBuYW1lKSB7XHJcbiAgICB0aGlzLmluaXQgPSBpbml0O1xyXG4gICAgdGhpcy5yZW5kZXIgPSByZW5kZXI7XHJcbiAgICB0aGlzLmlzVG9SZW5kZXIgPSB0cnVlO1xyXG4gICAgdGhpcy5uYW1lID0gbmFtZTtcclxuICB9XHJcbn1cclxubGV0IHVuaXRzID0gW107XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaW5pdCgpIHtcclxuICB1bml0RnJhY3RhbFNreUFkZCgpO1xyXG4gIHVuaXRNcmtBZGQoKTtcclxuICB1bml0SW50ZXJmYWNlQWRkKCk7XHJcbiAgdW5pdE9iakFkZCgpO1xyXG5cclxuICB1bml0UGxhbmVBZGQoKTtcclxuICB1bml0SWNvQWRkKCk7XHJcbiAgdW5pdEN1YmVBZGQoKTtcclxuICB1bml0VGV0ckFkZCgpO1xyXG4gIHVuaXRPY3RhQWRkKCk7XHJcbiAgdW5pdERvZGVBZGQoKTtcclxuICB1bml0RGJnQWRkKCk7XHJcbiAgdW5pdENvd0FkZCgpO1xyXG5cclxuICB1bml0TWFya2Vyc0FkZCgpO1xyXG4gIHVuaXRNYXBBZGQoKTtcclxuICB1bml0QmlrZUFkZCgpO1xyXG5cclxuICB1bml0Q2xvdGhBZGQoKTtcclxuXHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB1bml0cy5sZW5ndGg7IGkrKykge1xyXG4gICAgYXdhaXQgdW5pdHNbaV0uaW5pdCgpO1xyXG4gIH1cclxuICBmb3IgKGxldCBpID0gMDsgaSA8IHVuaXRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICBsZXQgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XHJcbiAgICBpbnB1dC50eXBlID0gXCJjaGVja2JveFwiO1xyXG4gICAgbGV0IGlkID0gXCJ1bml0XCIgKyBpO1xyXG4gICAgaW5wdXQuaWQgPSBpZDtcclxuICAgIGxldCBsYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiKTtcclxuICAgIGxhYmVsLmFwcGVuZENoaWxkKGlucHV0KTtcclxuICAgIGxhYmVsLmlubmVySFRNTCArPSB1bml0c1tpXS5uYW1lO1xyXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ1bml0c0NoZWNrZXJcIikuYXBwZW5kQ2hpbGQobGFiZWwpO1xyXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ1bml0c0NoZWNrZXJcIikuaW5uZXJIVE1MICs9IFwiPGJyIC8+XCI7XHJcbiAgfVxyXG4gIHVuaXRzLmZvckVhY2goKHVuaXQsIGluZGV4KSA9PiB7XHJcbiAgICBzd2l0Y2ggKHVuaXQubmFtZSkge1xyXG4gICAgICBjYXNlIFwiUGxhbmVcIjpcclxuICAgICAgICBicmVhaztcclxuICAgICAgZGVmYXVsdDpcclxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInVuaXRcIiArIGluZGV4KS5jaGVja2VkID0gdHJ1ZTtcclxuICAgIH1cclxuICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJlbmRlcigpIHtcclxuICB1bml0cy5mb3JFYWNoKCh1bml0LCBpbmRleCkgPT4ge1xyXG4gICAgaWYgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidW5pdFwiICsgaW5kZXgpLmNoZWNrZWQpIHVuaXQucmVuZGVyKCk7XHJcbiAgfSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB1bml0QWRkKGluaXQsIHJlbmRlciwgbmFtZSkge1xyXG4gIHVuaXRzLnB1c2gobmV3IHVuaXQoaW5pdCwgcmVuZGVyLCBuYW1lKSk7XHJcbn1cclxuIiwiY29uc3QgUEFDS0VUX1RZUEVTID0gT2JqZWN0LmNyZWF0ZShudWxsKTsgLy8gbm8gTWFwID0gbm8gcG9seWZpbGxcblBBQ0tFVF9UWVBFU1tcIm9wZW5cIl0gPSBcIjBcIjtcblBBQ0tFVF9UWVBFU1tcImNsb3NlXCJdID0gXCIxXCI7XG5QQUNLRVRfVFlQRVNbXCJwaW5nXCJdID0gXCIyXCI7XG5QQUNLRVRfVFlQRVNbXCJwb25nXCJdID0gXCIzXCI7XG5QQUNLRVRfVFlQRVNbXCJtZXNzYWdlXCJdID0gXCI0XCI7XG5QQUNLRVRfVFlQRVNbXCJ1cGdyYWRlXCJdID0gXCI1XCI7XG5QQUNLRVRfVFlQRVNbXCJub29wXCJdID0gXCI2XCI7XG5jb25zdCBQQUNLRVRfVFlQRVNfUkVWRVJTRSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5PYmplY3Qua2V5cyhQQUNLRVRfVFlQRVMpLmZvckVhY2goa2V5ID0+IHtcbiAgICBQQUNLRVRfVFlQRVNfUkVWRVJTRVtQQUNLRVRfVFlQRVNba2V5XV0gPSBrZXk7XG59KTtcbmNvbnN0IEVSUk9SX1BBQ0tFVCA9IHsgdHlwZTogXCJlcnJvclwiLCBkYXRhOiBcInBhcnNlciBlcnJvclwiIH07XG5leHBvcnQgeyBQQUNLRVRfVFlQRVMsIFBBQ0tFVF9UWVBFU19SRVZFUlNFLCBFUlJPUl9QQUNLRVQgfTtcbiIsImltcG9ydCB7IFBBQ0tFVF9UWVBFUyB9IGZyb20gXCIuL2NvbW1vbnMuanNcIjtcbmNvbnN0IHdpdGhOYXRpdmVCbG9iID0gdHlwZW9mIEJsb2IgPT09IFwiZnVuY3Rpb25cIiB8fFxuICAgICh0eXBlb2YgQmxvYiAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgICAgICBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoQmxvYikgPT09IFwiW29iamVjdCBCbG9iQ29uc3RydWN0b3JdXCIpO1xuY29uc3Qgd2l0aE5hdGl2ZUFycmF5QnVmZmVyID0gdHlwZW9mIEFycmF5QnVmZmVyID09PSBcImZ1bmN0aW9uXCI7XG4vLyBBcnJheUJ1ZmZlci5pc1ZpZXcgbWV0aG9kIGlzIG5vdCBkZWZpbmVkIGluIElFMTBcbmNvbnN0IGlzVmlldyA9IG9iaiA9PiB7XG4gICAgcmV0dXJuIHR5cGVvZiBBcnJheUJ1ZmZlci5pc1ZpZXcgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICA/IEFycmF5QnVmZmVyLmlzVmlldyhvYmopXG4gICAgICAgIDogb2JqICYmIG9iai5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcjtcbn07XG5jb25zdCBlbmNvZGVQYWNrZXQgPSAoeyB0eXBlLCBkYXRhIH0sIHN1cHBvcnRzQmluYXJ5LCBjYWxsYmFjaykgPT4ge1xuICAgIGlmICh3aXRoTmF0aXZlQmxvYiAmJiBkYXRhIGluc3RhbmNlb2YgQmxvYikge1xuICAgICAgICBpZiAoc3VwcG9ydHNCaW5hcnkpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBlbmNvZGVCbG9iQXNCYXNlNjQoZGF0YSwgY2FsbGJhY2spO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKHdpdGhOYXRpdmVBcnJheUJ1ZmZlciAmJlxuICAgICAgICAoZGF0YSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyIHx8IGlzVmlldyhkYXRhKSkpIHtcbiAgICAgICAgaWYgKHN1cHBvcnRzQmluYXJ5KSB7XG4gICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZW5jb2RlQmxvYkFzQmFzZTY0KG5ldyBCbG9iKFtkYXRhXSksIGNhbGxiYWNrKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBwbGFpbiBzdHJpbmdcbiAgICByZXR1cm4gY2FsbGJhY2soUEFDS0VUX1RZUEVTW3R5cGVdICsgKGRhdGEgfHwgXCJcIikpO1xufTtcbmNvbnN0IGVuY29kZUJsb2JBc0Jhc2U2NCA9IChkYXRhLCBjYWxsYmFjaykgPT4ge1xuICAgIGNvbnN0IGZpbGVSZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuICAgIGZpbGVSZWFkZXIub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBjb25zdCBjb250ZW50ID0gZmlsZVJlYWRlci5yZXN1bHQuc3BsaXQoXCIsXCIpWzFdO1xuICAgICAgICBjYWxsYmFjayhcImJcIiArIChjb250ZW50IHx8IFwiXCIpKTtcbiAgICB9O1xuICAgIHJldHVybiBmaWxlUmVhZGVyLnJlYWRBc0RhdGFVUkwoZGF0YSk7XG59O1xuZXhwb3J0IGRlZmF1bHQgZW5jb2RlUGFja2V0O1xuIiwiLy8gaW1wb3J0ZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vc29ja2V0aW8vYmFzZTY0LWFycmF5YnVmZmVyXG5jb25zdCBjaGFycyA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvJztcbi8vIFVzZSBhIGxvb2t1cCB0YWJsZSB0byBmaW5kIHRoZSBpbmRleC5cbmNvbnN0IGxvb2t1cCA9IHR5cGVvZiBVaW50OEFycmF5ID09PSAndW5kZWZpbmVkJyA/IFtdIDogbmV3IFVpbnQ4QXJyYXkoMjU2KTtcbmZvciAobGV0IGkgPSAwOyBpIDwgY2hhcnMubGVuZ3RoOyBpKyspIHtcbiAgICBsb29rdXBbY2hhcnMuY2hhckNvZGVBdChpKV0gPSBpO1xufVxuZXhwb3J0IGNvbnN0IGVuY29kZSA9IChhcnJheWJ1ZmZlcikgPT4ge1xuICAgIGxldCBieXRlcyA9IG5ldyBVaW50OEFycmF5KGFycmF5YnVmZmVyKSwgaSwgbGVuID0gYnl0ZXMubGVuZ3RoLCBiYXNlNjQgPSAnJztcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDMpIHtcbiAgICAgICAgYmFzZTY0ICs9IGNoYXJzW2J5dGVzW2ldID4+IDJdO1xuICAgICAgICBiYXNlNjQgKz0gY2hhcnNbKChieXRlc1tpXSAmIDMpIDw8IDQpIHwgKGJ5dGVzW2kgKyAxXSA+PiA0KV07XG4gICAgICAgIGJhc2U2NCArPSBjaGFyc1soKGJ5dGVzW2kgKyAxXSAmIDE1KSA8PCAyKSB8IChieXRlc1tpICsgMl0gPj4gNildO1xuICAgICAgICBiYXNlNjQgKz0gY2hhcnNbYnl0ZXNbaSArIDJdICYgNjNdO1xuICAgIH1cbiAgICBpZiAobGVuICUgMyA9PT0gMikge1xuICAgICAgICBiYXNlNjQgPSBiYXNlNjQuc3Vic3RyaW5nKDAsIGJhc2U2NC5sZW5ndGggLSAxKSArICc9JztcbiAgICB9XG4gICAgZWxzZSBpZiAobGVuICUgMyA9PT0gMSkge1xuICAgICAgICBiYXNlNjQgPSBiYXNlNjQuc3Vic3RyaW5nKDAsIGJhc2U2NC5sZW5ndGggLSAyKSArICc9PSc7XG4gICAgfVxuICAgIHJldHVybiBiYXNlNjQ7XG59O1xuZXhwb3J0IGNvbnN0IGRlY29kZSA9IChiYXNlNjQpID0+IHtcbiAgICBsZXQgYnVmZmVyTGVuZ3RoID0gYmFzZTY0Lmxlbmd0aCAqIDAuNzUsIGxlbiA9IGJhc2U2NC5sZW5ndGgsIGksIHAgPSAwLCBlbmNvZGVkMSwgZW5jb2RlZDIsIGVuY29kZWQzLCBlbmNvZGVkNDtcbiAgICBpZiAoYmFzZTY0W2Jhc2U2NC5sZW5ndGggLSAxXSA9PT0gJz0nKSB7XG4gICAgICAgIGJ1ZmZlckxlbmd0aC0tO1xuICAgICAgICBpZiAoYmFzZTY0W2Jhc2U2NC5sZW5ndGggLSAyXSA9PT0gJz0nKSB7XG4gICAgICAgICAgICBidWZmZXJMZW5ndGgtLTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBhcnJheWJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcihidWZmZXJMZW5ndGgpLCBieXRlcyA9IG5ldyBVaW50OEFycmF5KGFycmF5YnVmZmVyKTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICAgICAgZW5jb2RlZDEgPSBsb29rdXBbYmFzZTY0LmNoYXJDb2RlQXQoaSldO1xuICAgICAgICBlbmNvZGVkMiA9IGxvb2t1cFtiYXNlNjQuY2hhckNvZGVBdChpICsgMSldO1xuICAgICAgICBlbmNvZGVkMyA9IGxvb2t1cFtiYXNlNjQuY2hhckNvZGVBdChpICsgMildO1xuICAgICAgICBlbmNvZGVkNCA9IGxvb2t1cFtiYXNlNjQuY2hhckNvZGVBdChpICsgMyldO1xuICAgICAgICBieXRlc1twKytdID0gKGVuY29kZWQxIDw8IDIpIHwgKGVuY29kZWQyID4+IDQpO1xuICAgICAgICBieXRlc1twKytdID0gKChlbmNvZGVkMiAmIDE1KSA8PCA0KSB8IChlbmNvZGVkMyA+PiAyKTtcbiAgICAgICAgYnl0ZXNbcCsrXSA9ICgoZW5jb2RlZDMgJiAzKSA8PCA2KSB8IChlbmNvZGVkNCAmIDYzKTtcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5YnVmZmVyO1xufTtcbiIsImltcG9ydCB7IEVSUk9SX1BBQ0tFVCwgUEFDS0VUX1RZUEVTX1JFVkVSU0UgfSBmcm9tIFwiLi9jb21tb25zLmpzXCI7XG5pbXBvcnQgeyBkZWNvZGUgfSBmcm9tIFwiLi9jb250cmliL2Jhc2U2NC1hcnJheWJ1ZmZlci5qc1wiO1xuY29uc3Qgd2l0aE5hdGl2ZUFycmF5QnVmZmVyID0gdHlwZW9mIEFycmF5QnVmZmVyID09PSBcImZ1bmN0aW9uXCI7XG5jb25zdCBkZWNvZGVQYWNrZXQgPSAoZW5jb2RlZFBhY2tldCwgYmluYXJ5VHlwZSkgPT4ge1xuICAgIGlmICh0eXBlb2YgZW5jb2RlZFBhY2tldCAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogXCJtZXNzYWdlXCIsXG4gICAgICAgICAgICBkYXRhOiBtYXBCaW5hcnkoZW5jb2RlZFBhY2tldCwgYmluYXJ5VHlwZSlcbiAgICAgICAgfTtcbiAgICB9XG4gICAgY29uc3QgdHlwZSA9IGVuY29kZWRQYWNrZXQuY2hhckF0KDApO1xuICAgIGlmICh0eXBlID09PSBcImJcIikge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogXCJtZXNzYWdlXCIsXG4gICAgICAgICAgICBkYXRhOiBkZWNvZGVCYXNlNjRQYWNrZXQoZW5jb2RlZFBhY2tldC5zdWJzdHJpbmcoMSksIGJpbmFyeVR5cGUpXG4gICAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0IHBhY2tldFR5cGUgPSBQQUNLRVRfVFlQRVNfUkVWRVJTRVt0eXBlXTtcbiAgICBpZiAoIXBhY2tldFR5cGUpIHtcbiAgICAgICAgcmV0dXJuIEVSUk9SX1BBQ0tFVDtcbiAgICB9XG4gICAgcmV0dXJuIGVuY29kZWRQYWNrZXQubGVuZ3RoID4gMVxuICAgICAgICA/IHtcbiAgICAgICAgICAgIHR5cGU6IFBBQ0tFVF9UWVBFU19SRVZFUlNFW3R5cGVdLFxuICAgICAgICAgICAgZGF0YTogZW5jb2RlZFBhY2tldC5zdWJzdHJpbmcoMSlcbiAgICAgICAgfVxuICAgICAgICA6IHtcbiAgICAgICAgICAgIHR5cGU6IFBBQ0tFVF9UWVBFU19SRVZFUlNFW3R5cGVdXG4gICAgICAgIH07XG59O1xuY29uc3QgZGVjb2RlQmFzZTY0UGFja2V0ID0gKGRhdGEsIGJpbmFyeVR5cGUpID0+IHtcbiAgICBpZiAod2l0aE5hdGl2ZUFycmF5QnVmZmVyKSB7XG4gICAgICAgIGNvbnN0IGRlY29kZWQgPSBkZWNvZGUoZGF0YSk7XG4gICAgICAgIHJldHVybiBtYXBCaW5hcnkoZGVjb2RlZCwgYmluYXJ5VHlwZSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4geyBiYXNlNjQ6IHRydWUsIGRhdGEgfTsgLy8gZmFsbGJhY2sgZm9yIG9sZCBicm93c2Vyc1xuICAgIH1cbn07XG5jb25zdCBtYXBCaW5hcnkgPSAoZGF0YSwgYmluYXJ5VHlwZSkgPT4ge1xuICAgIHN3aXRjaCAoYmluYXJ5VHlwZSkge1xuICAgICAgICBjYXNlIFwiYmxvYlwiOlxuICAgICAgICAgICAgcmV0dXJuIGRhdGEgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlciA/IG5ldyBCbG9iKFtkYXRhXSkgOiBkYXRhO1xuICAgICAgICBjYXNlIFwiYXJyYXlidWZmZXJcIjpcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBkYXRhOyAvLyBhc3N1bWluZyB0aGUgZGF0YSBpcyBhbHJlYWR5IGFuIEFycmF5QnVmZmVyXG4gICAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IGRlY29kZVBhY2tldDtcbiIsImltcG9ydCBlbmNvZGVQYWNrZXQgZnJvbSBcIi4vZW5jb2RlUGFja2V0LmpzXCI7XG5pbXBvcnQgZGVjb2RlUGFja2V0IGZyb20gXCIuL2RlY29kZVBhY2tldC5qc1wiO1xuY29uc3QgU0VQQVJBVE9SID0gU3RyaW5nLmZyb21DaGFyQ29kZSgzMCk7IC8vIHNlZSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9EZWxpbWl0ZXIjQVNDSUlfZGVsaW1pdGVkX3RleHRcbmNvbnN0IGVuY29kZVBheWxvYWQgPSAocGFja2V0cywgY2FsbGJhY2spID0+IHtcbiAgICAvLyBzb21lIHBhY2tldHMgbWF5IGJlIGFkZGVkIHRvIHRoZSBhcnJheSB3aGlsZSBlbmNvZGluZywgc28gdGhlIGluaXRpYWwgbGVuZ3RoIG11c3QgYmUgc2F2ZWRcbiAgICBjb25zdCBsZW5ndGggPSBwYWNrZXRzLmxlbmd0aDtcbiAgICBjb25zdCBlbmNvZGVkUGFja2V0cyA9IG5ldyBBcnJheShsZW5ndGgpO1xuICAgIGxldCBjb3VudCA9IDA7XG4gICAgcGFja2V0cy5mb3JFYWNoKChwYWNrZXQsIGkpID0+IHtcbiAgICAgICAgLy8gZm9yY2UgYmFzZTY0IGVuY29kaW5nIGZvciBiaW5hcnkgcGFja2V0c1xuICAgICAgICBlbmNvZGVQYWNrZXQocGFja2V0LCBmYWxzZSwgZW5jb2RlZFBhY2tldCA9PiB7XG4gICAgICAgICAgICBlbmNvZGVkUGFja2V0c1tpXSA9IGVuY29kZWRQYWNrZXQ7XG4gICAgICAgICAgICBpZiAoKytjb3VudCA9PT0gbGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soZW5jb2RlZFBhY2tldHMuam9pbihTRVBBUkFUT1IpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG59O1xuY29uc3QgZGVjb2RlUGF5bG9hZCA9IChlbmNvZGVkUGF5bG9hZCwgYmluYXJ5VHlwZSkgPT4ge1xuICAgIGNvbnN0IGVuY29kZWRQYWNrZXRzID0gZW5jb2RlZFBheWxvYWQuc3BsaXQoU0VQQVJBVE9SKTtcbiAgICBjb25zdCBwYWNrZXRzID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlbmNvZGVkUGFja2V0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBkZWNvZGVkUGFja2V0ID0gZGVjb2RlUGFja2V0KGVuY29kZWRQYWNrZXRzW2ldLCBiaW5hcnlUeXBlKTtcbiAgICAgICAgcGFja2V0cy5wdXNoKGRlY29kZWRQYWNrZXQpO1xuICAgICAgICBpZiAoZGVjb2RlZFBhY2tldC50eXBlID09PSBcImVycm9yXCIpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBwYWNrZXRzO1xufTtcbmV4cG9ydCBjb25zdCBwcm90b2NvbCA9IDQ7XG5leHBvcnQgeyBlbmNvZGVQYWNrZXQsIGVuY29kZVBheWxvYWQsIGRlY29kZVBhY2tldCwgZGVjb2RlUGF5bG9hZCB9O1xuIiwiLyoqXG4gKiBJbml0aWFsaXplIGEgbmV3IGBFbWl0dGVyYC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBFbWl0dGVyKG9iaikge1xuICBpZiAob2JqKSByZXR1cm4gbWl4aW4ob2JqKTtcbn1cblxuLyoqXG4gKiBNaXhpbiB0aGUgZW1pdHRlciBwcm9wZXJ0aWVzLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIG1peGluKG9iaikge1xuICBmb3IgKHZhciBrZXkgaW4gRW1pdHRlci5wcm90b3R5cGUpIHtcbiAgICBvYmpba2V5XSA9IEVtaXR0ZXIucHJvdG90eXBlW2tleV07XG4gIH1cbiAgcmV0dXJuIG9iajtcbn1cblxuLyoqXG4gKiBMaXN0ZW4gb24gdGhlIGdpdmVuIGBldmVudGAgd2l0aCBgZm5gLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAqIEByZXR1cm4ge0VtaXR0ZXJ9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkVtaXR0ZXIucHJvdG90eXBlLm9uID1cbkVtaXR0ZXIucHJvdG90eXBlLmFkZEV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbihldmVudCwgZm4pe1xuICB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwge307XG4gICh0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdID0gdGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XSB8fCBbXSlcbiAgICAucHVzaChmbik7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBBZGRzIGFuIGBldmVudGAgbGlzdGVuZXIgdGhhdCB3aWxsIGJlIGludm9rZWQgYSBzaW5nbGVcbiAqIHRpbWUgdGhlbiBhdXRvbWF0aWNhbGx5IHJlbW92ZWQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICogQHJldHVybiB7RW1pdHRlcn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuRW1pdHRlci5wcm90b3R5cGUub25jZSA9IGZ1bmN0aW9uKGV2ZW50LCBmbil7XG4gIGZ1bmN0aW9uIG9uKCkge1xuICAgIHRoaXMub2ZmKGV2ZW50LCBvbik7XG4gICAgZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIG9uLmZuID0gZm47XG4gIHRoaXMub24oZXZlbnQsIG9uKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFJlbW92ZSB0aGUgZ2l2ZW4gY2FsbGJhY2sgZm9yIGBldmVudGAgb3IgYWxsXG4gKiByZWdpc3RlcmVkIGNhbGxiYWNrcy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKiBAcmV0dXJuIHtFbWl0dGVyfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5FbWl0dGVyLnByb3RvdHlwZS5vZmYgPVxuRW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXIgPVxuRW1pdHRlci5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzID1cbkVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbihldmVudCwgZm4pe1xuICB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwge307XG5cbiAgLy8gYWxsXG4gIGlmICgwID09IGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICB0aGlzLl9jYWxsYmFja3MgPSB7fTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8vIHNwZWNpZmljIGV2ZW50XG4gIHZhciBjYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdO1xuICBpZiAoIWNhbGxiYWNrcykgcmV0dXJuIHRoaXM7XG5cbiAgLy8gcmVtb3ZlIGFsbCBoYW5kbGVyc1xuICBpZiAoMSA9PSBhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgZGVsZXRlIHRoaXMuX2NhbGxiYWNrc1snJCcgKyBldmVudF07XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvLyByZW1vdmUgc3BlY2lmaWMgaGFuZGxlclxuICB2YXIgY2I7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY2FsbGJhY2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgY2IgPSBjYWxsYmFja3NbaV07XG4gICAgaWYgKGNiID09PSBmbiB8fCBjYi5mbiA9PT0gZm4pIHtcbiAgICAgIGNhbGxiYWNrcy5zcGxpY2UoaSwgMSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICAvLyBSZW1vdmUgZXZlbnQgc3BlY2lmaWMgYXJyYXlzIGZvciBldmVudCB0eXBlcyB0aGF0IG5vXG4gIC8vIG9uZSBpcyBzdWJzY3JpYmVkIGZvciB0byBhdm9pZCBtZW1vcnkgbGVhay5cbiAgaWYgKGNhbGxiYWNrcy5sZW5ndGggPT09IDApIHtcbiAgICBkZWxldGUgdGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBFbWl0IGBldmVudGAgd2l0aCB0aGUgZ2l2ZW4gYXJncy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcbiAqIEBwYXJhbSB7TWl4ZWR9IC4uLlxuICogQHJldHVybiB7RW1pdHRlcn1cbiAqL1xuXG5FbWl0dGVyLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24oZXZlbnQpe1xuICB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwge307XG5cbiAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpXG4gICAgLCBjYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdO1xuXG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gIH1cblxuICBpZiAoY2FsbGJhY2tzKSB7XG4gICAgY2FsbGJhY2tzID0gY2FsbGJhY2tzLnNsaWNlKDApO1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBjYWxsYmFja3MubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgIGNhbGxiYWNrc1tpXS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8vIGFsaWFzIHVzZWQgZm9yIHJlc2VydmVkIGV2ZW50cyAocHJvdGVjdGVkIG1ldGhvZClcbkVtaXR0ZXIucHJvdG90eXBlLmVtaXRSZXNlcnZlZCA9IEVtaXR0ZXIucHJvdG90eXBlLmVtaXQ7XG5cbi8qKlxuICogUmV0dXJuIGFycmF5IG9mIGNhbGxiYWNrcyBmb3IgYGV2ZW50YC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcbiAqIEByZXR1cm4ge0FycmF5fVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5FbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lcnMgPSBmdW5jdGlvbihldmVudCl7XG4gIHRoaXMuX2NhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcyB8fCB7fTtcbiAgcmV0dXJuIHRoaXMuX2NhbGxiYWNrc1snJCcgKyBldmVudF0gfHwgW107XG59O1xuXG4vKipcbiAqIENoZWNrIGlmIHRoaXMgZW1pdHRlciBoYXMgYGV2ZW50YCBoYW5kbGVycy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkVtaXR0ZXIucHJvdG90eXBlLmhhc0xpc3RlbmVycyA9IGZ1bmN0aW9uKGV2ZW50KXtcbiAgcmV0dXJuICEhIHRoaXMubGlzdGVuZXJzKGV2ZW50KS5sZW5ndGg7XG59O1xuIiwiZXhwb3J0IGNvbnN0IGdsb2JhbFRoaXNTaGltID0gKCgpID0+IHtcbiAgICBpZiAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgcmV0dXJuIHdpbmRvdztcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG4gICAgfVxufSkoKTtcbiIsImltcG9ydCB7IGdsb2JhbFRoaXNTaGltIGFzIGdsb2JhbFRoaXMgfSBmcm9tIFwiLi9nbG9iYWxUaGlzLmpzXCI7XG5leHBvcnQgZnVuY3Rpb24gcGljayhvYmosIC4uLmF0dHIpIHtcbiAgICByZXR1cm4gYXR0ci5yZWR1Y2UoKGFjYywgaykgPT4ge1xuICAgICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGspKSB7XG4gICAgICAgICAgICBhY2Nba10gPSBvYmpba107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCB7fSk7XG59XG4vLyBLZWVwIGEgcmVmZXJlbmNlIHRvIHRoZSByZWFsIHRpbWVvdXQgZnVuY3Rpb25zIHNvIHRoZXkgY2FuIGJlIHVzZWQgd2hlbiBvdmVycmlkZGVuXG5jb25zdCBOQVRJVkVfU0VUX1RJTUVPVVQgPSBnbG9iYWxUaGlzLnNldFRpbWVvdXQ7XG5jb25zdCBOQVRJVkVfQ0xFQVJfVElNRU9VVCA9IGdsb2JhbFRoaXMuY2xlYXJUaW1lb3V0O1xuZXhwb3J0IGZ1bmN0aW9uIGluc3RhbGxUaW1lckZ1bmN0aW9ucyhvYmosIG9wdHMpIHtcbiAgICBpZiAob3B0cy51c2VOYXRpdmVUaW1lcnMpIHtcbiAgICAgICAgb2JqLnNldFRpbWVvdXRGbiA9IE5BVElWRV9TRVRfVElNRU9VVC5iaW5kKGdsb2JhbFRoaXMpO1xuICAgICAgICBvYmouY2xlYXJUaW1lb3V0Rm4gPSBOQVRJVkVfQ0xFQVJfVElNRU9VVC5iaW5kKGdsb2JhbFRoaXMpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgb2JqLnNldFRpbWVvdXRGbiA9IGdsb2JhbFRoaXMuc2V0VGltZW91dC5iaW5kKGdsb2JhbFRoaXMpO1xuICAgICAgICBvYmouY2xlYXJUaW1lb3V0Rm4gPSBnbG9iYWxUaGlzLmNsZWFyVGltZW91dC5iaW5kKGdsb2JhbFRoaXMpO1xuICAgIH1cbn1cbi8vIGJhc2U2NCBlbmNvZGVkIGJ1ZmZlcnMgYXJlIGFib3V0IDMzJSBiaWdnZXIgKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Jhc2U2NClcbmNvbnN0IEJBU0U2NF9PVkVSSEVBRCA9IDEuMzM7XG4vLyB3ZSBjb3VsZCBhbHNvIGhhdmUgdXNlZCBgbmV3IEJsb2IoW29ial0pLnNpemVgLCBidXQgaXQgaXNuJ3Qgc3VwcG9ydGVkIGluIElFOVxuZXhwb3J0IGZ1bmN0aW9uIGJ5dGVMZW5ndGgob2JqKSB7XG4gICAgaWYgKHR5cGVvZiBvYmogPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgcmV0dXJuIHV0ZjhMZW5ndGgob2JqKTtcbiAgICB9XG4gICAgLy8gYXJyYXlidWZmZXIgb3IgYmxvYlxuICAgIHJldHVybiBNYXRoLmNlaWwoKG9iai5ieXRlTGVuZ3RoIHx8IG9iai5zaXplKSAqIEJBU0U2NF9PVkVSSEVBRCk7XG59XG5mdW5jdGlvbiB1dGY4TGVuZ3RoKHN0cikge1xuICAgIGxldCBjID0gMCwgbGVuZ3RoID0gMDtcbiAgICBmb3IgKGxldCBpID0gMCwgbCA9IHN0ci5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgYyA9IHN0ci5jaGFyQ29kZUF0KGkpO1xuICAgICAgICBpZiAoYyA8IDB4ODApIHtcbiAgICAgICAgICAgIGxlbmd0aCArPSAxO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGMgPCAweDgwMCkge1xuICAgICAgICAgICAgbGVuZ3RoICs9IDI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYyA8IDB4ZDgwMCB8fCBjID49IDB4ZTAwMCkge1xuICAgICAgICAgICAgbGVuZ3RoICs9IDM7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpKys7XG4gICAgICAgICAgICBsZW5ndGggKz0gNDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbGVuZ3RoO1xufVxuIiwiaW1wb3J0IHsgZGVjb2RlUGFja2V0IH0gZnJvbSBcImVuZ2luZS5pby1wYXJzZXJcIjtcbmltcG9ydCB7IEVtaXR0ZXIgfSBmcm9tIFwiQHNvY2tldC5pby9jb21wb25lbnQtZW1pdHRlclwiO1xuaW1wb3J0IHsgaW5zdGFsbFRpbWVyRnVuY3Rpb25zIH0gZnJvbSBcIi4vdXRpbC5qc1wiO1xuY2xhc3MgVHJhbnNwb3J0RXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IocmVhc29uLCBkZXNjcmlwdGlvbiwgY29udGV4dCkge1xuICAgICAgICBzdXBlcihyZWFzb24pO1xuICAgICAgICB0aGlzLmRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb247XG4gICAgICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gICAgICAgIHRoaXMudHlwZSA9IFwiVHJhbnNwb3J0RXJyb3JcIjtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgVHJhbnNwb3J0IGV4dGVuZHMgRW1pdHRlciB7XG4gICAgLyoqXG4gICAgICogVHJhbnNwb3J0IGFic3RyYWN0IGNvbnN0cnVjdG9yLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRpb25zXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy53cml0YWJsZSA9IGZhbHNlO1xuICAgICAgICBpbnN0YWxsVGltZXJGdW5jdGlvbnModGhpcywgb3B0cyk7XG4gICAgICAgIHRoaXMub3B0cyA9IG9wdHM7XG4gICAgICAgIHRoaXMucXVlcnkgPSBvcHRzLnF1ZXJ5O1xuICAgICAgICB0aGlzLnNvY2tldCA9IG9wdHMuc29ja2V0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBFbWl0cyBhbiBlcnJvci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSByZWFzb25cbiAgICAgKiBAcGFyYW0gZGVzY3JpcHRpb25cbiAgICAgKiBAcGFyYW0gY29udGV4dCAtIHRoZSBlcnJvciBjb250ZXh0XG4gICAgICogQHJldHVybiB7VHJhbnNwb3J0fSBmb3IgY2hhaW5pbmdcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgb25FcnJvcihyZWFzb24sIGRlc2NyaXB0aW9uLCBjb250ZXh0KSB7XG4gICAgICAgIHN1cGVyLmVtaXRSZXNlcnZlZChcImVycm9yXCIsIG5ldyBUcmFuc3BvcnRFcnJvcihyZWFzb24sIGRlc2NyaXB0aW9uLCBjb250ZXh0KSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBPcGVucyB0aGUgdHJhbnNwb3J0LlxuICAgICAqL1xuICAgIG9wZW4oKSB7XG4gICAgICAgIHRoaXMucmVhZHlTdGF0ZSA9IFwib3BlbmluZ1wiO1xuICAgICAgICB0aGlzLmRvT3BlbigpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2xvc2VzIHRoZSB0cmFuc3BvcnQuXG4gICAgICovXG4gICAgY2xvc2UoKSB7XG4gICAgICAgIGlmICh0aGlzLnJlYWR5U3RhdGUgPT09IFwib3BlbmluZ1wiIHx8IHRoaXMucmVhZHlTdGF0ZSA9PT0gXCJvcGVuXCIpIHtcbiAgICAgICAgICAgIHRoaXMuZG9DbG9zZSgpO1xuICAgICAgICAgICAgdGhpcy5vbkNsb3NlKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNlbmRzIG11bHRpcGxlIHBhY2tldHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYWNrZXRzXG4gICAgICovXG4gICAgc2VuZChwYWNrZXRzKSB7XG4gICAgICAgIGlmICh0aGlzLnJlYWR5U3RhdGUgPT09IFwib3BlblwiKSB7XG4gICAgICAgICAgICB0aGlzLndyaXRlKHBhY2tldHMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gdGhpcyBtaWdodCBoYXBwZW4gaWYgdGhlIHRyYW5zcG9ydCB3YXMgc2lsZW50bHkgY2xvc2VkIGluIHRoZSBiZWZvcmV1bmxvYWQgZXZlbnQgaGFuZGxlclxuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxlZCB1cG9uIG9wZW5cbiAgICAgKlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBvbk9wZW4oKSB7XG4gICAgICAgIHRoaXMucmVhZHlTdGF0ZSA9IFwib3BlblwiO1xuICAgICAgICB0aGlzLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgICAgc3VwZXIuZW1pdFJlc2VydmVkKFwib3BlblwiKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHdpdGggZGF0YS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBkYXRhXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIG9uRGF0YShkYXRhKSB7XG4gICAgICAgIGNvbnN0IHBhY2tldCA9IGRlY29kZVBhY2tldChkYXRhLCB0aGlzLnNvY2tldC5iaW5hcnlUeXBlKTtcbiAgICAgICAgdGhpcy5vblBhY2tldChwYWNrZXQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgd2l0aCBhIGRlY29kZWQgcGFja2V0LlxuICAgICAqXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIG9uUGFja2V0KHBhY2tldCkge1xuICAgICAgICBzdXBlci5lbWl0UmVzZXJ2ZWQoXCJwYWNrZXRcIiwgcGFja2V0KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHVwb24gY2xvc2UuXG4gICAgICpcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgb25DbG9zZShkZXRhaWxzKSB7XG4gICAgICAgIHRoaXMucmVhZHlTdGF0ZSA9IFwiY2xvc2VkXCI7XG4gICAgICAgIHN1cGVyLmVtaXRSZXNlcnZlZChcImNsb3NlXCIsIGRldGFpbHMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQYXVzZXMgdGhlIHRyYW5zcG9ydCwgaW4gb3JkZXIgbm90IHRvIGxvc2UgcGFja2V0cyBkdXJpbmcgYW4gdXBncmFkZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBvblBhdXNlXG4gICAgICovXG4gICAgcGF1c2Uob25QYXVzZSkgeyB9XG59XG4iLCIvLyBpbXBvcnRlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS91bnNoaWZ0aW8veWVhc3Rcbid1c2Ugc3RyaWN0JztcbmNvbnN0IGFscGhhYmV0ID0gJzAxMjM0NTY3ODlBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6LV8nLnNwbGl0KCcnKSwgbGVuZ3RoID0gNjQsIG1hcCA9IHt9O1xubGV0IHNlZWQgPSAwLCBpID0gMCwgcHJldjtcbi8qKlxuICogUmV0dXJuIGEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgc3BlY2lmaWVkIG51bWJlci5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbnVtIFRoZSBudW1iZXIgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIG51bWJlci5cbiAqIEBhcGkgcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlbmNvZGUobnVtKSB7XG4gICAgbGV0IGVuY29kZWQgPSAnJztcbiAgICBkbyB7XG4gICAgICAgIGVuY29kZWQgPSBhbHBoYWJldFtudW0gJSBsZW5ndGhdICsgZW5jb2RlZDtcbiAgICAgICAgbnVtID0gTWF0aC5mbG9vcihudW0gLyBsZW5ndGgpO1xuICAgIH0gd2hpbGUgKG51bSA+IDApO1xuICAgIHJldHVybiBlbmNvZGVkO1xufVxuLyoqXG4gKiBSZXR1cm4gdGhlIGludGVnZXIgdmFsdWUgc3BlY2lmaWVkIGJ5IHRoZSBnaXZlbiBzdHJpbmcuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0ciBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBUaGUgaW50ZWdlciB2YWx1ZSByZXByZXNlbnRlZCBieSB0aGUgc3RyaW5nLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlY29kZShzdHIpIHtcbiAgICBsZXQgZGVjb2RlZCA9IDA7XG4gICAgZm9yIChpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xuICAgICAgICBkZWNvZGVkID0gZGVjb2RlZCAqIGxlbmd0aCArIG1hcFtzdHIuY2hhckF0KGkpXTtcbiAgICB9XG4gICAgcmV0dXJuIGRlY29kZWQ7XG59XG4vKipcbiAqIFllYXN0OiBBIHRpbnkgZ3Jvd2luZyBpZCBnZW5lcmF0b3IuXG4gKlxuICogQHJldHVybnMge1N0cmluZ30gQSB1bmlxdWUgaWQuXG4gKiBAYXBpIHB1YmxpY1xuICovXG5leHBvcnQgZnVuY3Rpb24geWVhc3QoKSB7XG4gICAgY29uc3Qgbm93ID0gZW5jb2RlKCtuZXcgRGF0ZSgpKTtcbiAgICBpZiAobm93ICE9PSBwcmV2KVxuICAgICAgICByZXR1cm4gc2VlZCA9IDAsIHByZXYgPSBub3c7XG4gICAgcmV0dXJuIG5vdyArICcuJyArIGVuY29kZShzZWVkKyspO1xufVxuLy9cbi8vIE1hcCBlYWNoIGNoYXJhY3RlciB0byBpdHMgaW5kZXguXG4vL1xuZm9yICg7IGkgPCBsZW5ndGg7IGkrKylcbiAgICBtYXBbYWxwaGFiZXRbaV1dID0gaTtcbiIsIi8vIGltcG9ydGVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2dhbGtuL3F1ZXJ5c3RyaW5nXG4vKipcbiAqIENvbXBpbGVzIGEgcXVlcnlzdHJpbmdcbiAqIFJldHVybnMgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBvYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gZW5jb2RlKG9iaikge1xuICAgIGxldCBzdHIgPSAnJztcbiAgICBmb3IgKGxldCBpIGluIG9iaikge1xuICAgICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICAgICAgICBpZiAoc3RyLmxlbmd0aClcbiAgICAgICAgICAgICAgICBzdHIgKz0gJyYnO1xuICAgICAgICAgICAgc3RyICs9IGVuY29kZVVSSUNvbXBvbmVudChpKSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudChvYmpbaV0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzdHI7XG59XG4vKipcbiAqIFBhcnNlcyBhIHNpbXBsZSBxdWVyeXN0cmluZyBpbnRvIGFuIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBxc1xuICogQGFwaSBwcml2YXRlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWNvZGUocXMpIHtcbiAgICBsZXQgcXJ5ID0ge307XG4gICAgbGV0IHBhaXJzID0gcXMuc3BsaXQoJyYnKTtcbiAgICBmb3IgKGxldCBpID0gMCwgbCA9IHBhaXJzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBsZXQgcGFpciA9IHBhaXJzW2ldLnNwbGl0KCc9Jyk7XG4gICAgICAgIHFyeVtkZWNvZGVVUklDb21wb25lbnQocGFpclswXSldID0gZGVjb2RlVVJJQ29tcG9uZW50KHBhaXJbMV0pO1xuICAgIH1cbiAgICByZXR1cm4gcXJ5O1xufVxuIiwiLy8gaW1wb3J0ZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vY29tcG9uZW50L2hhcy1jb3JzXG5sZXQgdmFsdWUgPSBmYWxzZTtcbnRyeSB7XG4gICAgdmFsdWUgPSB0eXBlb2YgWE1MSHR0cFJlcXVlc3QgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICd3aXRoQ3JlZGVudGlhbHMnIGluIG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xufVxuY2F0Y2ggKGVycikge1xuICAgIC8vIGlmIFhNTEh0dHAgc3VwcG9ydCBpcyBkaXNhYmxlZCBpbiBJRSB0aGVuIGl0IHdpbGwgdGhyb3dcbiAgICAvLyB3aGVuIHRyeWluZyB0byBjcmVhdGVcbn1cbmV4cG9ydCBjb25zdCBoYXNDT1JTID0gdmFsdWU7XG4iLCIvLyBicm93c2VyIHNoaW0gZm9yIHhtbGh0dHByZXF1ZXN0IG1vZHVsZVxuaW1wb3J0IHsgaGFzQ09SUyB9IGZyb20gXCIuLi9jb250cmliL2hhcy1jb3JzLmpzXCI7XG5pbXBvcnQgeyBnbG9iYWxUaGlzU2hpbSBhcyBnbG9iYWxUaGlzIH0gZnJvbSBcIi4uL2dsb2JhbFRoaXMuanNcIjtcbmV4cG9ydCBmdW5jdGlvbiBYSFIob3B0cykge1xuICAgIGNvbnN0IHhkb21haW4gPSBvcHRzLnhkb21haW47XG4gICAgLy8gWE1MSHR0cFJlcXVlc3QgY2FuIGJlIGRpc2FibGVkIG9uIElFXG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKFwidW5kZWZpbmVkXCIgIT09IHR5cGVvZiBYTUxIdHRwUmVxdWVzdCAmJiAoIXhkb21haW4gfHwgaGFzQ09SUykpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjYXRjaCAoZSkgeyB9XG4gICAgaWYgKCF4ZG9tYWluKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IGdsb2JhbFRoaXNbW1wiQWN0aXZlXCJdLmNvbmNhdChcIk9iamVjdFwiKS5qb2luKFwiWFwiKV0oXCJNaWNyb3NvZnQuWE1MSFRUUFwiKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkgeyB9XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgVHJhbnNwb3J0IH0gZnJvbSBcIi4uL3RyYW5zcG9ydC5qc1wiO1xuaW1wb3J0IHsgeWVhc3QgfSBmcm9tIFwiLi4vY29udHJpYi95ZWFzdC5qc1wiO1xuaW1wb3J0IHsgZW5jb2RlIH0gZnJvbSBcIi4uL2NvbnRyaWIvcGFyc2Vxcy5qc1wiO1xuaW1wb3J0IHsgZW5jb2RlUGF5bG9hZCwgZGVjb2RlUGF5bG9hZCB9IGZyb20gXCJlbmdpbmUuaW8tcGFyc2VyXCI7XG5pbXBvcnQgeyBYSFIgYXMgWE1MSHR0cFJlcXVlc3QgfSBmcm9tIFwiLi94bWxodHRwcmVxdWVzdC5qc1wiO1xuaW1wb3J0IHsgRW1pdHRlciB9IGZyb20gXCJAc29ja2V0LmlvL2NvbXBvbmVudC1lbWl0dGVyXCI7XG5pbXBvcnQgeyBpbnN0YWxsVGltZXJGdW5jdGlvbnMsIHBpY2sgfSBmcm9tIFwiLi4vdXRpbC5qc1wiO1xuaW1wb3J0IHsgZ2xvYmFsVGhpc1NoaW0gYXMgZ2xvYmFsVGhpcyB9IGZyb20gXCIuLi9nbG9iYWxUaGlzLmpzXCI7XG5mdW5jdGlvbiBlbXB0eSgpIHsgfVxuY29uc3QgaGFzWEhSMiA9IChmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KHtcbiAgICAgICAgeGRvbWFpbjogZmFsc2UsXG4gICAgfSk7XG4gICAgcmV0dXJuIG51bGwgIT0geGhyLnJlc3BvbnNlVHlwZTtcbn0pKCk7XG5leHBvcnQgY2xhc3MgUG9sbGluZyBleHRlbmRzIFRyYW5zcG9ydCB7XG4gICAgLyoqXG4gICAgICogWEhSIFBvbGxpbmcgY29uc3RydWN0b3IuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0c1xuICAgICAqIEBwYWNrYWdlXG4gICAgICovXG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcihvcHRzKTtcbiAgICAgICAgdGhpcy5wb2xsaW5nID0gZmFsc2U7XG4gICAgICAgIGlmICh0eXBlb2YgbG9jYXRpb24gIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgIGNvbnN0IGlzU1NMID0gXCJodHRwczpcIiA9PT0gbG9jYXRpb24ucHJvdG9jb2w7XG4gICAgICAgICAgICBsZXQgcG9ydCA9IGxvY2F0aW9uLnBvcnQ7XG4gICAgICAgICAgICAvLyBzb21lIHVzZXIgYWdlbnRzIGhhdmUgZW1wdHkgYGxvY2F0aW9uLnBvcnRgXG4gICAgICAgICAgICBpZiAoIXBvcnQpIHtcbiAgICAgICAgICAgICAgICBwb3J0ID0gaXNTU0wgPyBcIjQ0M1wiIDogXCI4MFwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy54ZCA9XG4gICAgICAgICAgICAgICAgKHR5cGVvZiBsb2NhdGlvbiAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgICAgICAgICAgICAgICAgICBvcHRzLmhvc3RuYW1lICE9PSBsb2NhdGlvbi5ob3N0bmFtZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgcG9ydCAhPT0gb3B0cy5wb3J0O1xuICAgICAgICAgICAgdGhpcy54cyA9IG9wdHMuc2VjdXJlICE9PSBpc1NTTDtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICogWEhSIHN1cHBvcnRzIGJpbmFyeVxuICAgICAgICAgKi9cbiAgICAgICAgY29uc3QgZm9yY2VCYXNlNjQgPSBvcHRzICYmIG9wdHMuZm9yY2VCYXNlNjQ7XG4gICAgICAgIHRoaXMuc3VwcG9ydHNCaW5hcnkgPSBoYXNYSFIyICYmICFmb3JjZUJhc2U2NDtcbiAgICB9XG4gICAgZ2V0IG5hbWUoKSB7XG4gICAgICAgIHJldHVybiBcInBvbGxpbmdcIjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogT3BlbnMgdGhlIHNvY2tldCAodHJpZ2dlcnMgcG9sbGluZykuIFdlIHdyaXRlIGEgUElORyBtZXNzYWdlIHRvIGRldGVybWluZVxuICAgICAqIHdoZW4gdGhlIHRyYW5zcG9ydCBpcyBvcGVuLlxuICAgICAqXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIGRvT3BlbigpIHtcbiAgICAgICAgdGhpcy5wb2xsKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFBhdXNlcyBwb2xsaW5nLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gb25QYXVzZSAtIGNhbGxiYWNrIHVwb24gYnVmZmVycyBhcmUgZmx1c2hlZCBhbmQgdHJhbnNwb3J0IGlzIHBhdXNlZFxuICAgICAqIEBwYWNrYWdlXG4gICAgICovXG4gICAgcGF1c2Uob25QYXVzZSkge1xuICAgICAgICB0aGlzLnJlYWR5U3RhdGUgPSBcInBhdXNpbmdcIjtcbiAgICAgICAgY29uc3QgcGF1c2UgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnJlYWR5U3RhdGUgPSBcInBhdXNlZFwiO1xuICAgICAgICAgICAgb25QYXVzZSgpO1xuICAgICAgICB9O1xuICAgICAgICBpZiAodGhpcy5wb2xsaW5nIHx8ICF0aGlzLndyaXRhYmxlKSB7XG4gICAgICAgICAgICBsZXQgdG90YWwgPSAwO1xuICAgICAgICAgICAgaWYgKHRoaXMucG9sbGluZykge1xuICAgICAgICAgICAgICAgIHRvdGFsKys7XG4gICAgICAgICAgICAgICAgdGhpcy5vbmNlKFwicG9sbENvbXBsZXRlXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgLS10b3RhbCB8fCBwYXVzZSgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCF0aGlzLndyaXRhYmxlKSB7XG4gICAgICAgICAgICAgICAgdG90YWwrKztcbiAgICAgICAgICAgICAgICB0aGlzLm9uY2UoXCJkcmFpblwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIC0tdG90YWwgfHwgcGF1c2UoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHBhdXNlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogU3RhcnRzIHBvbGxpbmcgY3ljbGUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHBvbGwoKSB7XG4gICAgICAgIHRoaXMucG9sbGluZyA9IHRydWU7XG4gICAgICAgIHRoaXMuZG9Qb2xsKCk7XG4gICAgICAgIHRoaXMuZW1pdFJlc2VydmVkKFwicG9sbFwiKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogT3ZlcmxvYWRzIG9uRGF0YSB0byBkZXRlY3QgcGF5bG9hZHMuXG4gICAgICpcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgb25EYXRhKGRhdGEpIHtcbiAgICAgICAgY29uc3QgY2FsbGJhY2sgPSAocGFja2V0KSA9PiB7XG4gICAgICAgICAgICAvLyBpZiBpdHMgdGhlIGZpcnN0IG1lc3NhZ2Ugd2UgY29uc2lkZXIgdGhlIHRyYW5zcG9ydCBvcGVuXG4gICAgICAgICAgICBpZiAoXCJvcGVuaW5nXCIgPT09IHRoaXMucmVhZHlTdGF0ZSAmJiBwYWNrZXQudHlwZSA9PT0gXCJvcGVuXCIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9uT3BlbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gaWYgaXRzIGEgY2xvc2UgcGFja2V0LCB3ZSBjbG9zZSB0aGUgb25nb2luZyByZXF1ZXN0c1xuICAgICAgICAgICAgaWYgKFwiY2xvc2VcIiA9PT0gcGFja2V0LnR5cGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9uQ2xvc2UoeyBkZXNjcmlwdGlvbjogXCJ0cmFuc3BvcnQgY2xvc2VkIGJ5IHRoZSBzZXJ2ZXJcIiB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBvdGhlcndpc2UgYnlwYXNzIG9uRGF0YSBhbmQgaGFuZGxlIHRoZSBtZXNzYWdlXG4gICAgICAgICAgICB0aGlzLm9uUGFja2V0KHBhY2tldCk7XG4gICAgICAgIH07XG4gICAgICAgIC8vIGRlY29kZSBwYXlsb2FkXG4gICAgICAgIGRlY29kZVBheWxvYWQoZGF0YSwgdGhpcy5zb2NrZXQuYmluYXJ5VHlwZSkuZm9yRWFjaChjYWxsYmFjayk7XG4gICAgICAgIC8vIGlmIGFuIGV2ZW50IGRpZCBub3QgdHJpZ2dlciBjbG9zaW5nXG4gICAgICAgIGlmIChcImNsb3NlZFwiICE9PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICAgICAgICAgIC8vIGlmIHdlIGdvdCBkYXRhIHdlJ3JlIG5vdCBwb2xsaW5nXG4gICAgICAgICAgICB0aGlzLnBvbGxpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuZW1pdFJlc2VydmVkKFwicG9sbENvbXBsZXRlXCIpO1xuICAgICAgICAgICAgaWYgKFwib3BlblwiID09PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBvbGwoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEZvciBwb2xsaW5nLCBzZW5kIGEgY2xvc2UgcGFja2V0LlxuICAgICAqXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIGRvQ2xvc2UoKSB7XG4gICAgICAgIGNvbnN0IGNsb3NlID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy53cml0ZShbeyB0eXBlOiBcImNsb3NlXCIgfV0pO1xuICAgICAgICB9O1xuICAgICAgICBpZiAoXCJvcGVuXCIgPT09IHRoaXMucmVhZHlTdGF0ZSkge1xuICAgICAgICAgICAgY2xvc2UoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIGluIGNhc2Ugd2UncmUgdHJ5aW5nIHRvIGNsb3NlIHdoaWxlXG4gICAgICAgICAgICAvLyBoYW5kc2hha2luZyBpcyBpbiBwcm9ncmVzcyAoR0gtMTY0KVxuICAgICAgICAgICAgdGhpcy5vbmNlKFwib3BlblwiLCBjbG9zZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogV3JpdGVzIGEgcGFja2V0cyBwYXlsb2FkLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtBcnJheX0gcGFja2V0cyAtIGRhdGEgcGFja2V0c1xuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICB3cml0ZShwYWNrZXRzKSB7XG4gICAgICAgIHRoaXMud3JpdGFibGUgPSBmYWxzZTtcbiAgICAgICAgZW5jb2RlUGF5bG9hZChwYWNrZXRzLCAoZGF0YSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5kb1dyaXRlKGRhdGEsICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXRSZXNlcnZlZChcImRyYWluXCIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZXMgdXJpIGZvciBjb25uZWN0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB1cmkoKSB7XG4gICAgICAgIGxldCBxdWVyeSA9IHRoaXMucXVlcnkgfHwge307XG4gICAgICAgIGNvbnN0IHNjaGVtYSA9IHRoaXMub3B0cy5zZWN1cmUgPyBcImh0dHBzXCIgOiBcImh0dHBcIjtcbiAgICAgICAgbGV0IHBvcnQgPSBcIlwiO1xuICAgICAgICAvLyBjYWNoZSBidXN0aW5nIGlzIGZvcmNlZFxuICAgICAgICBpZiAoZmFsc2UgIT09IHRoaXMub3B0cy50aW1lc3RhbXBSZXF1ZXN0cykge1xuICAgICAgICAgICAgcXVlcnlbdGhpcy5vcHRzLnRpbWVzdGFtcFBhcmFtXSA9IHllYXN0KCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLnN1cHBvcnRzQmluYXJ5ICYmICFxdWVyeS5zaWQpIHtcbiAgICAgICAgICAgIHF1ZXJ5LmI2NCA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgLy8gYXZvaWQgcG9ydCBpZiBkZWZhdWx0IGZvciBzY2hlbWFcbiAgICAgICAgaWYgKHRoaXMub3B0cy5wb3J0ICYmXG4gICAgICAgICAgICAoKFwiaHR0cHNcIiA9PT0gc2NoZW1hICYmIE51bWJlcih0aGlzLm9wdHMucG9ydCkgIT09IDQ0MykgfHxcbiAgICAgICAgICAgICAgICAoXCJodHRwXCIgPT09IHNjaGVtYSAmJiBOdW1iZXIodGhpcy5vcHRzLnBvcnQpICE9PSA4MCkpKSB7XG4gICAgICAgICAgICBwb3J0ID0gXCI6XCIgKyB0aGlzLm9wdHMucG9ydDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBlbmNvZGVkUXVlcnkgPSBlbmNvZGUocXVlcnkpO1xuICAgICAgICBjb25zdCBpcHY2ID0gdGhpcy5vcHRzLmhvc3RuYW1lLmluZGV4T2YoXCI6XCIpICE9PSAtMTtcbiAgICAgICAgcmV0dXJuIChzY2hlbWEgK1xuICAgICAgICAgICAgXCI6Ly9cIiArXG4gICAgICAgICAgICAoaXB2NiA/IFwiW1wiICsgdGhpcy5vcHRzLmhvc3RuYW1lICsgXCJdXCIgOiB0aGlzLm9wdHMuaG9zdG5hbWUpICtcbiAgICAgICAgICAgIHBvcnQgK1xuICAgICAgICAgICAgdGhpcy5vcHRzLnBhdGggK1xuICAgICAgICAgICAgKGVuY29kZWRRdWVyeS5sZW5ndGggPyBcIj9cIiArIGVuY29kZWRRdWVyeSA6IFwiXCIpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHJlcXVlc3QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gbWV0aG9kXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICByZXF1ZXN0KG9wdHMgPSB7fSkge1xuICAgICAgICBPYmplY3QuYXNzaWduKG9wdHMsIHsgeGQ6IHRoaXMueGQsIHhzOiB0aGlzLnhzIH0sIHRoaXMub3B0cyk7XG4gICAgICAgIHJldHVybiBuZXcgUmVxdWVzdCh0aGlzLnVyaSgpLCBvcHRzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2VuZHMgZGF0YS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBkYXRhIHRvIHNlbmQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGVkIHVwb24gZmx1c2guXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBkb1dyaXRlKGRhdGEsIGZuKSB7XG4gICAgICAgIGNvbnN0IHJlcSA9IHRoaXMucmVxdWVzdCh7XG4gICAgICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgICAgICAgZGF0YTogZGF0YSxcbiAgICAgICAgfSk7XG4gICAgICAgIHJlcS5vbihcInN1Y2Nlc3NcIiwgZm4pO1xuICAgICAgICByZXEub24oXCJlcnJvclwiLCAoeGhyU3RhdHVzLCBjb250ZXh0KSA9PiB7XG4gICAgICAgICAgICB0aGlzLm9uRXJyb3IoXCJ4aHIgcG9zdCBlcnJvclwiLCB4aHJTdGF0dXMsIGNvbnRleHQpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU3RhcnRzIGEgcG9sbCBjeWNsZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgZG9Qb2xsKCkge1xuICAgICAgICBjb25zdCByZXEgPSB0aGlzLnJlcXVlc3QoKTtcbiAgICAgICAgcmVxLm9uKFwiZGF0YVwiLCB0aGlzLm9uRGF0YS5iaW5kKHRoaXMpKTtcbiAgICAgICAgcmVxLm9uKFwiZXJyb3JcIiwgKHhoclN0YXR1cywgY29udGV4dCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5vbkVycm9yKFwieGhyIHBvbGwgZXJyb3JcIiwgeGhyU3RhdHVzLCBjb250ZXh0KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMucG9sbFhociA9IHJlcTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgUmVxdWVzdCBleHRlbmRzIEVtaXR0ZXIge1xuICAgIC8qKlxuICAgICAqIFJlcXVlc3QgY29uc3RydWN0b3JcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gICAgICogQHBhY2thZ2VcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcih1cmksIG9wdHMpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgaW5zdGFsbFRpbWVyRnVuY3Rpb25zKHRoaXMsIG9wdHMpO1xuICAgICAgICB0aGlzLm9wdHMgPSBvcHRzO1xuICAgICAgICB0aGlzLm1ldGhvZCA9IG9wdHMubWV0aG9kIHx8IFwiR0VUXCI7XG4gICAgICAgIHRoaXMudXJpID0gdXJpO1xuICAgICAgICB0aGlzLmFzeW5jID0gZmFsc2UgIT09IG9wdHMuYXN5bmM7XG4gICAgICAgIHRoaXMuZGF0YSA9IHVuZGVmaW5lZCAhPT0gb3B0cy5kYXRhID8gb3B0cy5kYXRhIDogbnVsbDtcbiAgICAgICAgdGhpcy5jcmVhdGUoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyB0aGUgWEhSIG9iamVjdCBhbmQgc2VuZHMgdGhlIHJlcXVlc3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGNyZWF0ZSgpIHtcbiAgICAgICAgY29uc3Qgb3B0cyA9IHBpY2sodGhpcy5vcHRzLCBcImFnZW50XCIsIFwicGZ4XCIsIFwia2V5XCIsIFwicGFzc3BocmFzZVwiLCBcImNlcnRcIiwgXCJjYVwiLCBcImNpcGhlcnNcIiwgXCJyZWplY3RVbmF1dGhvcml6ZWRcIiwgXCJhdXRvVW5yZWZcIik7XG4gICAgICAgIG9wdHMueGRvbWFpbiA9ICEhdGhpcy5vcHRzLnhkO1xuICAgICAgICBvcHRzLnhzY2hlbWUgPSAhIXRoaXMub3B0cy54cztcbiAgICAgICAgY29uc3QgeGhyID0gKHRoaXMueGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KG9wdHMpKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHhoci5vcGVuKHRoaXMubWV0aG9kLCB0aGlzLnVyaSwgdGhpcy5hc3luYyk7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdHMuZXh0cmFIZWFkZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgIHhoci5zZXREaXNhYmxlSGVhZGVyQ2hlY2sgJiYgeGhyLnNldERpc2FibGVIZWFkZXJDaGVjayh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSBpbiB0aGlzLm9wdHMuZXh0cmFIZWFkZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRzLmV4dHJhSGVhZGVycy5oYXNPd25Qcm9wZXJ0eShpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKGksIHRoaXMub3B0cy5leHRyYUhlYWRlcnNbaV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHsgfVxuICAgICAgICAgICAgaWYgKFwiUE9TVFwiID09PSB0aGlzLm1ldGhvZCkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKFwiQ29udGVudC10eXBlXCIsIFwidGV4dC9wbGFpbjtjaGFyc2V0PVVURi04XCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkgeyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKFwiQWNjZXB0XCIsIFwiKi8qXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHsgfVxuICAgICAgICAgICAgLy8gaWU2IGNoZWNrXG4gICAgICAgICAgICBpZiAoXCJ3aXRoQ3JlZGVudGlhbHNcIiBpbiB4aHIpIHtcbiAgICAgICAgICAgICAgICB4aHIud2l0aENyZWRlbnRpYWxzID0gdGhpcy5vcHRzLndpdGhDcmVkZW50aWFscztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLm9wdHMucmVxdWVzdFRpbWVvdXQpIHtcbiAgICAgICAgICAgICAgICB4aHIudGltZW91dCA9IHRoaXMub3B0cy5yZXF1ZXN0VGltZW91dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKDQgIT09IHhoci5yZWFkeVN0YXRlKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgaWYgKDIwMCA9PT0geGhyLnN0YXR1cyB8fCAxMjIzID09PSB4aHIuc3RhdHVzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMub25Mb2FkKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBtYWtlIHN1cmUgdGhlIGBlcnJvcmAgZXZlbnQgaGFuZGxlciB0aGF0J3MgdXNlci1zZXRcbiAgICAgICAgICAgICAgICAgICAgLy8gZG9lcyBub3QgdGhyb3cgaW4gdGhlIHNhbWUgdGljayBhbmQgZ2V0cyBjYXVnaHQgaGVyZVxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFRpbWVvdXRGbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9uRXJyb3IodHlwZW9mIHhoci5zdGF0dXMgPT09IFwibnVtYmVyXCIgPyB4aHIuc3RhdHVzIDogMCk7XG4gICAgICAgICAgICAgICAgICAgIH0sIDApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB4aHIuc2VuZCh0aGlzLmRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAvLyBOZWVkIHRvIGRlZmVyIHNpbmNlIC5jcmVhdGUoKSBpcyBjYWxsZWQgZGlyZWN0bHkgZnJvbSB0aGUgY29uc3RydWN0b3JcbiAgICAgICAgICAgIC8vIGFuZCB0aHVzIHRoZSAnZXJyb3InIGV2ZW50IGNhbiBvbmx5IGJlIG9ubHkgYm91bmQgKmFmdGVyKiB0aGlzIGV4Y2VwdGlvblxuICAgICAgICAgICAgLy8gb2NjdXJzLiAgVGhlcmVmb3JlLCBhbHNvLCB3ZSBjYW5ub3QgdGhyb3cgaGVyZSBhdCBhbGwuXG4gICAgICAgICAgICB0aGlzLnNldFRpbWVvdXRGbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5vbkVycm9yKGUpO1xuICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgdGhpcy5pbmRleCA9IFJlcXVlc3QucmVxdWVzdHNDb3VudCsrO1xuICAgICAgICAgICAgUmVxdWVzdC5yZXF1ZXN0c1t0aGlzLmluZGV4XSA9IHRoaXM7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHVwb24gZXJyb3IuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIG9uRXJyb3IoZXJyKSB7XG4gICAgICAgIHRoaXMuZW1pdFJlc2VydmVkKFwiZXJyb3JcIiwgZXJyLCB0aGlzLnhocik7XG4gICAgICAgIHRoaXMuY2xlYW51cCh0cnVlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2xlYW5zIHVwIGhvdXNlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBjbGVhbnVwKGZyb21FcnJvcikge1xuICAgICAgICBpZiAoXCJ1bmRlZmluZWRcIiA9PT0gdHlwZW9mIHRoaXMueGhyIHx8IG51bGwgPT09IHRoaXMueGhyKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy54aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZW1wdHk7XG4gICAgICAgIGlmIChmcm9tRXJyb3IpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdGhpcy54aHIuYWJvcnQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7IH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICBkZWxldGUgUmVxdWVzdC5yZXF1ZXN0c1t0aGlzLmluZGV4XTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnhociA9IG51bGw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxlZCB1cG9uIGxvYWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIG9uTG9hZCgpIHtcbiAgICAgICAgY29uc3QgZGF0YSA9IHRoaXMueGhyLnJlc3BvbnNlVGV4dDtcbiAgICAgICAgaWYgKGRhdGEgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuZW1pdFJlc2VydmVkKFwiZGF0YVwiLCBkYXRhKTtcbiAgICAgICAgICAgIHRoaXMuZW1pdFJlc2VydmVkKFwic3VjY2Vzc1wiKTtcbiAgICAgICAgICAgIHRoaXMuY2xlYW51cCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFib3J0cyB0aGUgcmVxdWVzdC5cbiAgICAgKlxuICAgICAqIEBwYWNrYWdlXG4gICAgICovXG4gICAgYWJvcnQoKSB7XG4gICAgICAgIHRoaXMuY2xlYW51cCgpO1xuICAgIH1cbn1cblJlcXVlc3QucmVxdWVzdHNDb3VudCA9IDA7XG5SZXF1ZXN0LnJlcXVlc3RzID0ge307XG4vKipcbiAqIEFib3J0cyBwZW5kaW5nIHJlcXVlc3RzIHdoZW4gdW5sb2FkaW5nIHRoZSB3aW5kb3cuIFRoaXMgaXMgbmVlZGVkIHRvIHByZXZlbnRcbiAqIG1lbW9yeSBsZWFrcyAoZS5nLiB3aGVuIHVzaW5nIElFKSBhbmQgdG8gZW5zdXJlIHRoYXQgbm8gc3B1cmlvdXMgZXJyb3IgaXNcbiAqIGVtaXR0ZWQuXG4gKi9cbmlmICh0eXBlb2YgZG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgaWYgKHR5cGVvZiBhdHRhY2hFdmVudCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgYXR0YWNoRXZlbnQoXCJvbnVubG9hZFwiLCB1bmxvYWRIYW5kbGVyKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIGFkZEV2ZW50TGlzdGVuZXIgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBjb25zdCB0ZXJtaW5hdGlvbkV2ZW50ID0gXCJvbnBhZ2VoaWRlXCIgaW4gZ2xvYmFsVGhpcyA/IFwicGFnZWhpZGVcIiA6IFwidW5sb2FkXCI7XG4gICAgICAgIGFkZEV2ZW50TGlzdGVuZXIodGVybWluYXRpb25FdmVudCwgdW5sb2FkSGFuZGxlciwgZmFsc2UpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHVubG9hZEhhbmRsZXIoKSB7XG4gICAgZm9yIChsZXQgaSBpbiBSZXF1ZXN0LnJlcXVlc3RzKSB7XG4gICAgICAgIGlmIChSZXF1ZXN0LnJlcXVlc3RzLmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICAgICAgICBSZXF1ZXN0LnJlcXVlc3RzW2ldLmFib3J0KCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJpbXBvcnQgeyBnbG9iYWxUaGlzU2hpbSBhcyBnbG9iYWxUaGlzIH0gZnJvbSBcIi4uL2dsb2JhbFRoaXMuanNcIjtcbmV4cG9ydCBjb25zdCBuZXh0VGljayA9ICgoKSA9PiB7XG4gICAgY29uc3QgaXNQcm9taXNlQXZhaWxhYmxlID0gdHlwZW9mIFByb21pc2UgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgUHJvbWlzZS5yZXNvbHZlID09PSBcImZ1bmN0aW9uXCI7XG4gICAgaWYgKGlzUHJvbWlzZUF2YWlsYWJsZSkge1xuICAgICAgICByZXR1cm4gKGNiKSA9PiBQcm9taXNlLnJlc29sdmUoKS50aGVuKGNiKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiAoY2IsIHNldFRpbWVvdXRGbikgPT4gc2V0VGltZW91dEZuKGNiLCAwKTtcbiAgICB9XG59KSgpO1xuZXhwb3J0IGNvbnN0IFdlYlNvY2tldCA9IGdsb2JhbFRoaXMuV2ViU29ja2V0IHx8IGdsb2JhbFRoaXMuTW96V2ViU29ja2V0O1xuZXhwb3J0IGNvbnN0IHVzaW5nQnJvd3NlcldlYlNvY2tldCA9IHRydWU7XG5leHBvcnQgY29uc3QgZGVmYXVsdEJpbmFyeVR5cGUgPSBcImFycmF5YnVmZmVyXCI7XG4iLCJpbXBvcnQgeyBUcmFuc3BvcnQgfSBmcm9tIFwiLi4vdHJhbnNwb3J0LmpzXCI7XG5pbXBvcnQgeyBlbmNvZGUgfSBmcm9tIFwiLi4vY29udHJpYi9wYXJzZXFzLmpzXCI7XG5pbXBvcnQgeyB5ZWFzdCB9IGZyb20gXCIuLi9jb250cmliL3llYXN0LmpzXCI7XG5pbXBvcnQgeyBwaWNrIH0gZnJvbSBcIi4uL3V0aWwuanNcIjtcbmltcG9ydCB7IGRlZmF1bHRCaW5hcnlUeXBlLCBuZXh0VGljaywgdXNpbmdCcm93c2VyV2ViU29ja2V0LCBXZWJTb2NrZXQsIH0gZnJvbSBcIi4vd2Vic29ja2V0LWNvbnN0cnVjdG9yLmpzXCI7XG5pbXBvcnQgeyBlbmNvZGVQYWNrZXQgfSBmcm9tIFwiZW5naW5lLmlvLXBhcnNlclwiO1xuLy8gZGV0ZWN0IFJlYWN0TmF0aXZlIGVudmlyb25tZW50XG5jb25zdCBpc1JlYWN0TmF0aXZlID0gdHlwZW9mIG5hdmlnYXRvciAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgIHR5cGVvZiBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gXCJzdHJpbmdcIiAmJlxuICAgIG5hdmlnYXRvci5wcm9kdWN0LnRvTG93ZXJDYXNlKCkgPT09IFwicmVhY3RuYXRpdmVcIjtcbmV4cG9ydCBjbGFzcyBXUyBleHRlbmRzIFRyYW5zcG9ydCB7XG4gICAgLyoqXG4gICAgICogV2ViU29ja2V0IHRyYW5zcG9ydCBjb25zdHJ1Y3Rvci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gY29ubmVjdGlvbiBvcHRpb25zXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIob3B0cyk7XG4gICAgICAgIHRoaXMuc3VwcG9ydHNCaW5hcnkgPSAhb3B0cy5mb3JjZUJhc2U2NDtcbiAgICB9XG4gICAgZ2V0IG5hbWUoKSB7XG4gICAgICAgIHJldHVybiBcIndlYnNvY2tldFwiO1xuICAgIH1cbiAgICBkb09wZW4oKSB7XG4gICAgICAgIGlmICghdGhpcy5jaGVjaygpKSB7XG4gICAgICAgICAgICAvLyBsZXQgcHJvYmUgdGltZW91dFxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHVyaSA9IHRoaXMudXJpKCk7XG4gICAgICAgIGNvbnN0IHByb3RvY29scyA9IHRoaXMub3B0cy5wcm90b2NvbHM7XG4gICAgICAgIC8vIFJlYWN0IE5hdGl2ZSBvbmx5IHN1cHBvcnRzIHRoZSAnaGVhZGVycycgb3B0aW9uLCBhbmQgd2lsbCBwcmludCBhIHdhcm5pbmcgaWYgYW55dGhpbmcgZWxzZSBpcyBwYXNzZWRcbiAgICAgICAgY29uc3Qgb3B0cyA9IGlzUmVhY3ROYXRpdmVcbiAgICAgICAgICAgID8ge31cbiAgICAgICAgICAgIDogcGljayh0aGlzLm9wdHMsIFwiYWdlbnRcIiwgXCJwZXJNZXNzYWdlRGVmbGF0ZVwiLCBcInBmeFwiLCBcImtleVwiLCBcInBhc3NwaHJhc2VcIiwgXCJjZXJ0XCIsIFwiY2FcIiwgXCJjaXBoZXJzXCIsIFwicmVqZWN0VW5hdXRob3JpemVkXCIsIFwibG9jYWxBZGRyZXNzXCIsIFwicHJvdG9jb2xWZXJzaW9uXCIsIFwib3JpZ2luXCIsIFwibWF4UGF5bG9hZFwiLCBcImZhbWlseVwiLCBcImNoZWNrU2VydmVySWRlbnRpdHlcIik7XG4gICAgICAgIGlmICh0aGlzLm9wdHMuZXh0cmFIZWFkZXJzKSB7XG4gICAgICAgICAgICBvcHRzLmhlYWRlcnMgPSB0aGlzLm9wdHMuZXh0cmFIZWFkZXJzO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLndzID1cbiAgICAgICAgICAgICAgICB1c2luZ0Jyb3dzZXJXZWJTb2NrZXQgJiYgIWlzUmVhY3ROYXRpdmVcbiAgICAgICAgICAgICAgICAgICAgPyBwcm90b2NvbHNcbiAgICAgICAgICAgICAgICAgICAgICAgID8gbmV3IFdlYlNvY2tldCh1cmksIHByb3RvY29scylcbiAgICAgICAgICAgICAgICAgICAgICAgIDogbmV3IFdlYlNvY2tldCh1cmkpXG4gICAgICAgICAgICAgICAgICAgIDogbmV3IFdlYlNvY2tldCh1cmksIHByb3RvY29scywgb3B0cyk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZW1pdFJlc2VydmVkKFwiZXJyb3JcIiwgZXJyKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLndzLmJpbmFyeVR5cGUgPSB0aGlzLnNvY2tldC5iaW5hcnlUeXBlIHx8IGRlZmF1bHRCaW5hcnlUeXBlO1xuICAgICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXJzKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFkZHMgZXZlbnQgbGlzdGVuZXJzIHRvIHRoZSBzb2NrZXRcbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgYWRkRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgICAgIHRoaXMud3Mub25vcGVuID0gKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMub3B0cy5hdXRvVW5yZWYpIHtcbiAgICAgICAgICAgICAgICB0aGlzLndzLl9zb2NrZXQudW5yZWYoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMub25PcGVuKCk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMud3Mub25jbG9zZSA9IChjbG9zZUV2ZW50KSA9PiB0aGlzLm9uQ2xvc2Uoe1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwid2Vic29ja2V0IGNvbm5lY3Rpb24gY2xvc2VkXCIsXG4gICAgICAgICAgICBjb250ZXh0OiBjbG9zZUV2ZW50LFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy53cy5vbm1lc3NhZ2UgPSAoZXYpID0+IHRoaXMub25EYXRhKGV2LmRhdGEpO1xuICAgICAgICB0aGlzLndzLm9uZXJyb3IgPSAoZSkgPT4gdGhpcy5vbkVycm9yKFwid2Vic29ja2V0IGVycm9yXCIsIGUpO1xuICAgIH1cbiAgICB3cml0ZShwYWNrZXRzKSB7XG4gICAgICAgIHRoaXMud3JpdGFibGUgPSBmYWxzZTtcbiAgICAgICAgLy8gZW5jb2RlUGFja2V0IGVmZmljaWVudCBhcyBpdCB1c2VzIFdTIGZyYW1pbmdcbiAgICAgICAgLy8gbm8gbmVlZCBmb3IgZW5jb2RlUGF5bG9hZFxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhY2tldHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHBhY2tldCA9IHBhY2tldHNbaV07XG4gICAgICAgICAgICBjb25zdCBsYXN0UGFja2V0ID0gaSA9PT0gcGFja2V0cy5sZW5ndGggLSAxO1xuICAgICAgICAgICAgZW5jb2RlUGFja2V0KHBhY2tldCwgdGhpcy5zdXBwb3J0c0JpbmFyeSwgKGRhdGEpID0+IHtcbiAgICAgICAgICAgICAgICAvLyBhbHdheXMgY3JlYXRlIGEgbmV3IG9iamVjdCAoR0gtNDM3KVxuICAgICAgICAgICAgICAgIGNvbnN0IG9wdHMgPSB7fTtcbiAgICAgICAgICAgICAgICBpZiAoIXVzaW5nQnJvd3NlcldlYlNvY2tldCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocGFja2V0Lm9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdHMuY29tcHJlc3MgPSBwYWNrZXQub3B0aW9ucy5jb21wcmVzcztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRzLnBlck1lc3NhZ2VEZWZsYXRlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBsZW4gPSBcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgICAgICAgICAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBkYXRhID8gQnVmZmVyLmJ5dGVMZW5ndGgoZGF0YSkgOiBkYXRhLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsZW4gPCB0aGlzLm9wdHMucGVyTWVzc2FnZURlZmxhdGUudGhyZXNob2xkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0cy5jb21wcmVzcyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIFNvbWV0aW1lcyB0aGUgd2Vic29ja2V0IGhhcyBhbHJlYWR5IGJlZW4gY2xvc2VkIGJ1dCB0aGUgYnJvd3NlciBkaWRuJ3RcbiAgICAgICAgICAgICAgICAvLyBoYXZlIGEgY2hhbmNlIG9mIGluZm9ybWluZyB1cyBhYm91dCBpdCB5ZXQsIGluIHRoYXQgY2FzZSBzZW5kIHdpbGxcbiAgICAgICAgICAgICAgICAvLyB0aHJvdyBhbiBlcnJvclxuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh1c2luZ0Jyb3dzZXJXZWJTb2NrZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFR5cGVFcnJvciBpcyB0aHJvd24gd2hlbiBwYXNzaW5nIHRoZSBzZWNvbmQgYXJndW1lbnQgb24gU2FmYXJpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLndzLnNlbmQoZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLndzLnNlbmQoZGF0YSwgb3B0cyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGxhc3RQYWNrZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gZmFrZSBkcmFpblxuICAgICAgICAgICAgICAgICAgICAvLyBkZWZlciB0byBuZXh0IHRpY2sgdG8gYWxsb3cgU29ja2V0IHRvIGNsZWFyIHdyaXRlQnVmZmVyXG4gICAgICAgICAgICAgICAgICAgIG5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMud3JpdGFibGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0UmVzZXJ2ZWQoXCJkcmFpblwiKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgdGhpcy5zZXRUaW1lb3V0Rm4pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGRvQ2xvc2UoKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy53cyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgdGhpcy53cy5jbG9zZSgpO1xuICAgICAgICAgICAgdGhpcy53cyA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogR2VuZXJhdGVzIHVyaSBmb3IgY29ubmVjdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdXJpKCkge1xuICAgICAgICBsZXQgcXVlcnkgPSB0aGlzLnF1ZXJ5IHx8IHt9O1xuICAgICAgICBjb25zdCBzY2hlbWEgPSB0aGlzLm9wdHMuc2VjdXJlID8gXCJ3c3NcIiA6IFwid3NcIjtcbiAgICAgICAgbGV0IHBvcnQgPSBcIlwiO1xuICAgICAgICAvLyBhdm9pZCBwb3J0IGlmIGRlZmF1bHQgZm9yIHNjaGVtYVxuICAgICAgICBpZiAodGhpcy5vcHRzLnBvcnQgJiZcbiAgICAgICAgICAgICgoXCJ3c3NcIiA9PT0gc2NoZW1hICYmIE51bWJlcih0aGlzLm9wdHMucG9ydCkgIT09IDQ0MykgfHxcbiAgICAgICAgICAgICAgICAoXCJ3c1wiID09PSBzY2hlbWEgJiYgTnVtYmVyKHRoaXMub3B0cy5wb3J0KSAhPT0gODApKSkge1xuICAgICAgICAgICAgcG9ydCA9IFwiOlwiICsgdGhpcy5vcHRzLnBvcnQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gYXBwZW5kIHRpbWVzdGFtcCB0byBVUklcbiAgICAgICAgaWYgKHRoaXMub3B0cy50aW1lc3RhbXBSZXF1ZXN0cykge1xuICAgICAgICAgICAgcXVlcnlbdGhpcy5vcHRzLnRpbWVzdGFtcFBhcmFtXSA9IHllYXN0KCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gY29tbXVuaWNhdGUgYmluYXJ5IHN1cHBvcnQgY2FwYWJpbGl0aWVzXG4gICAgICAgIGlmICghdGhpcy5zdXBwb3J0c0JpbmFyeSkge1xuICAgICAgICAgICAgcXVlcnkuYjY0ID0gMTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBlbmNvZGVkUXVlcnkgPSBlbmNvZGUocXVlcnkpO1xuICAgICAgICBjb25zdCBpcHY2ID0gdGhpcy5vcHRzLmhvc3RuYW1lLmluZGV4T2YoXCI6XCIpICE9PSAtMTtcbiAgICAgICAgcmV0dXJuIChzY2hlbWEgK1xuICAgICAgICAgICAgXCI6Ly9cIiArXG4gICAgICAgICAgICAoaXB2NiA/IFwiW1wiICsgdGhpcy5vcHRzLmhvc3RuYW1lICsgXCJdXCIgOiB0aGlzLm9wdHMuaG9zdG5hbWUpICtcbiAgICAgICAgICAgIHBvcnQgK1xuICAgICAgICAgICAgdGhpcy5vcHRzLnBhdGggK1xuICAgICAgICAgICAgKGVuY29kZWRRdWVyeS5sZW5ndGggPyBcIj9cIiArIGVuY29kZWRRdWVyeSA6IFwiXCIpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRmVhdHVyZSBkZXRlY3Rpb24gZm9yIFdlYlNvY2tldC5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59IHdoZXRoZXIgdGhpcyB0cmFuc3BvcnQgaXMgYXZhaWxhYmxlLlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgY2hlY2soKSB7XG4gICAgICAgIHJldHVybiAhIVdlYlNvY2tldDtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBQb2xsaW5nIH0gZnJvbSBcIi4vcG9sbGluZy5qc1wiO1xuaW1wb3J0IHsgV1MgfSBmcm9tIFwiLi93ZWJzb2NrZXQuanNcIjtcbmV4cG9ydCBjb25zdCB0cmFuc3BvcnRzID0ge1xuICAgIHdlYnNvY2tldDogV1MsXG4gICAgcG9sbGluZzogUG9sbGluZyxcbn07XG4iLCIvLyBpbXBvcnRlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9nYWxrbi9wYXJzZXVyaVxuLyoqXG4gKiBQYXJzZXMgYSBVUklcbiAqXG4gKiBOb3RlOiB3ZSBjb3VsZCBhbHNvIGhhdmUgdXNlZCB0aGUgYnVpbHQtaW4gVVJMIG9iamVjdCwgYnV0IGl0IGlzbid0IHN1cHBvcnRlZCBvbiBhbGwgcGxhdGZvcm1zLlxuICpcbiAqIFNlZTpcbiAqIC0gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1VSTFxuICogLSBodHRwczovL2Nhbml1c2UuY29tL3VybFxuICogLSBodHRwczovL3d3dy5yZmMtZWRpdG9yLm9yZy9yZmMvcmZjMzk4NiNhcHBlbmRpeC1CXG4gKlxuICogSGlzdG9yeSBvZiB0aGUgcGFyc2UoKSBtZXRob2Q6XG4gKiAtIGZpcnN0IGNvbW1pdDogaHR0cHM6Ly9naXRodWIuY29tL3NvY2tldGlvL3NvY2tldC5pby1jbGllbnQvY29tbWl0LzRlZTFkNWQ5NGIzOTA2YTljMDUyYjQ1OWYxYTgxOGIxNWYzOGY5MWNcbiAqIC0gZXhwb3J0IGludG8gaXRzIG93biBtb2R1bGU6IGh0dHBzOi8vZ2l0aHViLmNvbS9zb2NrZXRpby9lbmdpbmUuaW8tY2xpZW50L2NvbW1pdC9kZTJjNTYxZTQ1NjRlZmViNzhmMWJkYjFiYTM5ZWY4MWIyODIyY2IzXG4gKiAtIHJlaW1wb3J0OiBodHRwczovL2dpdGh1Yi5jb20vc29ja2V0aW8vZW5naW5lLmlvLWNsaWVudC9jb21taXQvZGYzMjI3N2MzZjZkNjIyZWVjNWVkMDlmNDkzY2FlM2YzMzkxZDI0MlxuICpcbiAqIEBhdXRob3IgU3RldmVuIExldml0aGFuIDxzdGV2ZW5sZXZpdGhhbi5jb20+IChNSVQgbGljZW5zZSlcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5jb25zdCByZSA9IC9eKD86KD8hW146QFxcLz8jXSs6W146QFxcL10qQCkoaHR0cHxodHRwc3x3c3x3c3MpOlxcL1xcLyk/KCg/OigoW146QFxcLz8jXSopKD86OihbXjpAXFwvPyNdKikpPyk/QCk/KCg/OlthLWYwLTldezAsNH06KXsyLDd9W2EtZjAtOV17MCw0fXxbXjpcXC8/I10qKSg/OjooXFxkKikpPykoKChcXC8oPzpbXj8jXSg/IVtePyNcXC9dKlxcLltePyNcXC8uXSsoPzpbPyNdfCQpKSkqXFwvPyk/KFtePyNcXC9dKikpKD86XFw/KFteI10qKSk/KD86IyguKikpPykvO1xuY29uc3QgcGFydHMgPSBbXG4gICAgJ3NvdXJjZScsICdwcm90b2NvbCcsICdhdXRob3JpdHknLCAndXNlckluZm8nLCAndXNlcicsICdwYXNzd29yZCcsICdob3N0JywgJ3BvcnQnLCAncmVsYXRpdmUnLCAncGF0aCcsICdkaXJlY3RvcnknLCAnZmlsZScsICdxdWVyeScsICdhbmNob3InXG5dO1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlKHN0cikge1xuICAgIGNvbnN0IHNyYyA9IHN0ciwgYiA9IHN0ci5pbmRleE9mKCdbJyksIGUgPSBzdHIuaW5kZXhPZignXScpO1xuICAgIGlmIChiICE9IC0xICYmIGUgIT0gLTEpIHtcbiAgICAgICAgc3RyID0gc3RyLnN1YnN0cmluZygwLCBiKSArIHN0ci5zdWJzdHJpbmcoYiwgZSkucmVwbGFjZSgvOi9nLCAnOycpICsgc3RyLnN1YnN0cmluZyhlLCBzdHIubGVuZ3RoKTtcbiAgICB9XG4gICAgbGV0IG0gPSByZS5leGVjKHN0ciB8fCAnJyksIHVyaSA9IHt9LCBpID0gMTQ7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgICB1cmlbcGFydHNbaV1dID0gbVtpXSB8fCAnJztcbiAgICB9XG4gICAgaWYgKGIgIT0gLTEgJiYgZSAhPSAtMSkge1xuICAgICAgICB1cmkuc291cmNlID0gc3JjO1xuICAgICAgICB1cmkuaG9zdCA9IHVyaS5ob3N0LnN1YnN0cmluZygxLCB1cmkuaG9zdC5sZW5ndGggLSAxKS5yZXBsYWNlKC87L2csICc6Jyk7XG4gICAgICAgIHVyaS5hdXRob3JpdHkgPSB1cmkuYXV0aG9yaXR5LnJlcGxhY2UoJ1snLCAnJykucmVwbGFjZSgnXScsICcnKS5yZXBsYWNlKC87L2csICc6Jyk7XG4gICAgICAgIHVyaS5pcHY2dXJpID0gdHJ1ZTtcbiAgICB9XG4gICAgdXJpLnBhdGhOYW1lcyA9IHBhdGhOYW1lcyh1cmksIHVyaVsncGF0aCddKTtcbiAgICB1cmkucXVlcnlLZXkgPSBxdWVyeUtleSh1cmksIHVyaVsncXVlcnknXSk7XG4gICAgcmV0dXJuIHVyaTtcbn1cbmZ1bmN0aW9uIHBhdGhOYW1lcyhvYmosIHBhdGgpIHtcbiAgICBjb25zdCByZWd4ID0gL1xcL3syLDl9L2csIG5hbWVzID0gcGF0aC5yZXBsYWNlKHJlZ3gsIFwiL1wiKS5zcGxpdChcIi9cIik7XG4gICAgaWYgKHBhdGguc2xpY2UoMCwgMSkgPT0gJy8nIHx8IHBhdGgubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIG5hbWVzLnNwbGljZSgwLCAxKTtcbiAgICB9XG4gICAgaWYgKHBhdGguc2xpY2UoLTEpID09ICcvJykge1xuICAgICAgICBuYW1lcy5zcGxpY2UobmFtZXMubGVuZ3RoIC0gMSwgMSk7XG4gICAgfVxuICAgIHJldHVybiBuYW1lcztcbn1cbmZ1bmN0aW9uIHF1ZXJ5S2V5KHVyaSwgcXVlcnkpIHtcbiAgICBjb25zdCBkYXRhID0ge307XG4gICAgcXVlcnkucmVwbGFjZSgvKD86XnwmKShbXiY9XSopPT8oW14mXSopL2csIGZ1bmN0aW9uICgkMCwgJDEsICQyKSB7XG4gICAgICAgIGlmICgkMSkge1xuICAgICAgICAgICAgZGF0YVskMV0gPSAkMjtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBkYXRhO1xufVxuIiwiaW1wb3J0IHsgdHJhbnNwb3J0cyB9IGZyb20gXCIuL3RyYW5zcG9ydHMvaW5kZXguanNcIjtcbmltcG9ydCB7IGluc3RhbGxUaW1lckZ1bmN0aW9ucywgYnl0ZUxlbmd0aCB9IGZyb20gXCIuL3V0aWwuanNcIjtcbmltcG9ydCB7IGRlY29kZSB9IGZyb20gXCIuL2NvbnRyaWIvcGFyc2Vxcy5qc1wiO1xuaW1wb3J0IHsgcGFyc2UgfSBmcm9tIFwiLi9jb250cmliL3BhcnNldXJpLmpzXCI7XG5pbXBvcnQgeyBFbWl0dGVyIH0gZnJvbSBcIkBzb2NrZXQuaW8vY29tcG9uZW50LWVtaXR0ZXJcIjtcbmltcG9ydCB7IHByb3RvY29sIH0gZnJvbSBcImVuZ2luZS5pby1wYXJzZXJcIjtcbmV4cG9ydCBjbGFzcyBTb2NrZXQgZXh0ZW5kcyBFbWl0dGVyIHtcbiAgICAvKipcbiAgICAgKiBTb2NrZXQgY29uc3RydWN0b3IuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ3xPYmplY3R9IHVyaSAtIHVyaSBvciBvcHRpb25zXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRpb25zXG4gICAgICovXG4gICAgY29uc3RydWN0b3IodXJpLCBvcHRzID0ge30pIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy53cml0ZUJ1ZmZlciA9IFtdO1xuICAgICAgICBpZiAodXJpICYmIFwib2JqZWN0XCIgPT09IHR5cGVvZiB1cmkpIHtcbiAgICAgICAgICAgIG9wdHMgPSB1cmk7XG4gICAgICAgICAgICB1cmkgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmICh1cmkpIHtcbiAgICAgICAgICAgIHVyaSA9IHBhcnNlKHVyaSk7XG4gICAgICAgICAgICBvcHRzLmhvc3RuYW1lID0gdXJpLmhvc3Q7XG4gICAgICAgICAgICBvcHRzLnNlY3VyZSA9IHVyaS5wcm90b2NvbCA9PT0gXCJodHRwc1wiIHx8IHVyaS5wcm90b2NvbCA9PT0gXCJ3c3NcIjtcbiAgICAgICAgICAgIG9wdHMucG9ydCA9IHVyaS5wb3J0O1xuICAgICAgICAgICAgaWYgKHVyaS5xdWVyeSlcbiAgICAgICAgICAgICAgICBvcHRzLnF1ZXJ5ID0gdXJpLnF1ZXJ5O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG9wdHMuaG9zdCkge1xuICAgICAgICAgICAgb3B0cy5ob3N0bmFtZSA9IHBhcnNlKG9wdHMuaG9zdCkuaG9zdDtcbiAgICAgICAgfVxuICAgICAgICBpbnN0YWxsVGltZXJGdW5jdGlvbnModGhpcywgb3B0cyk7XG4gICAgICAgIHRoaXMuc2VjdXJlID1cbiAgICAgICAgICAgIG51bGwgIT0gb3B0cy5zZWN1cmVcbiAgICAgICAgICAgICAgICA/IG9wdHMuc2VjdXJlXG4gICAgICAgICAgICAgICAgOiB0eXBlb2YgbG9jYXRpb24gIT09IFwidW5kZWZpbmVkXCIgJiYgXCJodHRwczpcIiA9PT0gbG9jYXRpb24ucHJvdG9jb2w7XG4gICAgICAgIGlmIChvcHRzLmhvc3RuYW1lICYmICFvcHRzLnBvcnQpIHtcbiAgICAgICAgICAgIC8vIGlmIG5vIHBvcnQgaXMgc3BlY2lmaWVkIG1hbnVhbGx5LCB1c2UgdGhlIHByb3RvY29sIGRlZmF1bHRcbiAgICAgICAgICAgIG9wdHMucG9ydCA9IHRoaXMuc2VjdXJlID8gXCI0NDNcIiA6IFwiODBcIjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmhvc3RuYW1lID1cbiAgICAgICAgICAgIG9wdHMuaG9zdG5hbWUgfHxcbiAgICAgICAgICAgICAgICAodHlwZW9mIGxvY2F0aW9uICE9PSBcInVuZGVmaW5lZFwiID8gbG9jYXRpb24uaG9zdG5hbWUgOiBcImxvY2FsaG9zdFwiKTtcbiAgICAgICAgdGhpcy5wb3J0ID1cbiAgICAgICAgICAgIG9wdHMucG9ydCB8fFxuICAgICAgICAgICAgICAgICh0eXBlb2YgbG9jYXRpb24gIT09IFwidW5kZWZpbmVkXCIgJiYgbG9jYXRpb24ucG9ydFxuICAgICAgICAgICAgICAgICAgICA/IGxvY2F0aW9uLnBvcnRcbiAgICAgICAgICAgICAgICAgICAgOiB0aGlzLnNlY3VyZVxuICAgICAgICAgICAgICAgICAgICAgICAgPyBcIjQ0M1wiXG4gICAgICAgICAgICAgICAgICAgICAgICA6IFwiODBcIik7XG4gICAgICAgIHRoaXMudHJhbnNwb3J0cyA9IG9wdHMudHJhbnNwb3J0cyB8fCBbXCJwb2xsaW5nXCIsIFwid2Vic29ja2V0XCJdO1xuICAgICAgICB0aGlzLndyaXRlQnVmZmVyID0gW107XG4gICAgICAgIHRoaXMucHJldkJ1ZmZlckxlbiA9IDA7XG4gICAgICAgIHRoaXMub3B0cyA9IE9iamVjdC5hc3NpZ24oe1xuICAgICAgICAgICAgcGF0aDogXCIvZW5naW5lLmlvXCIsXG4gICAgICAgICAgICBhZ2VudDogZmFsc2UsXG4gICAgICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IGZhbHNlLFxuICAgICAgICAgICAgdXBncmFkZTogdHJ1ZSxcbiAgICAgICAgICAgIHRpbWVzdGFtcFBhcmFtOiBcInRcIixcbiAgICAgICAgICAgIHJlbWVtYmVyVXBncmFkZTogZmFsc2UsXG4gICAgICAgICAgICBhZGRUcmFpbGluZ1NsYXNoOiB0cnVlLFxuICAgICAgICAgICAgcmVqZWN0VW5hdXRob3JpemVkOiB0cnVlLFxuICAgICAgICAgICAgcGVyTWVzc2FnZURlZmxhdGU6IHtcbiAgICAgICAgICAgICAgICB0aHJlc2hvbGQ6IDEwMjQsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdHJhbnNwb3J0T3B0aW9uczoge30sXG4gICAgICAgICAgICBjbG9zZU9uQmVmb3JldW5sb2FkOiB0cnVlLFxuICAgICAgICB9LCBvcHRzKTtcbiAgICAgICAgdGhpcy5vcHRzLnBhdGggPVxuICAgICAgICAgICAgdGhpcy5vcHRzLnBhdGgucmVwbGFjZSgvXFwvJC8sIFwiXCIpICtcbiAgICAgICAgICAgICAgICAodGhpcy5vcHRzLmFkZFRyYWlsaW5nU2xhc2ggPyBcIi9cIiA6IFwiXCIpO1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMub3B0cy5xdWVyeSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgdGhpcy5vcHRzLnF1ZXJ5ID0gZGVjb2RlKHRoaXMub3B0cy5xdWVyeSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gc2V0IG9uIGhhbmRzaGFrZVxuICAgICAgICB0aGlzLmlkID0gbnVsbDtcbiAgICAgICAgdGhpcy51cGdyYWRlcyA9IG51bGw7XG4gICAgICAgIHRoaXMucGluZ0ludGVydmFsID0gbnVsbDtcbiAgICAgICAgdGhpcy5waW5nVGltZW91dCA9IG51bGw7XG4gICAgICAgIC8vIHNldCBvbiBoZWFydGJlYXRcbiAgICAgICAgdGhpcy5waW5nVGltZW91dFRpbWVyID0gbnVsbDtcbiAgICAgICAgaWYgKHR5cGVvZiBhZGRFdmVudExpc3RlbmVyID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdHMuY2xvc2VPbkJlZm9yZXVubG9hZCkge1xuICAgICAgICAgICAgICAgIC8vIEZpcmVmb3ggY2xvc2VzIHRoZSBjb25uZWN0aW9uIHdoZW4gdGhlIFwiYmVmb3JldW5sb2FkXCIgZXZlbnQgaXMgZW1pdHRlZCBidXQgbm90IENocm9tZS4gVGhpcyBldmVudCBsaXN0ZW5lclxuICAgICAgICAgICAgICAgIC8vIGVuc3VyZXMgZXZlcnkgYnJvd3NlciBiZWhhdmVzIHRoZSBzYW1lIChubyBcImRpc2Nvbm5lY3RcIiBldmVudCBhdCB0aGUgU29ja2V0LklPIGxldmVsIHdoZW4gdGhlIHBhZ2UgaXNcbiAgICAgICAgICAgICAgICAvLyBjbG9zZWQvcmVsb2FkZWQpXG4gICAgICAgICAgICAgICAgdGhpcy5iZWZvcmV1bmxvYWRFdmVudExpc3RlbmVyID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy50cmFuc3BvcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNpbGVudGx5IGNsb3NlIHRoZSB0cmFuc3BvcnRcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudHJhbnNwb3J0LnJlbW92ZUFsbExpc3RlbmVycygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50cmFuc3BvcnQuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcihcImJlZm9yZXVubG9hZFwiLCB0aGlzLmJlZm9yZXVubG9hZEV2ZW50TGlzdGVuZXIsIGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLmhvc3RuYW1lICE9PSBcImxvY2FsaG9zdFwiKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vZmZsaW5lRXZlbnRMaXN0ZW5lciA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vbkNsb3NlKFwidHJhbnNwb3J0IGNsb3NlXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIm5ldHdvcmsgY29ubmVjdGlvbiBsb3N0XCIsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcihcIm9mZmxpbmVcIiwgdGhpcy5vZmZsaW5lRXZlbnRMaXN0ZW5lciwgZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMub3BlbigpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIHRyYW5zcG9ydCBvZiB0aGUgZ2l2ZW4gdHlwZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIC0gdHJhbnNwb3J0IG5hbWVcbiAgICAgKiBAcmV0dXJuIHtUcmFuc3BvcnR9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBjcmVhdGVUcmFuc3BvcnQobmFtZSkge1xuICAgICAgICBjb25zdCBxdWVyeSA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMub3B0cy5xdWVyeSk7XG4gICAgICAgIC8vIGFwcGVuZCBlbmdpbmUuaW8gcHJvdG9jb2wgaWRlbnRpZmllclxuICAgICAgICBxdWVyeS5FSU8gPSBwcm90b2NvbDtcbiAgICAgICAgLy8gdHJhbnNwb3J0IG5hbWVcbiAgICAgICAgcXVlcnkudHJhbnNwb3J0ID0gbmFtZTtcbiAgICAgICAgLy8gc2Vzc2lvbiBpZCBpZiB3ZSBhbHJlYWR5IGhhdmUgb25lXG4gICAgICAgIGlmICh0aGlzLmlkKVxuICAgICAgICAgICAgcXVlcnkuc2lkID0gdGhpcy5pZDtcbiAgICAgICAgY29uc3Qgb3B0cyA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMub3B0cy50cmFuc3BvcnRPcHRpb25zW25hbWVdLCB0aGlzLm9wdHMsIHtcbiAgICAgICAgICAgIHF1ZXJ5LFxuICAgICAgICAgICAgc29ja2V0OiB0aGlzLFxuICAgICAgICAgICAgaG9zdG5hbWU6IHRoaXMuaG9zdG5hbWUsXG4gICAgICAgICAgICBzZWN1cmU6IHRoaXMuc2VjdXJlLFxuICAgICAgICAgICAgcG9ydDogdGhpcy5wb3J0LFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG5ldyB0cmFuc3BvcnRzW25hbWVdKG9wdHMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyB0cmFuc3BvcnQgdG8gdXNlIGFuZCBzdGFydHMgcHJvYmUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIG9wZW4oKSB7XG4gICAgICAgIGxldCB0cmFuc3BvcnQ7XG4gICAgICAgIGlmICh0aGlzLm9wdHMucmVtZW1iZXJVcGdyYWRlICYmXG4gICAgICAgICAgICBTb2NrZXQucHJpb3JXZWJzb2NrZXRTdWNjZXNzICYmXG4gICAgICAgICAgICB0aGlzLnRyYW5zcG9ydHMuaW5kZXhPZihcIndlYnNvY2tldFwiKSAhPT0gLTEpIHtcbiAgICAgICAgICAgIHRyYW5zcG9ydCA9IFwid2Vic29ja2V0XCI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoMCA9PT0gdGhpcy50cmFuc3BvcnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgLy8gRW1pdCBlcnJvciBvbiBuZXh0IHRpY2sgc28gaXQgY2FuIGJlIGxpc3RlbmVkIHRvXG4gICAgICAgICAgICB0aGlzLnNldFRpbWVvdXRGbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0UmVzZXJ2ZWQoXCJlcnJvclwiLCBcIk5vIHRyYW5zcG9ydHMgYXZhaWxhYmxlXCIpO1xuICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0cmFuc3BvcnQgPSB0aGlzLnRyYW5zcG9ydHNbMF07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZWFkeVN0YXRlID0gXCJvcGVuaW5nXCI7XG4gICAgICAgIC8vIFJldHJ5IHdpdGggdGhlIG5leHQgdHJhbnNwb3J0IGlmIHRoZSB0cmFuc3BvcnQgaXMgZGlzYWJsZWQgKGpzb25wOiBmYWxzZSlcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRyYW5zcG9ydCA9IHRoaXMuY3JlYXRlVHJhbnNwb3J0KHRyYW5zcG9ydCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHRoaXMudHJhbnNwb3J0cy5zaGlmdCgpO1xuICAgICAgICAgICAgdGhpcy5vcGVuKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdHJhbnNwb3J0Lm9wZW4oKTtcbiAgICAgICAgdGhpcy5zZXRUcmFuc3BvcnQodHJhbnNwb3J0KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgY3VycmVudCB0cmFuc3BvcnQuIERpc2FibGVzIHRoZSBleGlzdGluZyBvbmUgKGlmIGFueSkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHNldFRyYW5zcG9ydCh0cmFuc3BvcnQpIHtcbiAgICAgICAgaWYgKHRoaXMudHJhbnNwb3J0KSB7XG4gICAgICAgICAgICB0aGlzLnRyYW5zcG9ydC5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBzZXQgdXAgdHJhbnNwb3J0XG4gICAgICAgIHRoaXMudHJhbnNwb3J0ID0gdHJhbnNwb3J0O1xuICAgICAgICAvLyBzZXQgdXAgdHJhbnNwb3J0IGxpc3RlbmVyc1xuICAgICAgICB0cmFuc3BvcnRcbiAgICAgICAgICAgIC5vbihcImRyYWluXCIsIHRoaXMub25EcmFpbi5iaW5kKHRoaXMpKVxuICAgICAgICAgICAgLm9uKFwicGFja2V0XCIsIHRoaXMub25QYWNrZXQuYmluZCh0aGlzKSlcbiAgICAgICAgICAgIC5vbihcImVycm9yXCIsIHRoaXMub25FcnJvci5iaW5kKHRoaXMpKVxuICAgICAgICAgICAgLm9uKFwiY2xvc2VcIiwgKHJlYXNvbikgPT4gdGhpcy5vbkNsb3NlKFwidHJhbnNwb3J0IGNsb3NlXCIsIHJlYXNvbikpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQcm9iZXMgYSB0cmFuc3BvcnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gbmFtZSAtIHRyYW5zcG9ydCBuYW1lXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBwcm9iZShuYW1lKSB7XG4gICAgICAgIGxldCB0cmFuc3BvcnQgPSB0aGlzLmNyZWF0ZVRyYW5zcG9ydChuYW1lKTtcbiAgICAgICAgbGV0IGZhaWxlZCA9IGZhbHNlO1xuICAgICAgICBTb2NrZXQucHJpb3JXZWJzb2NrZXRTdWNjZXNzID0gZmFsc2U7XG4gICAgICAgIGNvbnN0IG9uVHJhbnNwb3J0T3BlbiA9ICgpID0+IHtcbiAgICAgICAgICAgIGlmIChmYWlsZWQpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgdHJhbnNwb3J0LnNlbmQoW3sgdHlwZTogXCJwaW5nXCIsIGRhdGE6IFwicHJvYmVcIiB9XSk7XG4gICAgICAgICAgICB0cmFuc3BvcnQub25jZShcInBhY2tldFwiLCAobXNnKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGZhaWxlZClcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIGlmIChcInBvbmdcIiA9PT0gbXNnLnR5cGUgJiYgXCJwcm9iZVwiID09PSBtc2cuZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZ3JhZGluZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdFJlc2VydmVkKFwidXBncmFkaW5nXCIsIHRyYW5zcG9ydCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghdHJhbnNwb3J0KVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICBTb2NrZXQucHJpb3JXZWJzb2NrZXRTdWNjZXNzID0gXCJ3ZWJzb2NrZXRcIiA9PT0gdHJhbnNwb3J0Lm5hbWU7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudHJhbnNwb3J0LnBhdXNlKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmYWlsZWQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFwiY2xvc2VkXCIgPT09IHRoaXMucmVhZHlTdGF0ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICBjbGVhbnVwKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFRyYW5zcG9ydCh0cmFuc3BvcnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNwb3J0LnNlbmQoW3sgdHlwZTogXCJ1cGdyYWRlXCIgfV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0UmVzZXJ2ZWQoXCJ1cGdyYWRlXCIsIHRyYW5zcG9ydCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc3BvcnQgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51cGdyYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZmx1c2goKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBlcnIgPSBuZXcgRXJyb3IoXCJwcm9iZSBlcnJvclwiKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgICAgICAgICBlcnIudHJhbnNwb3J0ID0gdHJhbnNwb3J0Lm5hbWU7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdFJlc2VydmVkKFwidXBncmFkZUVycm9yXCIsIGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIGZ1bmN0aW9uIGZyZWV6ZVRyYW5zcG9ydCgpIHtcbiAgICAgICAgICAgIGlmIChmYWlsZWQpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgLy8gQW55IGNhbGxiYWNrIGNhbGxlZCBieSB0cmFuc3BvcnQgc2hvdWxkIGJlIGlnbm9yZWQgc2luY2Ugbm93XG4gICAgICAgICAgICBmYWlsZWQgPSB0cnVlO1xuICAgICAgICAgICAgY2xlYW51cCgpO1xuICAgICAgICAgICAgdHJhbnNwb3J0LmNsb3NlKCk7XG4gICAgICAgICAgICB0cmFuc3BvcnQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIC8vIEhhbmRsZSBhbnkgZXJyb3IgdGhhdCBoYXBwZW5zIHdoaWxlIHByb2JpbmdcbiAgICAgICAgY29uc3Qgb25lcnJvciA9IChlcnIpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGVycm9yID0gbmV3IEVycm9yKFwicHJvYmUgZXJyb3I6IFwiICsgZXJyKTtcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgIGVycm9yLnRyYW5zcG9ydCA9IHRyYW5zcG9ydC5uYW1lO1xuICAgICAgICAgICAgZnJlZXplVHJhbnNwb3J0KCk7XG4gICAgICAgICAgICB0aGlzLmVtaXRSZXNlcnZlZChcInVwZ3JhZGVFcnJvclwiLCBlcnJvcik7XG4gICAgICAgIH07XG4gICAgICAgIGZ1bmN0aW9uIG9uVHJhbnNwb3J0Q2xvc2UoKSB7XG4gICAgICAgICAgICBvbmVycm9yKFwidHJhbnNwb3J0IGNsb3NlZFwiKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBXaGVuIHRoZSBzb2NrZXQgaXMgY2xvc2VkIHdoaWxlIHdlJ3JlIHByb2JpbmdcbiAgICAgICAgZnVuY3Rpb24gb25jbG9zZSgpIHtcbiAgICAgICAgICAgIG9uZXJyb3IoXCJzb2NrZXQgY2xvc2VkXCIpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFdoZW4gdGhlIHNvY2tldCBpcyB1cGdyYWRlZCB3aGlsZSB3ZSdyZSBwcm9iaW5nXG4gICAgICAgIGZ1bmN0aW9uIG9udXBncmFkZSh0bykge1xuICAgICAgICAgICAgaWYgKHRyYW5zcG9ydCAmJiB0by5uYW1lICE9PSB0cmFuc3BvcnQubmFtZSkge1xuICAgICAgICAgICAgICAgIGZyZWV6ZVRyYW5zcG9ydCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIFJlbW92ZSBhbGwgbGlzdGVuZXJzIG9uIHRoZSB0cmFuc3BvcnQgYW5kIG9uIHNlbGZcbiAgICAgICAgY29uc3QgY2xlYW51cCA9ICgpID0+IHtcbiAgICAgICAgICAgIHRyYW5zcG9ydC5yZW1vdmVMaXN0ZW5lcihcIm9wZW5cIiwgb25UcmFuc3BvcnRPcGVuKTtcbiAgICAgICAgICAgIHRyYW5zcG9ydC5yZW1vdmVMaXN0ZW5lcihcImVycm9yXCIsIG9uZXJyb3IpO1xuICAgICAgICAgICAgdHJhbnNwb3J0LnJlbW92ZUxpc3RlbmVyKFwiY2xvc2VcIiwgb25UcmFuc3BvcnRDbG9zZSk7XG4gICAgICAgICAgICB0aGlzLm9mZihcImNsb3NlXCIsIG9uY2xvc2UpO1xuICAgICAgICAgICAgdGhpcy5vZmYoXCJ1cGdyYWRpbmdcIiwgb251cGdyYWRlKTtcbiAgICAgICAgfTtcbiAgICAgICAgdHJhbnNwb3J0Lm9uY2UoXCJvcGVuXCIsIG9uVHJhbnNwb3J0T3Blbik7XG4gICAgICAgIHRyYW5zcG9ydC5vbmNlKFwiZXJyb3JcIiwgb25lcnJvcik7XG4gICAgICAgIHRyYW5zcG9ydC5vbmNlKFwiY2xvc2VcIiwgb25UcmFuc3BvcnRDbG9zZSk7XG4gICAgICAgIHRoaXMub25jZShcImNsb3NlXCIsIG9uY2xvc2UpO1xuICAgICAgICB0aGlzLm9uY2UoXCJ1cGdyYWRpbmdcIiwgb251cGdyYWRlKTtcbiAgICAgICAgdHJhbnNwb3J0Lm9wZW4oKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHdoZW4gY29ubmVjdGlvbiBpcyBkZWVtZWQgb3Blbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgb25PcGVuKCkge1xuICAgICAgICB0aGlzLnJlYWR5U3RhdGUgPSBcIm9wZW5cIjtcbiAgICAgICAgU29ja2V0LnByaW9yV2Vic29ja2V0U3VjY2VzcyA9IFwid2Vic29ja2V0XCIgPT09IHRoaXMudHJhbnNwb3J0Lm5hbWU7XG4gICAgICAgIHRoaXMuZW1pdFJlc2VydmVkKFwib3BlblwiKTtcbiAgICAgICAgdGhpcy5mbHVzaCgpO1xuICAgICAgICAvLyB3ZSBjaGVjayBmb3IgYHJlYWR5U3RhdGVgIGluIGNhc2UgYW4gYG9wZW5gXG4gICAgICAgIC8vIGxpc3RlbmVyIGFscmVhZHkgY2xvc2VkIHRoZSBzb2NrZXRcbiAgICAgICAgaWYgKFwib3BlblwiID09PSB0aGlzLnJlYWR5U3RhdGUgJiYgdGhpcy5vcHRzLnVwZ3JhZGUpIHtcbiAgICAgICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgICAgIGNvbnN0IGwgPSB0aGlzLnVwZ3JhZGVzLmxlbmd0aDtcbiAgICAgICAgICAgIGZvciAoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wcm9iZSh0aGlzLnVwZ3JhZGVzW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBIYW5kbGVzIGEgcGFja2V0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBvblBhY2tldChwYWNrZXQpIHtcbiAgICAgICAgaWYgKFwib3BlbmluZ1wiID09PSB0aGlzLnJlYWR5U3RhdGUgfHxcbiAgICAgICAgICAgIFwib3BlblwiID09PSB0aGlzLnJlYWR5U3RhdGUgfHxcbiAgICAgICAgICAgIFwiY2xvc2luZ1wiID09PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICAgICAgICAgIHRoaXMuZW1pdFJlc2VydmVkKFwicGFja2V0XCIsIHBhY2tldCk7XG4gICAgICAgICAgICAvLyBTb2NrZXQgaXMgbGl2ZSAtIGFueSBwYWNrZXQgY291bnRzXG4gICAgICAgICAgICB0aGlzLmVtaXRSZXNlcnZlZChcImhlYXJ0YmVhdFwiKTtcbiAgICAgICAgICAgIHN3aXRjaCAocGFja2V0LnR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlIFwib3BlblwiOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLm9uSGFuZHNoYWtlKEpTT04ucGFyc2UocGFja2V0LmRhdGEpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcInBpbmdcIjpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXNldFBpbmdUaW1lb3V0KCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VuZFBhY2tldChcInBvbmdcIik7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdFJlc2VydmVkKFwicGluZ1wiKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0UmVzZXJ2ZWQoXCJwb25nXCIpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwiZXJyb3JcIjpcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZXJyID0gbmV3IEVycm9yKFwic2VydmVyIGVycm9yXCIpO1xuICAgICAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICAgICAgICAgIGVyci5jb2RlID0gcGFja2V0LmRhdGE7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMub25FcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwibWVzc2FnZVwiOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXRSZXNlcnZlZChcImRhdGFcIiwgcGFja2V0LmRhdGEpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXRSZXNlcnZlZChcIm1lc3NhZ2VcIiwgcGFja2V0LmRhdGEpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgdXBvbiBoYW5kc2hha2UgY29tcGxldGlvbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhIC0gaGFuZHNoYWtlIG9ialxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgb25IYW5kc2hha2UoZGF0YSkge1xuICAgICAgICB0aGlzLmVtaXRSZXNlcnZlZChcImhhbmRzaGFrZVwiLCBkYXRhKTtcbiAgICAgICAgdGhpcy5pZCA9IGRhdGEuc2lkO1xuICAgICAgICB0aGlzLnRyYW5zcG9ydC5xdWVyeS5zaWQgPSBkYXRhLnNpZDtcbiAgICAgICAgdGhpcy51cGdyYWRlcyA9IHRoaXMuZmlsdGVyVXBncmFkZXMoZGF0YS51cGdyYWRlcyk7XG4gICAgICAgIHRoaXMucGluZ0ludGVydmFsID0gZGF0YS5waW5nSW50ZXJ2YWw7XG4gICAgICAgIHRoaXMucGluZ1RpbWVvdXQgPSBkYXRhLnBpbmdUaW1lb3V0O1xuICAgICAgICB0aGlzLm1heFBheWxvYWQgPSBkYXRhLm1heFBheWxvYWQ7XG4gICAgICAgIHRoaXMub25PcGVuKCk7XG4gICAgICAgIC8vIEluIGNhc2Ugb3BlbiBoYW5kbGVyIGNsb3NlcyBzb2NrZXRcbiAgICAgICAgaWYgKFwiY2xvc2VkXCIgPT09IHRoaXMucmVhZHlTdGF0ZSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdGhpcy5yZXNldFBpbmdUaW1lb3V0KCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgYW5kIHJlc2V0cyBwaW5nIHRpbWVvdXQgdGltZXIgYmFzZWQgb24gc2VydmVyIHBpbmdzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICByZXNldFBpbmdUaW1lb3V0KCkge1xuICAgICAgICB0aGlzLmNsZWFyVGltZW91dEZuKHRoaXMucGluZ1RpbWVvdXRUaW1lcik7XG4gICAgICAgIHRoaXMucGluZ1RpbWVvdXRUaW1lciA9IHRoaXMuc2V0VGltZW91dEZuKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMub25DbG9zZShcInBpbmcgdGltZW91dFwiKTtcbiAgICAgICAgfSwgdGhpcy5waW5nSW50ZXJ2YWwgKyB0aGlzLnBpbmdUaW1lb3V0KTtcbiAgICAgICAgaWYgKHRoaXMub3B0cy5hdXRvVW5yZWYpIHtcbiAgICAgICAgICAgIHRoaXMucGluZ1RpbWVvdXRUaW1lci51bnJlZigpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxlZCBvbiBgZHJhaW5gIGV2ZW50XG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIG9uRHJhaW4oKSB7XG4gICAgICAgIHRoaXMud3JpdGVCdWZmZXIuc3BsaWNlKDAsIHRoaXMucHJldkJ1ZmZlckxlbik7XG4gICAgICAgIC8vIHNldHRpbmcgcHJldkJ1ZmZlckxlbiA9IDAgaXMgdmVyeSBpbXBvcnRhbnRcbiAgICAgICAgLy8gZm9yIGV4YW1wbGUsIHdoZW4gdXBncmFkaW5nLCB1cGdyYWRlIHBhY2tldCBpcyBzZW50IG92ZXIsXG4gICAgICAgIC8vIGFuZCBhIG5vbnplcm8gcHJldkJ1ZmZlckxlbiBjb3VsZCBjYXVzZSBwcm9ibGVtcyBvbiBgZHJhaW5gXG4gICAgICAgIHRoaXMucHJldkJ1ZmZlckxlbiA9IDA7XG4gICAgICAgIGlmICgwID09PSB0aGlzLndyaXRlQnVmZmVyLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5lbWl0UmVzZXJ2ZWQoXCJkcmFpblwiKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZmx1c2goKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBGbHVzaCB3cml0ZSBidWZmZXJzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBmbHVzaCgpIHtcbiAgICAgICAgaWYgKFwiY2xvc2VkXCIgIT09IHRoaXMucmVhZHlTdGF0ZSAmJlxuICAgICAgICAgICAgdGhpcy50cmFuc3BvcnQud3JpdGFibGUgJiZcbiAgICAgICAgICAgICF0aGlzLnVwZ3JhZGluZyAmJlxuICAgICAgICAgICAgdGhpcy53cml0ZUJ1ZmZlci5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbnN0IHBhY2tldHMgPSB0aGlzLmdldFdyaXRhYmxlUGFja2V0cygpO1xuICAgICAgICAgICAgdGhpcy50cmFuc3BvcnQuc2VuZChwYWNrZXRzKTtcbiAgICAgICAgICAgIC8vIGtlZXAgdHJhY2sgb2YgY3VycmVudCBsZW5ndGggb2Ygd3JpdGVCdWZmZXJcbiAgICAgICAgICAgIC8vIHNwbGljZSB3cml0ZUJ1ZmZlciBhbmQgY2FsbGJhY2tCdWZmZXIgb24gYGRyYWluYFxuICAgICAgICAgICAgdGhpcy5wcmV2QnVmZmVyTGVuID0gcGFja2V0cy5sZW5ndGg7XG4gICAgICAgICAgICB0aGlzLmVtaXRSZXNlcnZlZChcImZsdXNoXCIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEVuc3VyZSB0aGUgZW5jb2RlZCBzaXplIG9mIHRoZSB3cml0ZUJ1ZmZlciBpcyBiZWxvdyB0aGUgbWF4UGF5bG9hZCB2YWx1ZSBzZW50IGJ5IHRoZSBzZXJ2ZXIgKG9ubHkgZm9yIEhUVFBcbiAgICAgKiBsb25nLXBvbGxpbmcpXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGdldFdyaXRhYmxlUGFja2V0cygpIHtcbiAgICAgICAgY29uc3Qgc2hvdWxkQ2hlY2tQYXlsb2FkU2l6ZSA9IHRoaXMubWF4UGF5bG9hZCAmJlxuICAgICAgICAgICAgdGhpcy50cmFuc3BvcnQubmFtZSA9PT0gXCJwb2xsaW5nXCIgJiZcbiAgICAgICAgICAgIHRoaXMud3JpdGVCdWZmZXIubGVuZ3RoID4gMTtcbiAgICAgICAgaWYgKCFzaG91bGRDaGVja1BheWxvYWRTaXplKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy53cml0ZUJ1ZmZlcjtcbiAgICAgICAgfVxuICAgICAgICBsZXQgcGF5bG9hZFNpemUgPSAxOyAvLyBmaXJzdCBwYWNrZXQgdHlwZVxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMud3JpdGVCdWZmZXIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSB0aGlzLndyaXRlQnVmZmVyW2ldLmRhdGE7XG4gICAgICAgICAgICBpZiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIHBheWxvYWRTaXplICs9IGJ5dGVMZW5ndGgoZGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaSA+IDAgJiYgcGF5bG9hZFNpemUgPiB0aGlzLm1heFBheWxvYWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy53cml0ZUJ1ZmZlci5zbGljZSgwLCBpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBheWxvYWRTaXplICs9IDI7IC8vIHNlcGFyYXRvciArIHBhY2tldCB0eXBlXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMud3JpdGVCdWZmZXI7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNlbmRzIGEgbWVzc2FnZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBtc2cgLSBtZXNzYWdlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIGZ1bmN0aW9uLlxuICAgICAqIEByZXR1cm4ge1NvY2tldH0gZm9yIGNoYWluaW5nLlxuICAgICAqL1xuICAgIHdyaXRlKG1zZywgb3B0aW9ucywgZm4pIHtcbiAgICAgICAgdGhpcy5zZW5kUGFja2V0KFwibWVzc2FnZVwiLCBtc2csIG9wdGlvbnMsIGZuKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHNlbmQobXNnLCBvcHRpb25zLCBmbikge1xuICAgICAgICB0aGlzLnNlbmRQYWNrZXQoXCJtZXNzYWdlXCIsIG1zZywgb3B0aW9ucywgZm4pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2VuZHMgYSBwYWNrZXQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdHlwZTogcGFja2V0IHR5cGUuXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGRhdGEuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gLSBjYWxsYmFjayBmdW5jdGlvbi5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHNlbmRQYWNrZXQodHlwZSwgZGF0YSwgb3B0aW9ucywgZm4pIHtcbiAgICAgICAgaWYgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGRhdGEpIHtcbiAgICAgICAgICAgIGZuID0gZGF0YTtcbiAgICAgICAgICAgIGRhdGEgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIGZuID0gb3B0aW9ucztcbiAgICAgICAgICAgIG9wdGlvbnMgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChcImNsb3NpbmdcIiA9PT0gdGhpcy5yZWFkeVN0YXRlIHx8IFwiY2xvc2VkXCIgPT09IHRoaXMucmVhZHlTdGF0ZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgICAgICBvcHRpb25zLmNvbXByZXNzID0gZmFsc2UgIT09IG9wdGlvbnMuY29tcHJlc3M7XG4gICAgICAgIGNvbnN0IHBhY2tldCA9IHtcbiAgICAgICAgICAgIHR5cGU6IHR5cGUsXG4gICAgICAgICAgICBkYXRhOiBkYXRhLFxuICAgICAgICAgICAgb3B0aW9uczogb3B0aW9ucyxcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5lbWl0UmVzZXJ2ZWQoXCJwYWNrZXRDcmVhdGVcIiwgcGFja2V0KTtcbiAgICAgICAgdGhpcy53cml0ZUJ1ZmZlci5wdXNoKHBhY2tldCk7XG4gICAgICAgIGlmIChmbilcbiAgICAgICAgICAgIHRoaXMub25jZShcImZsdXNoXCIsIGZuKTtcbiAgICAgICAgdGhpcy5mbHVzaCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDbG9zZXMgdGhlIGNvbm5lY3Rpb24uXG4gICAgICovXG4gICAgY2xvc2UoKSB7XG4gICAgICAgIGNvbnN0IGNsb3NlID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5vbkNsb3NlKFwiZm9yY2VkIGNsb3NlXCIpO1xuICAgICAgICAgICAgdGhpcy50cmFuc3BvcnQuY2xvc2UoKTtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgY2xlYW51cEFuZENsb3NlID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5vZmYoXCJ1cGdyYWRlXCIsIGNsZWFudXBBbmRDbG9zZSk7XG4gICAgICAgICAgICB0aGlzLm9mZihcInVwZ3JhZGVFcnJvclwiLCBjbGVhbnVwQW5kQ2xvc2UpO1xuICAgICAgICAgICAgY2xvc2UoKTtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3Qgd2FpdEZvclVwZ3JhZGUgPSAoKSA9PiB7XG4gICAgICAgICAgICAvLyB3YWl0IGZvciB1cGdyYWRlIHRvIGZpbmlzaCBzaW5jZSB3ZSBjYW4ndCBzZW5kIHBhY2tldHMgd2hpbGUgcGF1c2luZyBhIHRyYW5zcG9ydFxuICAgICAgICAgICAgdGhpcy5vbmNlKFwidXBncmFkZVwiLCBjbGVhbnVwQW5kQ2xvc2UpO1xuICAgICAgICAgICAgdGhpcy5vbmNlKFwidXBncmFkZUVycm9yXCIsIGNsZWFudXBBbmRDbG9zZSk7XG4gICAgICAgIH07XG4gICAgICAgIGlmIChcIm9wZW5pbmdcIiA9PT0gdGhpcy5yZWFkeVN0YXRlIHx8IFwib3BlblwiID09PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICAgICAgICAgIHRoaXMucmVhZHlTdGF0ZSA9IFwiY2xvc2luZ1wiO1xuICAgICAgICAgICAgaWYgKHRoaXMud3JpdGVCdWZmZXIubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vbmNlKFwiZHJhaW5cIiwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy51cGdyYWRpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdhaXRGb3JVcGdyYWRlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLnVwZ3JhZGluZykge1xuICAgICAgICAgICAgICAgIHdhaXRGb3JVcGdyYWRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjbG9zZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgdXBvbiB0cmFuc3BvcnQgZXJyb3JcbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgb25FcnJvcihlcnIpIHtcbiAgICAgICAgU29ja2V0LnByaW9yV2Vic29ja2V0U3VjY2VzcyA9IGZhbHNlO1xuICAgICAgICB0aGlzLmVtaXRSZXNlcnZlZChcImVycm9yXCIsIGVycik7XG4gICAgICAgIHRoaXMub25DbG9zZShcInRyYW5zcG9ydCBlcnJvclwiLCBlcnIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgdXBvbiB0cmFuc3BvcnQgY2xvc2UuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIG9uQ2xvc2UocmVhc29uLCBkZXNjcmlwdGlvbikge1xuICAgICAgICBpZiAoXCJvcGVuaW5nXCIgPT09IHRoaXMucmVhZHlTdGF0ZSB8fFxuICAgICAgICAgICAgXCJvcGVuXCIgPT09IHRoaXMucmVhZHlTdGF0ZSB8fFxuICAgICAgICAgICAgXCJjbG9zaW5nXCIgPT09IHRoaXMucmVhZHlTdGF0ZSkge1xuICAgICAgICAgICAgLy8gY2xlYXIgdGltZXJzXG4gICAgICAgICAgICB0aGlzLmNsZWFyVGltZW91dEZuKHRoaXMucGluZ1RpbWVvdXRUaW1lcik7XG4gICAgICAgICAgICAvLyBzdG9wIGV2ZW50IGZyb20gZmlyaW5nIGFnYWluIGZvciB0cmFuc3BvcnRcbiAgICAgICAgICAgIHRoaXMudHJhbnNwb3J0LnJlbW92ZUFsbExpc3RlbmVycyhcImNsb3NlXCIpO1xuICAgICAgICAgICAgLy8gZW5zdXJlIHRyYW5zcG9ydCB3b24ndCBzdGF5IG9wZW5cbiAgICAgICAgICAgIHRoaXMudHJhbnNwb3J0LmNsb3NlKCk7XG4gICAgICAgICAgICAvLyBpZ25vcmUgZnVydGhlciB0cmFuc3BvcnQgY29tbXVuaWNhdGlvblxuICAgICAgICAgICAgdGhpcy50cmFuc3BvcnQucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHJlbW92ZUV2ZW50TGlzdGVuZXIgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgIHJlbW92ZUV2ZW50TGlzdGVuZXIoXCJiZWZvcmV1bmxvYWRcIiwgdGhpcy5iZWZvcmV1bmxvYWRFdmVudExpc3RlbmVyLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm9mZmxpbmVcIiwgdGhpcy5vZmZsaW5lRXZlbnRMaXN0ZW5lciwgZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gc2V0IHJlYWR5IHN0YXRlXG4gICAgICAgICAgICB0aGlzLnJlYWR5U3RhdGUgPSBcImNsb3NlZFwiO1xuICAgICAgICAgICAgLy8gY2xlYXIgc2Vzc2lvbiBpZFxuICAgICAgICAgICAgdGhpcy5pZCA9IG51bGw7XG4gICAgICAgICAgICAvLyBlbWl0IGNsb3NlIGV2ZW50XG4gICAgICAgICAgICB0aGlzLmVtaXRSZXNlcnZlZChcImNsb3NlXCIsIHJlYXNvbiwgZGVzY3JpcHRpb24pO1xuICAgICAgICAgICAgLy8gY2xlYW4gYnVmZmVycyBhZnRlciwgc28gdXNlcnMgY2FuIHN0aWxsXG4gICAgICAgICAgICAvLyBncmFiIHRoZSBidWZmZXJzIG9uIGBjbG9zZWAgZXZlbnRcbiAgICAgICAgICAgIHRoaXMud3JpdGVCdWZmZXIgPSBbXTtcbiAgICAgICAgICAgIHRoaXMucHJldkJ1ZmZlckxlbiA9IDA7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogRmlsdGVycyB1cGdyYWRlcywgcmV0dXJuaW5nIG9ubHkgdGhvc2UgbWF0Y2hpbmcgY2xpZW50IHRyYW5zcG9ydHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0FycmF5fSB1cGdyYWRlcyAtIHNlcnZlciB1cGdyYWRlc1xuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgZmlsdGVyVXBncmFkZXModXBncmFkZXMpIHtcbiAgICAgICAgY29uc3QgZmlsdGVyZWRVcGdyYWRlcyA9IFtdO1xuICAgICAgICBsZXQgaSA9IDA7XG4gICAgICAgIGNvbnN0IGogPSB1cGdyYWRlcy5sZW5ndGg7XG4gICAgICAgIGZvciAoOyBpIDwgajsgaSsrKSB7XG4gICAgICAgICAgICBpZiAofnRoaXMudHJhbnNwb3J0cy5pbmRleE9mKHVwZ3JhZGVzW2ldKSlcbiAgICAgICAgICAgICAgICBmaWx0ZXJlZFVwZ3JhZGVzLnB1c2godXBncmFkZXNbaV0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmaWx0ZXJlZFVwZ3JhZGVzO1xuICAgIH1cbn1cblNvY2tldC5wcm90b2NvbCA9IHByb3RvY29sO1xuIiwiY29uc3Qgd2l0aE5hdGl2ZUFycmF5QnVmZmVyID0gdHlwZW9mIEFycmF5QnVmZmVyID09PSBcImZ1bmN0aW9uXCI7XG5jb25zdCBpc1ZpZXcgPSAob2JqKSA9PiB7XG4gICAgcmV0dXJuIHR5cGVvZiBBcnJheUJ1ZmZlci5pc1ZpZXcgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICA/IEFycmF5QnVmZmVyLmlzVmlldyhvYmopXG4gICAgICAgIDogb2JqLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyO1xufTtcbmNvbnN0IHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbmNvbnN0IHdpdGhOYXRpdmVCbG9iID0gdHlwZW9mIEJsb2IgPT09IFwiZnVuY3Rpb25cIiB8fFxuICAgICh0eXBlb2YgQmxvYiAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgICAgICB0b1N0cmluZy5jYWxsKEJsb2IpID09PSBcIltvYmplY3QgQmxvYkNvbnN0cnVjdG9yXVwiKTtcbmNvbnN0IHdpdGhOYXRpdmVGaWxlID0gdHlwZW9mIEZpbGUgPT09IFwiZnVuY3Rpb25cIiB8fFxuICAgICh0eXBlb2YgRmlsZSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgICAgICB0b1N0cmluZy5jYWxsKEZpbGUpID09PSBcIltvYmplY3QgRmlsZUNvbnN0cnVjdG9yXVwiKTtcbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIG9iaiBpcyBhIEJ1ZmZlciwgYW4gQXJyYXlCdWZmZXIsIGEgQmxvYiBvciBhIEZpbGUuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzQmluYXJ5KG9iaikge1xuICAgIHJldHVybiAoKHdpdGhOYXRpdmVBcnJheUJ1ZmZlciAmJiAob2JqIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIgfHwgaXNWaWV3KG9iaikpKSB8fFxuICAgICAgICAod2l0aE5hdGl2ZUJsb2IgJiYgb2JqIGluc3RhbmNlb2YgQmxvYikgfHxcbiAgICAgICAgKHdpdGhOYXRpdmVGaWxlICYmIG9iaiBpbnN0YW5jZW9mIEZpbGUpKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBoYXNCaW5hcnkob2JqLCB0b0pTT04pIHtcbiAgICBpZiAoIW9iaiB8fCB0eXBlb2Ygb2JqICE9PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKEFycmF5LmlzQXJyYXkob2JqKSkge1xuICAgICAgICBmb3IgKGxldCBpID0gMCwgbCA9IG9iai5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChoYXNCaW5hcnkob2JqW2ldKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGlzQmluYXJ5KG9iaikpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmIChvYmoudG9KU09OICYmXG4gICAgICAgIHR5cGVvZiBvYmoudG9KU09OID09PSBcImZ1bmN0aW9uXCIgJiZcbiAgICAgICAgYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICByZXR1cm4gaGFzQmluYXJ5KG9iai50b0pTT04oKSwgdHJ1ZSk7XG4gICAgfVxuICAgIGZvciAoY29uc3Qga2V5IGluIG9iaikge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSAmJiBoYXNCaW5hcnkob2JqW2tleV0pKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG4iLCJpbXBvcnQgeyBpc0JpbmFyeSB9IGZyb20gXCIuL2lzLWJpbmFyeS5qc1wiO1xuLyoqXG4gKiBSZXBsYWNlcyBldmVyeSBCdWZmZXIgfCBBcnJheUJ1ZmZlciB8IEJsb2IgfCBGaWxlIGluIHBhY2tldCB3aXRoIGEgbnVtYmVyZWQgcGxhY2Vob2xkZXIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBhY2tldCAtIHNvY2tldC5pbyBldmVudCBwYWNrZXRcbiAqIEByZXR1cm4ge09iamVjdH0gd2l0aCBkZWNvbnN0cnVjdGVkIHBhY2tldCBhbmQgbGlzdCBvZiBidWZmZXJzXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWNvbnN0cnVjdFBhY2tldChwYWNrZXQpIHtcbiAgICBjb25zdCBidWZmZXJzID0gW107XG4gICAgY29uc3QgcGFja2V0RGF0YSA9IHBhY2tldC5kYXRhO1xuICAgIGNvbnN0IHBhY2sgPSBwYWNrZXQ7XG4gICAgcGFjay5kYXRhID0gX2RlY29uc3RydWN0UGFja2V0KHBhY2tldERhdGEsIGJ1ZmZlcnMpO1xuICAgIHBhY2suYXR0YWNobWVudHMgPSBidWZmZXJzLmxlbmd0aDsgLy8gbnVtYmVyIG9mIGJpbmFyeSAnYXR0YWNobWVudHMnXG4gICAgcmV0dXJuIHsgcGFja2V0OiBwYWNrLCBidWZmZXJzOiBidWZmZXJzIH07XG59XG5mdW5jdGlvbiBfZGVjb25zdHJ1Y3RQYWNrZXQoZGF0YSwgYnVmZmVycykge1xuICAgIGlmICghZGF0YSlcbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgaWYgKGlzQmluYXJ5KGRhdGEpKSB7XG4gICAgICAgIGNvbnN0IHBsYWNlaG9sZGVyID0geyBfcGxhY2Vob2xkZXI6IHRydWUsIG51bTogYnVmZmVycy5sZW5ndGggfTtcbiAgICAgICAgYnVmZmVycy5wdXNoKGRhdGEpO1xuICAgICAgICByZXR1cm4gcGxhY2Vob2xkZXI7XG4gICAgfVxuICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoZGF0YSkpIHtcbiAgICAgICAgY29uc3QgbmV3RGF0YSA9IG5ldyBBcnJheShkYXRhLmxlbmd0aCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbmV3RGF0YVtpXSA9IF9kZWNvbnN0cnVjdFBhY2tldChkYXRhW2ldLCBidWZmZXJzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3RGF0YTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIGRhdGEgPT09IFwib2JqZWN0XCIgJiYgIShkYXRhIGluc3RhbmNlb2YgRGF0ZSkpIHtcbiAgICAgICAgY29uc3QgbmV3RGF0YSA9IHt9O1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBkYXRhKSB7XG4gICAgICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGRhdGEsIGtleSkpIHtcbiAgICAgICAgICAgICAgICBuZXdEYXRhW2tleV0gPSBfZGVjb25zdHJ1Y3RQYWNrZXQoZGF0YVtrZXldLCBidWZmZXJzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3RGF0YTtcbiAgICB9XG4gICAgcmV0dXJuIGRhdGE7XG59XG4vKipcbiAqIFJlY29uc3RydWN0cyBhIGJpbmFyeSBwYWNrZXQgZnJvbSBpdHMgcGxhY2Vob2xkZXIgcGFja2V0IGFuZCBidWZmZXJzXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBhY2tldCAtIGV2ZW50IHBhY2tldCB3aXRoIHBsYWNlaG9sZGVyc1xuICogQHBhcmFtIHtBcnJheX0gYnVmZmVycyAtIGJpbmFyeSBidWZmZXJzIHRvIHB1dCBpbiBwbGFjZWhvbGRlciBwb3NpdGlvbnNcbiAqIEByZXR1cm4ge09iamVjdH0gcmVjb25zdHJ1Y3RlZCBwYWNrZXRcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlY29uc3RydWN0UGFja2V0KHBhY2tldCwgYnVmZmVycykge1xuICAgIHBhY2tldC5kYXRhID0gX3JlY29uc3RydWN0UGFja2V0KHBhY2tldC5kYXRhLCBidWZmZXJzKTtcbiAgICBkZWxldGUgcGFja2V0LmF0dGFjaG1lbnRzOyAvLyBubyBsb25nZXIgdXNlZnVsXG4gICAgcmV0dXJuIHBhY2tldDtcbn1cbmZ1bmN0aW9uIF9yZWNvbnN0cnVjdFBhY2tldChkYXRhLCBidWZmZXJzKSB7XG4gICAgaWYgKCFkYXRhKVxuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICBpZiAoZGF0YSAmJiBkYXRhLl9wbGFjZWhvbGRlciA9PT0gdHJ1ZSkge1xuICAgICAgICBjb25zdCBpc0luZGV4VmFsaWQgPSB0eXBlb2YgZGF0YS5udW0gPT09IFwibnVtYmVyXCIgJiZcbiAgICAgICAgICAgIGRhdGEubnVtID49IDAgJiZcbiAgICAgICAgICAgIGRhdGEubnVtIDwgYnVmZmVycy5sZW5ndGg7XG4gICAgICAgIGlmIChpc0luZGV4VmFsaWQpIHtcbiAgICAgICAgICAgIHJldHVybiBidWZmZXJzW2RhdGEubnVtXTsgLy8gYXBwcm9wcmlhdGUgYnVmZmVyIChzaG91bGQgYmUgbmF0dXJhbCBvcmRlciBhbnl3YXkpXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbGxlZ2FsIGF0dGFjaG1lbnRzXCIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoZGF0YSkpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBkYXRhW2ldID0gX3JlY29uc3RydWN0UGFja2V0KGRhdGFbaV0sIGJ1ZmZlcnMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBkYXRhID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIGRhdGEpIHtcbiAgICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KSkge1xuICAgICAgICAgICAgICAgIGRhdGFba2V5XSA9IF9yZWNvbnN0cnVjdFBhY2tldChkYXRhW2tleV0sIGJ1ZmZlcnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xufVxuIiwiaW1wb3J0IHsgRW1pdHRlciB9IGZyb20gXCJAc29ja2V0LmlvL2NvbXBvbmVudC1lbWl0dGVyXCI7XG5pbXBvcnQgeyBkZWNvbnN0cnVjdFBhY2tldCwgcmVjb25zdHJ1Y3RQYWNrZXQgfSBmcm9tIFwiLi9iaW5hcnkuanNcIjtcbmltcG9ydCB7IGlzQmluYXJ5LCBoYXNCaW5hcnkgfSBmcm9tIFwiLi9pcy1iaW5hcnkuanNcIjtcbi8qKlxuICogVGhlc2Ugc3RyaW5ncyBtdXN0IG5vdCBiZSB1c2VkIGFzIGV2ZW50IG5hbWVzLCBhcyB0aGV5IGhhdmUgYSBzcGVjaWFsIG1lYW5pbmcuXG4gKi9cbmNvbnN0IFJFU0VSVkVEX0VWRU5UUyA9IFtcbiAgICBcImNvbm5lY3RcIixcbiAgICBcImNvbm5lY3RfZXJyb3JcIixcbiAgICBcImRpc2Nvbm5lY3RcIixcbiAgICBcImRpc2Nvbm5lY3RpbmdcIixcbiAgICBcIm5ld0xpc3RlbmVyXCIsXG4gICAgXCJyZW1vdmVMaXN0ZW5lclwiLCAvLyB1c2VkIGJ5IHRoZSBOb2RlLmpzIEV2ZW50RW1pdHRlclxuXTtcbi8qKlxuICogUHJvdG9jb2wgdmVyc2lvbi5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCBwcm90b2NvbCA9IDU7XG5leHBvcnQgdmFyIFBhY2tldFR5cGU7XG4oZnVuY3Rpb24gKFBhY2tldFR5cGUpIHtcbiAgICBQYWNrZXRUeXBlW1BhY2tldFR5cGVbXCJDT05ORUNUXCJdID0gMF0gPSBcIkNPTk5FQ1RcIjtcbiAgICBQYWNrZXRUeXBlW1BhY2tldFR5cGVbXCJESVNDT05ORUNUXCJdID0gMV0gPSBcIkRJU0NPTk5FQ1RcIjtcbiAgICBQYWNrZXRUeXBlW1BhY2tldFR5cGVbXCJFVkVOVFwiXSA9IDJdID0gXCJFVkVOVFwiO1xuICAgIFBhY2tldFR5cGVbUGFja2V0VHlwZVtcIkFDS1wiXSA9IDNdID0gXCJBQ0tcIjtcbiAgICBQYWNrZXRUeXBlW1BhY2tldFR5cGVbXCJDT05ORUNUX0VSUk9SXCJdID0gNF0gPSBcIkNPTk5FQ1RfRVJST1JcIjtcbiAgICBQYWNrZXRUeXBlW1BhY2tldFR5cGVbXCJCSU5BUllfRVZFTlRcIl0gPSA1XSA9IFwiQklOQVJZX0VWRU5UXCI7XG4gICAgUGFja2V0VHlwZVtQYWNrZXRUeXBlW1wiQklOQVJZX0FDS1wiXSA9IDZdID0gXCJCSU5BUllfQUNLXCI7XG59KShQYWNrZXRUeXBlIHx8IChQYWNrZXRUeXBlID0ge30pKTtcbi8qKlxuICogQSBzb2NrZXQuaW8gRW5jb2RlciBpbnN0YW5jZVxuICovXG5leHBvcnQgY2xhc3MgRW5jb2RlciB7XG4gICAgLyoqXG4gICAgICogRW5jb2RlciBjb25zdHJ1Y3RvclxuICAgICAqXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gcmVwbGFjZXIgLSBjdXN0b20gcmVwbGFjZXIgdG8gcGFzcyBkb3duIHRvIEpTT04ucGFyc2VcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihyZXBsYWNlcikge1xuICAgICAgICB0aGlzLnJlcGxhY2VyID0gcmVwbGFjZXI7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEVuY29kZSBhIHBhY2tldCBhcyBhIHNpbmdsZSBzdHJpbmcgaWYgbm9uLWJpbmFyeSwgb3IgYXMgYVxuICAgICAqIGJ1ZmZlciBzZXF1ZW5jZSwgZGVwZW5kaW5nIG9uIHBhY2tldCB0eXBlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iaiAtIHBhY2tldCBvYmplY3RcbiAgICAgKi9cbiAgICBlbmNvZGUob2JqKSB7XG4gICAgICAgIGlmIChvYmoudHlwZSA9PT0gUGFja2V0VHlwZS5FVkVOVCB8fCBvYmoudHlwZSA9PT0gUGFja2V0VHlwZS5BQ0spIHtcbiAgICAgICAgICAgIGlmIChoYXNCaW5hcnkob2JqKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVuY29kZUFzQmluYXJ5KHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogb2JqLnR5cGUgPT09IFBhY2tldFR5cGUuRVZFTlRcbiAgICAgICAgICAgICAgICAgICAgICAgID8gUGFja2V0VHlwZS5CSU5BUllfRVZFTlRcbiAgICAgICAgICAgICAgICAgICAgICAgIDogUGFja2V0VHlwZS5CSU5BUllfQUNLLFxuICAgICAgICAgICAgICAgICAgICBuc3A6IG9iai5uc3AsXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IG9iai5kYXRhLFxuICAgICAgICAgICAgICAgICAgICBpZDogb2JqLmlkLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbdGhpcy5lbmNvZGVBc1N0cmluZyhvYmopXTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRW5jb2RlIHBhY2tldCBhcyBzdHJpbmcuXG4gICAgICovXG4gICAgZW5jb2RlQXNTdHJpbmcob2JqKSB7XG4gICAgICAgIC8vIGZpcnN0IGlzIHR5cGVcbiAgICAgICAgbGV0IHN0ciA9IFwiXCIgKyBvYmoudHlwZTtcbiAgICAgICAgLy8gYXR0YWNobWVudHMgaWYgd2UgaGF2ZSB0aGVtXG4gICAgICAgIGlmIChvYmoudHlwZSA9PT0gUGFja2V0VHlwZS5CSU5BUllfRVZFTlQgfHxcbiAgICAgICAgICAgIG9iai50eXBlID09PSBQYWNrZXRUeXBlLkJJTkFSWV9BQ0spIHtcbiAgICAgICAgICAgIHN0ciArPSBvYmouYXR0YWNobWVudHMgKyBcIi1cIjtcbiAgICAgICAgfVxuICAgICAgICAvLyBpZiB3ZSBoYXZlIGEgbmFtZXNwYWNlIG90aGVyIHRoYW4gYC9gXG4gICAgICAgIC8vIHdlIGFwcGVuZCBpdCBmb2xsb3dlZCBieSBhIGNvbW1hIGAsYFxuICAgICAgICBpZiAob2JqLm5zcCAmJiBcIi9cIiAhPT0gb2JqLm5zcCkge1xuICAgICAgICAgICAgc3RyICs9IG9iai5uc3AgKyBcIixcIjtcbiAgICAgICAgfVxuICAgICAgICAvLyBpbW1lZGlhdGVseSBmb2xsb3dlZCBieSB0aGUgaWRcbiAgICAgICAgaWYgKG51bGwgIT0gb2JqLmlkKSB7XG4gICAgICAgICAgICBzdHIgKz0gb2JqLmlkO1xuICAgICAgICB9XG4gICAgICAgIC8vIGpzb24gZGF0YVxuICAgICAgICBpZiAobnVsbCAhPSBvYmouZGF0YSkge1xuICAgICAgICAgICAgc3RyICs9IEpTT04uc3RyaW5naWZ5KG9iai5kYXRhLCB0aGlzLnJlcGxhY2VyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3RyO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBFbmNvZGUgcGFja2V0IGFzICdidWZmZXIgc2VxdWVuY2UnIGJ5IHJlbW92aW5nIGJsb2JzLCBhbmRcbiAgICAgKiBkZWNvbnN0cnVjdGluZyBwYWNrZXQgaW50byBvYmplY3Qgd2l0aCBwbGFjZWhvbGRlcnMgYW5kXG4gICAgICogYSBsaXN0IG9mIGJ1ZmZlcnMuXG4gICAgICovXG4gICAgZW5jb2RlQXNCaW5hcnkob2JqKSB7XG4gICAgICAgIGNvbnN0IGRlY29uc3RydWN0aW9uID0gZGVjb25zdHJ1Y3RQYWNrZXQob2JqKTtcbiAgICAgICAgY29uc3QgcGFjayA9IHRoaXMuZW5jb2RlQXNTdHJpbmcoZGVjb25zdHJ1Y3Rpb24ucGFja2V0KTtcbiAgICAgICAgY29uc3QgYnVmZmVycyA9IGRlY29uc3RydWN0aW9uLmJ1ZmZlcnM7XG4gICAgICAgIGJ1ZmZlcnMudW5zaGlmdChwYWNrKTsgLy8gYWRkIHBhY2tldCBpbmZvIHRvIGJlZ2lubmluZyBvZiBkYXRhIGxpc3RcbiAgICAgICAgcmV0dXJuIGJ1ZmZlcnM7IC8vIHdyaXRlIGFsbCB0aGUgYnVmZmVyc1xuICAgIH1cbn1cbi8vIHNlZSBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy84NTExMjgxL2NoZWNrLWlmLWEtdmFsdWUtaXMtYW4tb2JqZWN0LWluLWphdmFzY3JpcHRcbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09IFwiW29iamVjdCBPYmplY3RdXCI7XG59XG4vKipcbiAqIEEgc29ja2V0LmlvIERlY29kZXIgaW5zdGFuY2VcbiAqXG4gKiBAcmV0dXJuIHtPYmplY3R9IGRlY29kZXJcbiAqL1xuZXhwb3J0IGNsYXNzIERlY29kZXIgZXh0ZW5kcyBFbWl0dGVyIHtcbiAgICAvKipcbiAgICAgKiBEZWNvZGVyIGNvbnN0cnVjdG9yXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSByZXZpdmVyIC0gY3VzdG9tIHJldml2ZXIgdG8gcGFzcyBkb3duIHRvIEpTT04uc3RyaW5naWZ5XG4gICAgICovXG4gICAgY29uc3RydWN0b3IocmV2aXZlcikge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLnJldml2ZXIgPSByZXZpdmVyO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZWNvZGVzIGFuIGVuY29kZWQgcGFja2V0IHN0cmluZyBpbnRvIHBhY2tldCBKU09OLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG9iaiAtIGVuY29kZWQgcGFja2V0XG4gICAgICovXG4gICAgYWRkKG9iaikge1xuICAgICAgICBsZXQgcGFja2V0O1xuICAgICAgICBpZiAodHlwZW9mIG9iaiA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgaWYgKHRoaXMucmVjb25zdHJ1Y3Rvcikge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImdvdCBwbGFpbnRleHQgZGF0YSB3aGVuIHJlY29uc3RydWN0aW5nIGEgcGFja2V0XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcGFja2V0ID0gdGhpcy5kZWNvZGVTdHJpbmcob2JqKTtcbiAgICAgICAgICAgIGNvbnN0IGlzQmluYXJ5RXZlbnQgPSBwYWNrZXQudHlwZSA9PT0gUGFja2V0VHlwZS5CSU5BUllfRVZFTlQ7XG4gICAgICAgICAgICBpZiAoaXNCaW5hcnlFdmVudCB8fCBwYWNrZXQudHlwZSA9PT0gUGFja2V0VHlwZS5CSU5BUllfQUNLKSB7XG4gICAgICAgICAgICAgICAgcGFja2V0LnR5cGUgPSBpc0JpbmFyeUV2ZW50ID8gUGFja2V0VHlwZS5FVkVOVCA6IFBhY2tldFR5cGUuQUNLO1xuICAgICAgICAgICAgICAgIC8vIGJpbmFyeSBwYWNrZXQncyBqc29uXG4gICAgICAgICAgICAgICAgdGhpcy5yZWNvbnN0cnVjdG9yID0gbmV3IEJpbmFyeVJlY29uc3RydWN0b3IocGFja2V0KTtcbiAgICAgICAgICAgICAgICAvLyBubyBhdHRhY2htZW50cywgbGFiZWxlZCBiaW5hcnkgYnV0IG5vIGJpbmFyeSBkYXRhIHRvIGZvbGxvd1xuICAgICAgICAgICAgICAgIGlmIChwYWNrZXQuYXR0YWNobWVudHMgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgc3VwZXIuZW1pdFJlc2VydmVkKFwiZGVjb2RlZFwiLCBwYWNrZXQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIG5vbi1iaW5hcnkgZnVsbCBwYWNrZXRcbiAgICAgICAgICAgICAgICBzdXBlci5lbWl0UmVzZXJ2ZWQoXCJkZWNvZGVkXCIsIHBhY2tldCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNCaW5hcnkob2JqKSB8fCBvYmouYmFzZTY0KSB7XG4gICAgICAgICAgICAvLyByYXcgYmluYXJ5IGRhdGFcbiAgICAgICAgICAgIGlmICghdGhpcy5yZWNvbnN0cnVjdG9yKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiZ290IGJpbmFyeSBkYXRhIHdoZW4gbm90IHJlY29uc3RydWN0aW5nIGEgcGFja2V0XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcGFja2V0ID0gdGhpcy5yZWNvbnN0cnVjdG9yLnRha2VCaW5hcnlEYXRhKG9iaik7XG4gICAgICAgICAgICAgICAgaWYgKHBhY2tldCkge1xuICAgICAgICAgICAgICAgICAgICAvLyByZWNlaXZlZCBmaW5hbCBidWZmZXJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWNvbnN0cnVjdG9yID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgc3VwZXIuZW1pdFJlc2VydmVkKFwiZGVjb2RlZFwiLCBwYWNrZXQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVua25vd24gdHlwZTogXCIgKyBvYmopO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERlY29kZSBhIHBhY2tldCBTdHJpbmcgKEpTT04gZGF0YSlcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IHBhY2tldFxuICAgICAqL1xuICAgIGRlY29kZVN0cmluZyhzdHIpIHtcbiAgICAgICAgbGV0IGkgPSAwO1xuICAgICAgICAvLyBsb29rIHVwIHR5cGVcbiAgICAgICAgY29uc3QgcCA9IHtcbiAgICAgICAgICAgIHR5cGU6IE51bWJlcihzdHIuY2hhckF0KDApKSxcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKFBhY2tldFR5cGVbcC50eXBlXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ1bmtub3duIHBhY2tldCB0eXBlIFwiICsgcC50eXBlKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBsb29rIHVwIGF0dGFjaG1lbnRzIGlmIHR5cGUgYmluYXJ5XG4gICAgICAgIGlmIChwLnR5cGUgPT09IFBhY2tldFR5cGUuQklOQVJZX0VWRU5UIHx8XG4gICAgICAgICAgICBwLnR5cGUgPT09IFBhY2tldFR5cGUuQklOQVJZX0FDSykge1xuICAgICAgICAgICAgY29uc3Qgc3RhcnQgPSBpICsgMTtcbiAgICAgICAgICAgIHdoaWxlIChzdHIuY2hhckF0KCsraSkgIT09IFwiLVwiICYmIGkgIT0gc3RyLmxlbmd0aCkgeyB9XG4gICAgICAgICAgICBjb25zdCBidWYgPSBzdHIuc3Vic3RyaW5nKHN0YXJ0LCBpKTtcbiAgICAgICAgICAgIGlmIChidWYgIT0gTnVtYmVyKGJ1ZikgfHwgc3RyLmNoYXJBdChpKSAhPT0gXCItXCIpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbGxlZ2FsIGF0dGFjaG1lbnRzXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcC5hdHRhY2htZW50cyA9IE51bWJlcihidWYpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGxvb2sgdXAgbmFtZXNwYWNlIChpZiBhbnkpXG4gICAgICAgIGlmIChcIi9cIiA9PT0gc3RyLmNoYXJBdChpICsgMSkpIHtcbiAgICAgICAgICAgIGNvbnN0IHN0YXJ0ID0gaSArIDE7XG4gICAgICAgICAgICB3aGlsZSAoKytpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYyA9IHN0ci5jaGFyQXQoaSk7XG4gICAgICAgICAgICAgICAgaWYgKFwiLFwiID09PSBjKVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBpZiAoaSA9PT0gc3RyLmxlbmd0aClcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwLm5zcCA9IHN0ci5zdWJzdHJpbmcoc3RhcnQsIGkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcC5uc3AgPSBcIi9cIjtcbiAgICAgICAgfVxuICAgICAgICAvLyBsb29rIHVwIGlkXG4gICAgICAgIGNvbnN0IG5leHQgPSBzdHIuY2hhckF0KGkgKyAxKTtcbiAgICAgICAgaWYgKFwiXCIgIT09IG5leHQgJiYgTnVtYmVyKG5leHQpID09IG5leHQpIHtcbiAgICAgICAgICAgIGNvbnN0IHN0YXJ0ID0gaSArIDE7XG4gICAgICAgICAgICB3aGlsZSAoKytpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYyA9IHN0ci5jaGFyQXQoaSk7XG4gICAgICAgICAgICAgICAgaWYgKG51bGwgPT0gYyB8fCBOdW1iZXIoYykgIT0gYykge1xuICAgICAgICAgICAgICAgICAgICAtLWk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoaSA9PT0gc3RyLmxlbmd0aClcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwLmlkID0gTnVtYmVyKHN0ci5zdWJzdHJpbmcoc3RhcnQsIGkgKyAxKSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gbG9vayB1cCBqc29uIGRhdGFcbiAgICAgICAgaWYgKHN0ci5jaGFyQXQoKytpKSkge1xuICAgICAgICAgICAgY29uc3QgcGF5bG9hZCA9IHRoaXMudHJ5UGFyc2Uoc3RyLnN1YnN0cihpKSk7XG4gICAgICAgICAgICBpZiAoRGVjb2Rlci5pc1BheWxvYWRWYWxpZChwLnR5cGUsIHBheWxvYWQpKSB7XG4gICAgICAgICAgICAgICAgcC5kYXRhID0gcGF5bG9hZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgcGF5bG9hZFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcDtcbiAgICB9XG4gICAgdHJ5UGFyc2Uoc3RyKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShzdHIsIHRoaXMucmV2aXZlcik7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzdGF0aWMgaXNQYXlsb2FkVmFsaWQodHlwZSwgcGF5bG9hZCkge1xuICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgUGFja2V0VHlwZS5DT05ORUNUOlxuICAgICAgICAgICAgICAgIHJldHVybiBpc09iamVjdChwYXlsb2FkKTtcbiAgICAgICAgICAgIGNhc2UgUGFja2V0VHlwZS5ESVNDT05ORUNUOlxuICAgICAgICAgICAgICAgIHJldHVybiBwYXlsb2FkID09PSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBjYXNlIFBhY2tldFR5cGUuQ09OTkVDVF9FUlJPUjpcbiAgICAgICAgICAgICAgICByZXR1cm4gdHlwZW9mIHBheWxvYWQgPT09IFwic3RyaW5nXCIgfHwgaXNPYmplY3QocGF5bG9hZCk7XG4gICAgICAgICAgICBjYXNlIFBhY2tldFR5cGUuRVZFTlQ6XG4gICAgICAgICAgICBjYXNlIFBhY2tldFR5cGUuQklOQVJZX0VWRU5UOlxuICAgICAgICAgICAgICAgIHJldHVybiAoQXJyYXkuaXNBcnJheShwYXlsb2FkKSAmJlxuICAgICAgICAgICAgICAgICAgICAodHlwZW9mIHBheWxvYWRbMF0gPT09IFwibnVtYmVyXCIgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICh0eXBlb2YgcGF5bG9hZFswXSA9PT0gXCJzdHJpbmdcIiAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJFU0VSVkVEX0VWRU5UUy5pbmRleE9mKHBheWxvYWRbMF0pID09PSAtMSkpKTtcbiAgICAgICAgICAgIGNhc2UgUGFja2V0VHlwZS5BQ0s6XG4gICAgICAgICAgICBjYXNlIFBhY2tldFR5cGUuQklOQVJZX0FDSzpcbiAgICAgICAgICAgICAgICByZXR1cm4gQXJyYXkuaXNBcnJheShwYXlsb2FkKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZWFsbG9jYXRlcyBhIHBhcnNlcidzIHJlc291cmNlc1xuICAgICAqL1xuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIGlmICh0aGlzLnJlY29uc3RydWN0b3IpIHtcbiAgICAgICAgICAgIHRoaXMucmVjb25zdHJ1Y3Rvci5maW5pc2hlZFJlY29uc3RydWN0aW9uKCk7XG4gICAgICAgICAgICB0aGlzLnJlY29uc3RydWN0b3IgPSBudWxsO1xuICAgICAgICB9XG4gICAgfVxufVxuLyoqXG4gKiBBIG1hbmFnZXIgb2YgYSBiaW5hcnkgZXZlbnQncyAnYnVmZmVyIHNlcXVlbmNlJy4gU2hvdWxkXG4gKiBiZSBjb25zdHJ1Y3RlZCB3aGVuZXZlciBhIHBhY2tldCBvZiB0eXBlIEJJTkFSWV9FVkVOVCBpc1xuICogZGVjb2RlZC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcGFja2V0XG4gKiBAcmV0dXJuIHtCaW5hcnlSZWNvbnN0cnVjdG9yfSBpbml0aWFsaXplZCByZWNvbnN0cnVjdG9yXG4gKi9cbmNsYXNzIEJpbmFyeVJlY29uc3RydWN0b3Ige1xuICAgIGNvbnN0cnVjdG9yKHBhY2tldCkge1xuICAgICAgICB0aGlzLnBhY2tldCA9IHBhY2tldDtcbiAgICAgICAgdGhpcy5idWZmZXJzID0gW107XG4gICAgICAgIHRoaXMucmVjb25QYWNrID0gcGFja2V0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNZXRob2QgdG8gYmUgY2FsbGVkIHdoZW4gYmluYXJ5IGRhdGEgcmVjZWl2ZWQgZnJvbSBjb25uZWN0aW9uXG4gICAgICogYWZ0ZXIgYSBCSU5BUllfRVZFTlQgcGFja2V0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtCdWZmZXIgfCBBcnJheUJ1ZmZlcn0gYmluRGF0YSAtIHRoZSByYXcgYmluYXJ5IGRhdGEgcmVjZWl2ZWRcbiAgICAgKiBAcmV0dXJuIHtudWxsIHwgT2JqZWN0fSByZXR1cm5zIG51bGwgaWYgbW9yZSBiaW5hcnkgZGF0YSBpcyBleHBlY3RlZCBvclxuICAgICAqICAgYSByZWNvbnN0cnVjdGVkIHBhY2tldCBvYmplY3QgaWYgYWxsIGJ1ZmZlcnMgaGF2ZSBiZWVuIHJlY2VpdmVkLlxuICAgICAqL1xuICAgIHRha2VCaW5hcnlEYXRhKGJpbkRhdGEpIHtcbiAgICAgICAgdGhpcy5idWZmZXJzLnB1c2goYmluRGF0YSk7XG4gICAgICAgIGlmICh0aGlzLmJ1ZmZlcnMubGVuZ3RoID09PSB0aGlzLnJlY29uUGFjay5hdHRhY2htZW50cykge1xuICAgICAgICAgICAgLy8gZG9uZSB3aXRoIGJ1ZmZlciBsaXN0XG4gICAgICAgICAgICBjb25zdCBwYWNrZXQgPSByZWNvbnN0cnVjdFBhY2tldCh0aGlzLnJlY29uUGFjaywgdGhpcy5idWZmZXJzKTtcbiAgICAgICAgICAgIHRoaXMuZmluaXNoZWRSZWNvbnN0cnVjdGlvbigpO1xuICAgICAgICAgICAgcmV0dXJuIHBhY2tldDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2xlYW5zIHVwIGJpbmFyeSBwYWNrZXQgcmVjb25zdHJ1Y3Rpb24gdmFyaWFibGVzLlxuICAgICAqL1xuICAgIGZpbmlzaGVkUmVjb25zdHJ1Y3Rpb24oKSB7XG4gICAgICAgIHRoaXMucmVjb25QYWNrID0gbnVsbDtcbiAgICAgICAgdGhpcy5idWZmZXJzID0gW107XG4gICAgfVxufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIG9uKG9iaiwgZXYsIGZuKSB7XG4gICAgb2JqLm9uKGV2LCBmbik7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHN1YkRlc3Ryb3koKSB7XG4gICAgICAgIG9iai5vZmYoZXYsIGZuKTtcbiAgICB9O1xufVxuIiwiaW1wb3J0IHsgUGFja2V0VHlwZSB9IGZyb20gXCJzb2NrZXQuaW8tcGFyc2VyXCI7XG5pbXBvcnQgeyBvbiB9IGZyb20gXCIuL29uLmpzXCI7XG5pbXBvcnQgeyBFbWl0dGVyLCB9IGZyb20gXCJAc29ja2V0LmlvL2NvbXBvbmVudC1lbWl0dGVyXCI7XG4vKipcbiAqIEludGVybmFsIGV2ZW50cy5cbiAqIFRoZXNlIGV2ZW50cyBjYW4ndCBiZSBlbWl0dGVkIGJ5IHRoZSB1c2VyLlxuICovXG5jb25zdCBSRVNFUlZFRF9FVkVOVFMgPSBPYmplY3QuZnJlZXplKHtcbiAgICBjb25uZWN0OiAxLFxuICAgIGNvbm5lY3RfZXJyb3I6IDEsXG4gICAgZGlzY29ubmVjdDogMSxcbiAgICBkaXNjb25uZWN0aW5nOiAxLFxuICAgIC8vIEV2ZW50RW1pdHRlciByZXNlcnZlZCBldmVudHM6IGh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvZXZlbnRzLmh0bWwjZXZlbnRzX2V2ZW50X25ld2xpc3RlbmVyXG4gICAgbmV3TGlzdGVuZXI6IDEsXG4gICAgcmVtb3ZlTGlzdGVuZXI6IDEsXG59KTtcbi8qKlxuICogQSBTb2NrZXQgaXMgdGhlIGZ1bmRhbWVudGFsIGNsYXNzIGZvciBpbnRlcmFjdGluZyB3aXRoIHRoZSBzZXJ2ZXIuXG4gKlxuICogQSBTb2NrZXQgYmVsb25ncyB0byBhIGNlcnRhaW4gTmFtZXNwYWNlIChieSBkZWZhdWx0IC8pIGFuZCB1c2VzIGFuIHVuZGVybHlpbmcge0BsaW5rIE1hbmFnZXJ9IHRvIGNvbW11bmljYXRlLlxuICpcbiAqIEBleGFtcGxlXG4gKiBjb25zdCBzb2NrZXQgPSBpbygpO1xuICpcbiAqIHNvY2tldC5vbihcImNvbm5lY3RcIiwgKCkgPT4ge1xuICogICBjb25zb2xlLmxvZyhcImNvbm5lY3RlZFwiKTtcbiAqIH0pO1xuICpcbiAqIC8vIHNlbmQgYW4gZXZlbnQgdG8gdGhlIHNlcnZlclxuICogc29ja2V0LmVtaXQoXCJmb29cIiwgXCJiYXJcIik7XG4gKlxuICogc29ja2V0Lm9uKFwiZm9vYmFyXCIsICgpID0+IHtcbiAqICAgLy8gYW4gZXZlbnQgd2FzIHJlY2VpdmVkIGZyb20gdGhlIHNlcnZlclxuICogfSk7XG4gKlxuICogLy8gdXBvbiBkaXNjb25uZWN0aW9uXG4gKiBzb2NrZXQub24oXCJkaXNjb25uZWN0XCIsIChyZWFzb24pID0+IHtcbiAqICAgY29uc29sZS5sb2coYGRpc2Nvbm5lY3RlZCBkdWUgdG8gJHtyZWFzb259YCk7XG4gKiB9KTtcbiAqL1xuZXhwb3J0IGNsYXNzIFNvY2tldCBleHRlbmRzIEVtaXR0ZXIge1xuICAgIC8qKlxuICAgICAqIGBTb2NrZXRgIGNvbnN0cnVjdG9yLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGlvLCBuc3AsIG9wdHMpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFdoZXRoZXIgdGhlIHNvY2tldCBpcyBjdXJyZW50bHkgY29ubmVjdGVkIHRvIHRoZSBzZXJ2ZXIuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBleGFtcGxlXG4gICAgICAgICAqIGNvbnN0IHNvY2tldCA9IGlvKCk7XG4gICAgICAgICAqXG4gICAgICAgICAqIHNvY2tldC5vbihcImNvbm5lY3RcIiwgKCkgPT4ge1xuICAgICAgICAgKiAgIGNvbnNvbGUubG9nKHNvY2tldC5jb25uZWN0ZWQpOyAvLyB0cnVlXG4gICAgICAgICAqIH0pO1xuICAgICAgICAgKlxuICAgICAgICAgKiBzb2NrZXQub24oXCJkaXNjb25uZWN0XCIsICgpID0+IHtcbiAgICAgICAgICogICBjb25zb2xlLmxvZyhzb2NrZXQuY29ubmVjdGVkKTsgLy8gZmFsc2VcbiAgICAgICAgICogfSk7XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmNvbm5lY3RlZCA9IGZhbHNlO1xuICAgICAgICAvKipcbiAgICAgICAgICogV2hldGhlciB0aGUgY29ubmVjdGlvbiBzdGF0ZSB3YXMgcmVjb3ZlcmVkIGFmdGVyIGEgdGVtcG9yYXJ5IGRpc2Nvbm5lY3Rpb24uIEluIHRoYXQgY2FzZSwgYW55IG1pc3NlZCBwYWNrZXRzIHdpbGxcbiAgICAgICAgICogYmUgdHJhbnNtaXR0ZWQgYnkgdGhlIHNlcnZlci5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucmVjb3ZlcmVkID0gZmFsc2U7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBCdWZmZXIgZm9yIHBhY2tldHMgcmVjZWl2ZWQgYmVmb3JlIHRoZSBDT05ORUNUIHBhY2tldFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5yZWNlaXZlQnVmZmVyID0gW107XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBCdWZmZXIgZm9yIHBhY2tldHMgdGhhdCB3aWxsIGJlIHNlbnQgb25jZSB0aGUgc29ja2V0IGlzIGNvbm5lY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zZW5kQnVmZmVyID0gW107XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgcXVldWUgb2YgcGFja2V0cyB0byBiZSBzZW50IHdpdGggcmV0cnkgaW4gY2FzZSBvZiBmYWlsdXJlLlxuICAgICAgICAgKlxuICAgICAgICAgKiBQYWNrZXRzIGFyZSBzZW50IG9uZSBieSBvbmUsIGVhY2ggd2FpdGluZyBmb3IgdGhlIHNlcnZlciBhY2tub3dsZWRnZW1lbnQsIGluIG9yZGVyIHRvIGd1YXJhbnRlZSB0aGUgZGVsaXZlcnkgb3JkZXIuXG4gICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9xdWV1ZSA9IFtdO1xuICAgICAgICAvKipcbiAgICAgICAgICogQSBzZXF1ZW5jZSB0byBnZW5lcmF0ZSB0aGUgSUQgb2YgdGhlIHtAbGluayBRdWV1ZWRQYWNrZXR9LlxuICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fcXVldWVTZXEgPSAwO1xuICAgICAgICB0aGlzLmlkcyA9IDA7XG4gICAgICAgIHRoaXMuYWNrcyA9IHt9O1xuICAgICAgICB0aGlzLmZsYWdzID0ge307XG4gICAgICAgIHRoaXMuaW8gPSBpbztcbiAgICAgICAgdGhpcy5uc3AgPSBuc3A7XG4gICAgICAgIGlmIChvcHRzICYmIG9wdHMuYXV0aCkge1xuICAgICAgICAgICAgdGhpcy5hdXRoID0gb3B0cy5hdXRoO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX29wdHMgPSBPYmplY3QuYXNzaWduKHt9LCBvcHRzKTtcbiAgICAgICAgaWYgKHRoaXMuaW8uX2F1dG9Db25uZWN0KVxuICAgICAgICAgICAgdGhpcy5vcGVuKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgdGhlIHNvY2tldCBpcyBjdXJyZW50bHkgZGlzY29ubmVjdGVkXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGNvbnN0IHNvY2tldCA9IGlvKCk7XG4gICAgICpcbiAgICAgKiBzb2NrZXQub24oXCJjb25uZWN0XCIsICgpID0+IHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKHNvY2tldC5kaXNjb25uZWN0ZWQpOyAvLyBmYWxzZVxuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogc29ja2V0Lm9uKFwiZGlzY29ubmVjdFwiLCAoKSA9PiB7XG4gICAgICogICBjb25zb2xlLmxvZyhzb2NrZXQuZGlzY29ubmVjdGVkKTsgLy8gdHJ1ZVxuICAgICAqIH0pO1xuICAgICAqL1xuICAgIGdldCBkaXNjb25uZWN0ZWQoKSB7XG4gICAgICAgIHJldHVybiAhdGhpcy5jb25uZWN0ZWQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN1YnNjcmliZSB0byBvcGVuLCBjbG9zZSBhbmQgcGFja2V0IGV2ZW50c1xuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBzdWJFdmVudHMoKSB7XG4gICAgICAgIGlmICh0aGlzLnN1YnMpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNvbnN0IGlvID0gdGhpcy5pbztcbiAgICAgICAgdGhpcy5zdWJzID0gW1xuICAgICAgICAgICAgb24oaW8sIFwib3BlblwiLCB0aGlzLm9ub3Blbi5iaW5kKHRoaXMpKSxcbiAgICAgICAgICAgIG9uKGlvLCBcInBhY2tldFwiLCB0aGlzLm9ucGFja2V0LmJpbmQodGhpcykpLFxuICAgICAgICAgICAgb24oaW8sIFwiZXJyb3JcIiwgdGhpcy5vbmVycm9yLmJpbmQodGhpcykpLFxuICAgICAgICAgICAgb24oaW8sIFwiY2xvc2VcIiwgdGhpcy5vbmNsb3NlLmJpbmQodGhpcykpLFxuICAgICAgICBdO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIHRoZSBTb2NrZXQgd2lsbCB0cnkgdG8gcmVjb25uZWN0IHdoZW4gaXRzIE1hbmFnZXIgY29ubmVjdHMgb3IgcmVjb25uZWN0cy5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogY29uc3Qgc29ja2V0ID0gaW8oKTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKHNvY2tldC5hY3RpdmUpOyAvLyB0cnVlXG4gICAgICpcbiAgICAgKiBzb2NrZXQub24oXCJkaXNjb25uZWN0XCIsIChyZWFzb24pID0+IHtcbiAgICAgKiAgIGlmIChyZWFzb24gPT09IFwiaW8gc2VydmVyIGRpc2Nvbm5lY3RcIikge1xuICAgICAqICAgICAvLyB0aGUgZGlzY29ubmVjdGlvbiB3YXMgaW5pdGlhdGVkIGJ5IHRoZSBzZXJ2ZXIsIHlvdSBuZWVkIHRvIG1hbnVhbGx5IHJlY29ubmVjdFxuICAgICAqICAgICBjb25zb2xlLmxvZyhzb2NrZXQuYWN0aXZlKTsgLy8gZmFsc2VcbiAgICAgKiAgIH1cbiAgICAgKiAgIC8vIGVsc2UgdGhlIHNvY2tldCB3aWxsIGF1dG9tYXRpY2FsbHkgdHJ5IHRvIHJlY29ubmVjdFxuICAgICAqICAgY29uc29sZS5sb2coc29ja2V0LmFjdGl2ZSk7IC8vIHRydWVcbiAgICAgKiB9KTtcbiAgICAgKi9cbiAgICBnZXQgYWN0aXZlKCkge1xuICAgICAgICByZXR1cm4gISF0aGlzLnN1YnM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFwiT3BlbnNcIiB0aGUgc29ja2V0LlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBjb25zdCBzb2NrZXQgPSBpbyh7XG4gICAgICogICBhdXRvQ29ubmVjdDogZmFsc2VcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIHNvY2tldC5jb25uZWN0KCk7XG4gICAgICovXG4gICAgY29ubmVjdCgpIHtcbiAgICAgICAgaWYgKHRoaXMuY29ubmVjdGVkKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIHRoaXMuc3ViRXZlbnRzKCk7XG4gICAgICAgIGlmICghdGhpcy5pb1tcIl9yZWNvbm5lY3RpbmdcIl0pXG4gICAgICAgICAgICB0aGlzLmlvLm9wZW4oKTsgLy8gZW5zdXJlIG9wZW5cbiAgICAgICAgaWYgKFwib3BlblwiID09PSB0aGlzLmlvLl9yZWFkeVN0YXRlKVxuICAgICAgICAgICAgdGhpcy5vbm9wZW4oKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFsaWFzIGZvciB7QGxpbmsgY29ubmVjdCgpfS5cbiAgICAgKi9cbiAgICBvcGVuKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb25uZWN0KCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNlbmRzIGEgYG1lc3NhZ2VgIGV2ZW50LlxuICAgICAqXG4gICAgICogVGhpcyBtZXRob2QgbWltaWNzIHRoZSBXZWJTb2NrZXQuc2VuZCgpIG1ldGhvZC5cbiAgICAgKlxuICAgICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1dlYlNvY2tldC9zZW5kXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIHNvY2tldC5zZW5kKFwiaGVsbG9cIik7XG4gICAgICpcbiAgICAgKiAvLyB0aGlzIGlzIGVxdWl2YWxlbnQgdG9cbiAgICAgKiBzb2NrZXQuZW1pdChcIm1lc3NhZ2VcIiwgXCJoZWxsb1wiKTtcbiAgICAgKlxuICAgICAqIEByZXR1cm4gc2VsZlxuICAgICAqL1xuICAgIHNlbmQoLi4uYXJncykge1xuICAgICAgICBhcmdzLnVuc2hpZnQoXCJtZXNzYWdlXCIpO1xuICAgICAgICB0aGlzLmVtaXQuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBPdmVycmlkZSBgZW1pdGAuXG4gICAgICogSWYgdGhlIGV2ZW50IGlzIGluIGBldmVudHNgLCBpdCdzIGVtaXR0ZWQgbm9ybWFsbHkuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIHNvY2tldC5lbWl0KFwiaGVsbG9cIiwgXCJ3b3JsZFwiKTtcbiAgICAgKlxuICAgICAqIC8vIGFsbCBzZXJpYWxpemFibGUgZGF0YXN0cnVjdHVyZXMgYXJlIHN1cHBvcnRlZCAobm8gbmVlZCB0byBjYWxsIEpTT04uc3RyaW5naWZ5KVxuICAgICAqIHNvY2tldC5lbWl0KFwiaGVsbG9cIiwgMSwgXCIyXCIsIHsgMzogW1wiNFwiXSwgNTogVWludDhBcnJheS5mcm9tKFs2XSkgfSk7XG4gICAgICpcbiAgICAgKiAvLyB3aXRoIGFuIGFja25vd2xlZGdlbWVudCBmcm9tIHRoZSBzZXJ2ZXJcbiAgICAgKiBzb2NrZXQuZW1pdChcImhlbGxvXCIsIFwid29ybGRcIiwgKHZhbCkgPT4ge1xuICAgICAqICAgLy8gLi4uXG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHNlbGZcbiAgICAgKi9cbiAgICBlbWl0KGV2LCAuLi5hcmdzKSB7XG4gICAgICAgIGlmIChSRVNFUlZFRF9FVkVOVFMuaGFzT3duUHJvcGVydHkoZXYpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1wiJyArIGV2LnRvU3RyaW5nKCkgKyAnXCIgaXMgYSByZXNlcnZlZCBldmVudCBuYW1lJyk7XG4gICAgICAgIH1cbiAgICAgICAgYXJncy51bnNoaWZ0KGV2KTtcbiAgICAgICAgaWYgKHRoaXMuX29wdHMucmV0cmllcyAmJiAhdGhpcy5mbGFncy5mcm9tUXVldWUgJiYgIXRoaXMuZmxhZ3Mudm9sYXRpbGUpIHtcbiAgICAgICAgICAgIHRoaXMuX2FkZFRvUXVldWUoYXJncyk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwYWNrZXQgPSB7XG4gICAgICAgICAgICB0eXBlOiBQYWNrZXRUeXBlLkVWRU5ULFxuICAgICAgICAgICAgZGF0YTogYXJncyxcbiAgICAgICAgfTtcbiAgICAgICAgcGFja2V0Lm9wdGlvbnMgPSB7fTtcbiAgICAgICAgcGFja2V0Lm9wdGlvbnMuY29tcHJlc3MgPSB0aGlzLmZsYWdzLmNvbXByZXNzICE9PSBmYWxzZTtcbiAgICAgICAgLy8gZXZlbnQgYWNrIGNhbGxiYWNrXG4gICAgICAgIGlmIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBhcmdzW2FyZ3MubGVuZ3RoIC0gMV0pIHtcbiAgICAgICAgICAgIGNvbnN0IGlkID0gdGhpcy5pZHMrKztcbiAgICAgICAgICAgIGNvbnN0IGFjayA9IGFyZ3MucG9wKCk7XG4gICAgICAgICAgICB0aGlzLl9yZWdpc3RlckFja0NhbGxiYWNrKGlkLCBhY2spO1xuICAgICAgICAgICAgcGFja2V0LmlkID0gaWQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaXNUcmFuc3BvcnRXcml0YWJsZSA9IHRoaXMuaW8uZW5naW5lICYmXG4gICAgICAgICAgICB0aGlzLmlvLmVuZ2luZS50cmFuc3BvcnQgJiZcbiAgICAgICAgICAgIHRoaXMuaW8uZW5naW5lLnRyYW5zcG9ydC53cml0YWJsZTtcbiAgICAgICAgY29uc3QgZGlzY2FyZFBhY2tldCA9IHRoaXMuZmxhZ3Mudm9sYXRpbGUgJiYgKCFpc1RyYW5zcG9ydFdyaXRhYmxlIHx8ICF0aGlzLmNvbm5lY3RlZCk7XG4gICAgICAgIGlmIChkaXNjYXJkUGFja2V0KSB7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5jb25uZWN0ZWQpIHtcbiAgICAgICAgICAgIHRoaXMubm90aWZ5T3V0Z29pbmdMaXN0ZW5lcnMocGFja2V0KTtcbiAgICAgICAgICAgIHRoaXMucGFja2V0KHBhY2tldCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNlbmRCdWZmZXIucHVzaChwYWNrZXQpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZmxhZ3MgPSB7fTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX3JlZ2lzdGVyQWNrQ2FsbGJhY2soaWQsIGFjaykge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGNvbnN0IHRpbWVvdXQgPSAoX2EgPSB0aGlzLmZsYWdzLnRpbWVvdXQpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHRoaXMuX29wdHMuYWNrVGltZW91dDtcbiAgICAgICAgaWYgKHRpbWVvdXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5hY2tzW2lkXSA9IGFjaztcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGNvbnN0IHRpbWVyID0gdGhpcy5pby5zZXRUaW1lb3V0Rm4oKCkgPT4ge1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuYWNrc1tpZF07XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuc2VuZEJ1ZmZlci5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnNlbmRCdWZmZXJbaV0uaWQgPT09IGlkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VuZEJ1ZmZlci5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYWNrLmNhbGwodGhpcywgbmV3IEVycm9yKFwib3BlcmF0aW9uIGhhcyB0aW1lZCBvdXRcIikpO1xuICAgICAgICB9LCB0aW1lb3V0KTtcbiAgICAgICAgdGhpcy5hY2tzW2lkXSA9ICguLi5hcmdzKSA9PiB7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICB0aGlzLmlvLmNsZWFyVGltZW91dEZuKHRpbWVyKTtcbiAgICAgICAgICAgIGFjay5hcHBseSh0aGlzLCBbbnVsbCwgLi4uYXJnc10pO1xuICAgICAgICB9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBFbWl0cyBhbiBldmVudCBhbmQgd2FpdHMgZm9yIGFuIGFja25vd2xlZGdlbWVudFxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyB3aXRob3V0IHRpbWVvdXRcbiAgICAgKiBjb25zdCByZXNwb25zZSA9IGF3YWl0IHNvY2tldC5lbWl0V2l0aEFjayhcImhlbGxvXCIsIFwid29ybGRcIik7XG4gICAgICpcbiAgICAgKiAvLyB3aXRoIGEgc3BlY2lmaWMgdGltZW91dFxuICAgICAqIHRyeSB7XG4gICAgICogICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHNvY2tldC50aW1lb3V0KDEwMDApLmVtaXRXaXRoQWNrKFwiaGVsbG9cIiwgXCJ3b3JsZFwiKTtcbiAgICAgKiB9IGNhdGNoIChlcnIpIHtcbiAgICAgKiAgIC8vIHRoZSBzZXJ2ZXIgZGlkIG5vdCBhY2tub3dsZWRnZSB0aGUgZXZlbnQgaW4gdGhlIGdpdmVuIGRlbGF5XG4gICAgICogfVxuICAgICAqXG4gICAgICogQHJldHVybiBhIFByb21pc2UgdGhhdCB3aWxsIGJlIGZ1bGZpbGxlZCB3aGVuIHRoZSBzZXJ2ZXIgYWNrbm93bGVkZ2VzIHRoZSBldmVudFxuICAgICAqL1xuICAgIGVtaXRXaXRoQWNrKGV2LCAuLi5hcmdzKSB7XG4gICAgICAgIC8vIHRoZSB0aW1lb3V0IGZsYWcgaXMgb3B0aW9uYWxcbiAgICAgICAgY29uc3Qgd2l0aEVyciA9IHRoaXMuZmxhZ3MudGltZW91dCAhPT0gdW5kZWZpbmVkIHx8IHRoaXMuX29wdHMuYWNrVGltZW91dCAhPT0gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgYXJncy5wdXNoKChhcmcxLCBhcmcyKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHdpdGhFcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFyZzEgPyByZWplY3QoYXJnMSkgOiByZXNvbHZlKGFyZzIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoYXJnMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLmVtaXQoZXYsIC4uLmFyZ3MpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWRkIHRoZSBwYWNrZXQgdG8gdGhlIHF1ZXVlLlxuICAgICAqIEBwYXJhbSBhcmdzXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfYWRkVG9RdWV1ZShhcmdzKSB7XG4gICAgICAgIGxldCBhY2s7XG4gICAgICAgIGlmICh0eXBlb2YgYXJnc1thcmdzLmxlbmd0aCAtIDFdID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIGFjayA9IGFyZ3MucG9wKCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcGFja2V0ID0ge1xuICAgICAgICAgICAgaWQ6IHRoaXMuX3F1ZXVlU2VxKyssXG4gICAgICAgICAgICB0cnlDb3VudDogMCxcbiAgICAgICAgICAgIHBlbmRpbmc6IGZhbHNlLFxuICAgICAgICAgICAgYXJncyxcbiAgICAgICAgICAgIGZsYWdzOiBPYmplY3QuYXNzaWduKHsgZnJvbVF1ZXVlOiB0cnVlIH0sIHRoaXMuZmxhZ3MpLFxuICAgICAgICB9O1xuICAgICAgICBhcmdzLnB1c2goKGVyciwgLi4ucmVzcG9uc2VBcmdzKSA9PiB7XG4gICAgICAgICAgICBpZiAocGFja2V0ICE9PSB0aGlzLl9xdWV1ZVswXSkge1xuICAgICAgICAgICAgICAgIC8vIHRoZSBwYWNrZXQgaGFzIGFscmVhZHkgYmVlbiBhY2tub3dsZWRnZWRcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBoYXNFcnJvciA9IGVyciAhPT0gbnVsbDtcbiAgICAgICAgICAgIGlmIChoYXNFcnJvcikge1xuICAgICAgICAgICAgICAgIGlmIChwYWNrZXQudHJ5Q291bnQgPiB0aGlzLl9vcHRzLnJldHJpZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcXVldWUuc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFjaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWNrKGVycik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9xdWV1ZS5zaGlmdCgpO1xuICAgICAgICAgICAgICAgIGlmIChhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgYWNrKG51bGwsIC4uLnJlc3BvbnNlQXJncyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcGFja2V0LnBlbmRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9kcmFpblF1ZXVlKCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9xdWV1ZS5wdXNoKHBhY2tldCk7XG4gICAgICAgIHRoaXMuX2RyYWluUXVldWUoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2VuZCB0aGUgZmlyc3QgcGFja2V0IG9mIHRoZSBxdWV1ZSwgYW5kIHdhaXQgZm9yIGFuIGFja25vd2xlZGdlbWVudCBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAgICogQHBhcmFtIGZvcmNlIC0gd2hldGhlciB0byByZXNlbmQgYSBwYWNrZXQgdGhhdCBoYXMgbm90IGJlZW4gYWNrbm93bGVkZ2VkIHlldFxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfZHJhaW5RdWV1ZShmb3JjZSA9IGZhbHNlKSB7XG4gICAgICAgIGlmICghdGhpcy5jb25uZWN0ZWQgfHwgdGhpcy5fcXVldWUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcGFja2V0ID0gdGhpcy5fcXVldWVbMF07XG4gICAgICAgIGlmIChwYWNrZXQucGVuZGluZyAmJiAhZm9yY2UpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBwYWNrZXQucGVuZGluZyA9IHRydWU7XG4gICAgICAgIHBhY2tldC50cnlDb3VudCsrO1xuICAgICAgICB0aGlzLmZsYWdzID0gcGFja2V0LmZsYWdzO1xuICAgICAgICB0aGlzLmVtaXQuYXBwbHkodGhpcywgcGFja2V0LmFyZ3MpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZW5kcyBhIHBhY2tldC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBwYWNrZXRcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHBhY2tldChwYWNrZXQpIHtcbiAgICAgICAgcGFja2V0Lm5zcCA9IHRoaXMubnNwO1xuICAgICAgICB0aGlzLmlvLl9wYWNrZXQocGFja2V0KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHVwb24gZW5naW5lIGBvcGVuYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgb25vcGVuKCkge1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMuYXV0aCA9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIHRoaXMuYXV0aCgoZGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuX3NlbmRDb25uZWN0UGFja2V0KGRhdGEpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9zZW5kQ29ubmVjdFBhY2tldCh0aGlzLmF1dGgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNlbmRzIGEgQ09OTkVDVCBwYWNrZXQgdG8gaW5pdGlhdGUgdGhlIFNvY2tldC5JTyBzZXNzaW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIGRhdGFcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9zZW5kQ29ubmVjdFBhY2tldChkYXRhKSB7XG4gICAgICAgIHRoaXMucGFja2V0KHtcbiAgICAgICAgICAgIHR5cGU6IFBhY2tldFR5cGUuQ09OTkVDVCxcbiAgICAgICAgICAgIGRhdGE6IHRoaXMuX3BpZFxuICAgICAgICAgICAgICAgID8gT2JqZWN0LmFzc2lnbih7IHBpZDogdGhpcy5fcGlkLCBvZmZzZXQ6IHRoaXMuX2xhc3RPZmZzZXQgfSwgZGF0YSlcbiAgICAgICAgICAgICAgICA6IGRhdGEsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgdXBvbiBlbmdpbmUgb3IgbWFuYWdlciBgZXJyb3JgLlxuICAgICAqXG4gICAgICogQHBhcmFtIGVyclxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgb25lcnJvcihlcnIpIHtcbiAgICAgICAgaWYgKCF0aGlzLmNvbm5lY3RlZCkge1xuICAgICAgICAgICAgdGhpcy5lbWl0UmVzZXJ2ZWQoXCJjb25uZWN0X2Vycm9yXCIsIGVycik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHVwb24gZW5naW5lIGBjbG9zZWAuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcmVhc29uXG4gICAgICogQHBhcmFtIGRlc2NyaXB0aW9uXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBvbmNsb3NlKHJlYXNvbiwgZGVzY3JpcHRpb24pIHtcbiAgICAgICAgdGhpcy5jb25uZWN0ZWQgPSBmYWxzZTtcbiAgICAgICAgZGVsZXRlIHRoaXMuaWQ7XG4gICAgICAgIHRoaXMuZW1pdFJlc2VydmVkKFwiZGlzY29ubmVjdFwiLCByZWFzb24sIGRlc2NyaXB0aW9uKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHdpdGggc29ja2V0IHBhY2tldC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBwYWNrZXRcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIG9ucGFja2V0KHBhY2tldCkge1xuICAgICAgICBjb25zdCBzYW1lTmFtZXNwYWNlID0gcGFja2V0Lm5zcCA9PT0gdGhpcy5uc3A7XG4gICAgICAgIGlmICghc2FtZU5hbWVzcGFjZSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgc3dpdGNoIChwYWNrZXQudHlwZSkge1xuICAgICAgICAgICAgY2FzZSBQYWNrZXRUeXBlLkNPTk5FQ1Q6XG4gICAgICAgICAgICAgICAgaWYgKHBhY2tldC5kYXRhICYmIHBhY2tldC5kYXRhLnNpZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm9uY29ubmVjdChwYWNrZXQuZGF0YS5zaWQsIHBhY2tldC5kYXRhLnBpZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXRSZXNlcnZlZChcImNvbm5lY3RfZXJyb3JcIiwgbmV3IEVycm9yKFwiSXQgc2VlbXMgeW91IGFyZSB0cnlpbmcgdG8gcmVhY2ggYSBTb2NrZXQuSU8gc2VydmVyIGluIHYyLnggd2l0aCBhIHYzLnggY2xpZW50LCBidXQgdGhleSBhcmUgbm90IGNvbXBhdGlibGUgKG1vcmUgaW5mb3JtYXRpb24gaGVyZTogaHR0cHM6Ly9zb2NrZXQuaW8vZG9jcy92My9taWdyYXRpbmctZnJvbS0yLXgtdG8tMy0wLylcIikpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgUGFja2V0VHlwZS5FVkVOVDpcbiAgICAgICAgICAgIGNhc2UgUGFja2V0VHlwZS5CSU5BUllfRVZFTlQ6XG4gICAgICAgICAgICAgICAgdGhpcy5vbmV2ZW50KHBhY2tldCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFBhY2tldFR5cGUuQUNLOlxuICAgICAgICAgICAgY2FzZSBQYWNrZXRUeXBlLkJJTkFSWV9BQ0s6XG4gICAgICAgICAgICAgICAgdGhpcy5vbmFjayhwYWNrZXQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBQYWNrZXRUeXBlLkRJU0NPTk5FQ1Q6XG4gICAgICAgICAgICAgICAgdGhpcy5vbmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgUGFja2V0VHlwZS5DT05ORUNUX0VSUk9SOlxuICAgICAgICAgICAgICAgIHRoaXMuZGVzdHJveSgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGVyciA9IG5ldyBFcnJvcihwYWNrZXQuZGF0YS5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICAgICAgZXJyLmRhdGEgPSBwYWNrZXQuZGF0YS5kYXRhO1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdFJlc2VydmVkKFwiY29ubmVjdF9lcnJvclwiLCBlcnIpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxlZCB1cG9uIGEgc2VydmVyIGV2ZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIHBhY2tldFxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgb25ldmVudChwYWNrZXQpIHtcbiAgICAgICAgY29uc3QgYXJncyA9IHBhY2tldC5kYXRhIHx8IFtdO1xuICAgICAgICBpZiAobnVsbCAhPSBwYWNrZXQuaWQpIHtcbiAgICAgICAgICAgIGFyZ3MucHVzaCh0aGlzLmFjayhwYWNrZXQuaWQpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5jb25uZWN0ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZW1pdEV2ZW50KGFyZ3MpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5yZWNlaXZlQnVmZmVyLnB1c2goT2JqZWN0LmZyZWV6ZShhcmdzKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZW1pdEV2ZW50KGFyZ3MpIHtcbiAgICAgICAgaWYgKHRoaXMuX2FueUxpc3RlbmVycyAmJiB0aGlzLl9hbnlMaXN0ZW5lcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25zdCBsaXN0ZW5lcnMgPSB0aGlzLl9hbnlMaXN0ZW5lcnMuc2xpY2UoKTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgbGlzdGVuZXIgb2YgbGlzdGVuZXJzKSB7XG4gICAgICAgICAgICAgICAgbGlzdGVuZXIuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc3VwZXIuZW1pdC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgaWYgKHRoaXMuX3BpZCAmJiBhcmdzLmxlbmd0aCAmJiB0eXBlb2YgYXJnc1thcmdzLmxlbmd0aCAtIDFdID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICB0aGlzLl9sYXN0T2Zmc2V0ID0gYXJnc1thcmdzLmxlbmd0aCAtIDFdO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFByb2R1Y2VzIGFuIGFjayBjYWxsYmFjayB0byBlbWl0IHdpdGggYW4gZXZlbnQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGFjayhpZCkge1xuICAgICAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICAgICAgbGV0IHNlbnQgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICguLi5hcmdzKSB7XG4gICAgICAgICAgICAvLyBwcmV2ZW50IGRvdWJsZSBjYWxsYmFja3NcbiAgICAgICAgICAgIGlmIChzZW50KVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIHNlbnQgPSB0cnVlO1xuICAgICAgICAgICAgc2VsZi5wYWNrZXQoe1xuICAgICAgICAgICAgICAgIHR5cGU6IFBhY2tldFR5cGUuQUNLLFxuICAgICAgICAgICAgICAgIGlkOiBpZCxcbiAgICAgICAgICAgICAgICBkYXRhOiBhcmdzLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxlZCB1cG9uIGEgc2VydmVyIGFja25vd2xlZ2VtZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIHBhY2tldFxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgb25hY2socGFja2V0KSB7XG4gICAgICAgIGNvbnN0IGFjayA9IHRoaXMuYWNrc1twYWNrZXQuaWRdO1xuICAgICAgICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgYWNrKSB7XG4gICAgICAgICAgICBhY2suYXBwbHkodGhpcywgcGFja2V0LmRhdGEpO1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuYWNrc1twYWNrZXQuaWRdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxlZCB1cG9uIHNlcnZlciBjb25uZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBvbmNvbm5lY3QoaWQsIHBpZCkge1xuICAgICAgICB0aGlzLmlkID0gaWQ7XG4gICAgICAgIHRoaXMucmVjb3ZlcmVkID0gcGlkICYmIHRoaXMuX3BpZCA9PT0gcGlkO1xuICAgICAgICB0aGlzLl9waWQgPSBwaWQ7IC8vIGRlZmluZWQgb25seSBpZiBjb25uZWN0aW9uIHN0YXRlIHJlY292ZXJ5IGlzIGVuYWJsZWRcbiAgICAgICAgdGhpcy5jb25uZWN0ZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLmVtaXRCdWZmZXJlZCgpO1xuICAgICAgICB0aGlzLmVtaXRSZXNlcnZlZChcImNvbm5lY3RcIik7XG4gICAgICAgIHRoaXMuX2RyYWluUXVldWUodHJ1ZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEVtaXQgYnVmZmVyZWQgZXZlbnRzIChyZWNlaXZlZCBhbmQgZW1pdHRlZCkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGVtaXRCdWZmZXJlZCgpIHtcbiAgICAgICAgdGhpcy5yZWNlaXZlQnVmZmVyLmZvckVhY2goKGFyZ3MpID0+IHRoaXMuZW1pdEV2ZW50KGFyZ3MpKTtcbiAgICAgICAgdGhpcy5yZWNlaXZlQnVmZmVyID0gW107XG4gICAgICAgIHRoaXMuc2VuZEJ1ZmZlci5mb3JFYWNoKChwYWNrZXQpID0+IHtcbiAgICAgICAgICAgIHRoaXMubm90aWZ5T3V0Z29pbmdMaXN0ZW5lcnMocGFja2V0KTtcbiAgICAgICAgICAgIHRoaXMucGFja2V0KHBhY2tldCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnNlbmRCdWZmZXIgPSBbXTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHVwb24gc2VydmVyIGRpc2Nvbm5lY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIG9uZGlzY29ubmVjdCgpIHtcbiAgICAgICAgdGhpcy5kZXN0cm95KCk7XG4gICAgICAgIHRoaXMub25jbG9zZShcImlvIHNlcnZlciBkaXNjb25uZWN0XCIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgdXBvbiBmb3JjZWQgY2xpZW50L3NlcnZlciBzaWRlIGRpc2Nvbm5lY3Rpb25zLFxuICAgICAqIHRoaXMgbWV0aG9kIGVuc3VyZXMgdGhlIG1hbmFnZXIgc3RvcHMgdHJhY2tpbmcgdXMgYW5kXG4gICAgICogdGhhdCByZWNvbm5lY3Rpb25zIGRvbid0IGdldCB0cmlnZ2VyZWQgZm9yIHRoaXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIGlmICh0aGlzLnN1YnMpIHtcbiAgICAgICAgICAgIC8vIGNsZWFuIHN1YnNjcmlwdGlvbnMgdG8gYXZvaWQgcmVjb25uZWN0aW9uc1xuICAgICAgICAgICAgdGhpcy5zdWJzLmZvckVhY2goKHN1YkRlc3Ryb3kpID0+IHN1YkRlc3Ryb3koKSk7XG4gICAgICAgICAgICB0aGlzLnN1YnMgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pb1tcIl9kZXN0cm95XCJdKHRoaXMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEaXNjb25uZWN0cyB0aGUgc29ja2V0IG1hbnVhbGx5LiBJbiB0aGF0IGNhc2UsIHRoZSBzb2NrZXQgd2lsbCBub3QgdHJ5IHRvIHJlY29ubmVjdC5cbiAgICAgKlxuICAgICAqIElmIHRoaXMgaXMgdGhlIGxhc3QgYWN0aXZlIFNvY2tldCBpbnN0YW5jZSBvZiB0aGUge0BsaW5rIE1hbmFnZXJ9LCB0aGUgbG93LWxldmVsIGNvbm5lY3Rpb24gd2lsbCBiZSBjbG9zZWQuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGNvbnN0IHNvY2tldCA9IGlvKCk7XG4gICAgICpcbiAgICAgKiBzb2NrZXQub24oXCJkaXNjb25uZWN0XCIsIChyZWFzb24pID0+IHtcbiAgICAgKiAgIC8vIGNvbnNvbGUubG9nKHJlYXNvbik7IHByaW50cyBcImlvIGNsaWVudCBkaXNjb25uZWN0XCJcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIHNvY2tldC5kaXNjb25uZWN0KCk7XG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHNlbGZcbiAgICAgKi9cbiAgICBkaXNjb25uZWN0KCkge1xuICAgICAgICBpZiAodGhpcy5jb25uZWN0ZWQpIHtcbiAgICAgICAgICAgIHRoaXMucGFja2V0KHsgdHlwZTogUGFja2V0VHlwZS5ESVNDT05ORUNUIH0pO1xuICAgICAgICB9XG4gICAgICAgIC8vIHJlbW92ZSBzb2NrZXQgZnJvbSBwb29sXG4gICAgICAgIHRoaXMuZGVzdHJveSgpO1xuICAgICAgICBpZiAodGhpcy5jb25uZWN0ZWQpIHtcbiAgICAgICAgICAgIC8vIGZpcmUgZXZlbnRzXG4gICAgICAgICAgICB0aGlzLm9uY2xvc2UoXCJpbyBjbGllbnQgZGlzY29ubmVjdFwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWxpYXMgZm9yIHtAbGluayBkaXNjb25uZWN0KCl9LlxuICAgICAqXG4gICAgICogQHJldHVybiBzZWxmXG4gICAgICovXG4gICAgY2xvc2UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpc2Nvbm5lY3QoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgY29tcHJlc3MgZmxhZy5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogc29ja2V0LmNvbXByZXNzKGZhbHNlKS5lbWl0KFwiaGVsbG9cIik7XG4gICAgICpcbiAgICAgKiBAcGFyYW0gY29tcHJlc3MgLSBpZiBgdHJ1ZWAsIGNvbXByZXNzZXMgdGhlIHNlbmRpbmcgZGF0YVxuICAgICAqIEByZXR1cm4gc2VsZlxuICAgICAqL1xuICAgIGNvbXByZXNzKGNvbXByZXNzKSB7XG4gICAgICAgIHRoaXMuZmxhZ3MuY29tcHJlc3MgPSBjb21wcmVzcztcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgYSBtb2RpZmllciBmb3IgYSBzdWJzZXF1ZW50IGV2ZW50IGVtaXNzaW9uIHRoYXQgdGhlIGV2ZW50IG1lc3NhZ2Ugd2lsbCBiZSBkcm9wcGVkIHdoZW4gdGhpcyBzb2NrZXQgaXMgbm90XG4gICAgICogcmVhZHkgdG8gc2VuZCBtZXNzYWdlcy5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogc29ja2V0LnZvbGF0aWxlLmVtaXQoXCJoZWxsb1wiKTsgLy8gdGhlIHNlcnZlciBtYXkgb3IgbWF5IG5vdCByZWNlaXZlIGl0XG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBzZWxmXG4gICAgICovXG4gICAgZ2V0IHZvbGF0aWxlKCkge1xuICAgICAgICB0aGlzLmZsYWdzLnZvbGF0aWxlID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgYSBtb2RpZmllciBmb3IgYSBzdWJzZXF1ZW50IGV2ZW50IGVtaXNzaW9uIHRoYXQgdGhlIGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHdpdGggYW4gZXJyb3Igd2hlbiB0aGVcbiAgICAgKiBnaXZlbiBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGhhdmUgZWxhcHNlZCB3aXRob3V0IGFuIGFja25vd2xlZGdlbWVudCBmcm9tIHRoZSBzZXJ2ZXI6XG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIHNvY2tldC50aW1lb3V0KDUwMDApLmVtaXQoXCJteS1ldmVudFwiLCAoZXJyKSA9PiB7XG4gICAgICogICBpZiAoZXJyKSB7XG4gICAgICogICAgIC8vIHRoZSBzZXJ2ZXIgZGlkIG5vdCBhY2tub3dsZWRnZSB0aGUgZXZlbnQgaW4gdGhlIGdpdmVuIGRlbGF5XG4gICAgICogICB9XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBzZWxmXG4gICAgICovXG4gICAgdGltZW91dCh0aW1lb3V0KSB7XG4gICAgICAgIHRoaXMuZmxhZ3MudGltZW91dCA9IHRpbWVvdXQ7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGRzIGEgbGlzdGVuZXIgdGhhdCB3aWxsIGJlIGZpcmVkIHdoZW4gYW55IGV2ZW50IGlzIGVtaXR0ZWQuIFRoZSBldmVudCBuYW1lIGlzIHBhc3NlZCBhcyB0aGUgZmlyc3QgYXJndW1lbnQgdG8gdGhlXG4gICAgICogY2FsbGJhY2suXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIHNvY2tldC5vbkFueSgoZXZlbnQsIC4uLmFyZ3MpID0+IHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKGBnb3QgJHtldmVudH1gKTtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIEBwYXJhbSBsaXN0ZW5lclxuICAgICAqL1xuICAgIG9uQW55KGxpc3RlbmVyKSB7XG4gICAgICAgIHRoaXMuX2FueUxpc3RlbmVycyA9IHRoaXMuX2FueUxpc3RlbmVycyB8fCBbXTtcbiAgICAgICAgdGhpcy5fYW55TGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWRkcyBhIGxpc3RlbmVyIHRoYXQgd2lsbCBiZSBmaXJlZCB3aGVuIGFueSBldmVudCBpcyBlbWl0dGVkLiBUaGUgZXZlbnQgbmFtZSBpcyBwYXNzZWQgYXMgdGhlIGZpcnN0IGFyZ3VtZW50IHRvIHRoZVxuICAgICAqIGNhbGxiYWNrLiBUaGUgbGlzdGVuZXIgaXMgYWRkZWQgdG8gdGhlIGJlZ2lubmluZyBvZiB0aGUgbGlzdGVuZXJzIGFycmF5LlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBzb2NrZXQucHJlcGVuZEFueSgoZXZlbnQsIC4uLmFyZ3MpID0+IHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKGBnb3QgZXZlbnQgJHtldmVudH1gKTtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIEBwYXJhbSBsaXN0ZW5lclxuICAgICAqL1xuICAgIHByZXBlbmRBbnkobGlzdGVuZXIpIHtcbiAgICAgICAgdGhpcy5fYW55TGlzdGVuZXJzID0gdGhpcy5fYW55TGlzdGVuZXJzIHx8IFtdO1xuICAgICAgICB0aGlzLl9hbnlMaXN0ZW5lcnMudW5zaGlmdChsaXN0ZW5lcik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIHRoZSBsaXN0ZW5lciB0aGF0IHdpbGwgYmUgZmlyZWQgd2hlbiBhbnkgZXZlbnQgaXMgZW1pdHRlZC5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogY29uc3QgY2F0Y2hBbGxMaXN0ZW5lciA9IChldmVudCwgLi4uYXJncykgPT4ge1xuICAgICAqICAgY29uc29sZS5sb2coYGdvdCBldmVudCAke2V2ZW50fWApO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHNvY2tldC5vbkFueShjYXRjaEFsbExpc3RlbmVyKTtcbiAgICAgKlxuICAgICAqIC8vIHJlbW92ZSBhIHNwZWNpZmljIGxpc3RlbmVyXG4gICAgICogc29ja2V0Lm9mZkFueShjYXRjaEFsbExpc3RlbmVyKTtcbiAgICAgKlxuICAgICAqIC8vIG9yIHJlbW92ZSBhbGwgbGlzdGVuZXJzXG4gICAgICogc29ja2V0Lm9mZkFueSgpO1xuICAgICAqXG4gICAgICogQHBhcmFtIGxpc3RlbmVyXG4gICAgICovXG4gICAgb2ZmQW55KGxpc3RlbmVyKSB7XG4gICAgICAgIGlmICghdGhpcy5fYW55TGlzdGVuZXJzKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICBpZiAobGlzdGVuZXIpIHtcbiAgICAgICAgICAgIGNvbnN0IGxpc3RlbmVycyA9IHRoaXMuX2FueUxpc3RlbmVycztcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGxpc3RlbmVyID09PSBsaXN0ZW5lcnNbaV0pIHtcbiAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXJzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fYW55TGlzdGVuZXJzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYW4gYXJyYXkgb2YgbGlzdGVuZXJzIHRoYXQgYXJlIGxpc3RlbmluZyBmb3IgYW55IGV2ZW50IHRoYXQgaXMgc3BlY2lmaWVkLiBUaGlzIGFycmF5IGNhbiBiZSBtYW5pcHVsYXRlZCxcbiAgICAgKiBlLmcuIHRvIHJlbW92ZSBsaXN0ZW5lcnMuXG4gICAgICovXG4gICAgbGlzdGVuZXJzQW55KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYW55TGlzdGVuZXJzIHx8IFtdO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGRzIGEgbGlzdGVuZXIgdGhhdCB3aWxsIGJlIGZpcmVkIHdoZW4gYW55IGV2ZW50IGlzIGVtaXR0ZWQuIFRoZSBldmVudCBuYW1lIGlzIHBhc3NlZCBhcyB0aGUgZmlyc3QgYXJndW1lbnQgdG8gdGhlXG4gICAgICogY2FsbGJhY2suXG4gICAgICpcbiAgICAgKiBOb3RlOiBhY2tub3dsZWRnZW1lbnRzIHNlbnQgdG8gdGhlIHNlcnZlciBhcmUgbm90IGluY2x1ZGVkLlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBzb2NrZXQub25BbnlPdXRnb2luZygoZXZlbnQsIC4uLmFyZ3MpID0+IHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKGBzZW50IGV2ZW50ICR7ZXZlbnR9YCk7XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBAcGFyYW0gbGlzdGVuZXJcbiAgICAgKi9cbiAgICBvbkFueU91dGdvaW5nKGxpc3RlbmVyKSB7XG4gICAgICAgIHRoaXMuX2FueU91dGdvaW5nTGlzdGVuZXJzID0gdGhpcy5fYW55T3V0Z29pbmdMaXN0ZW5lcnMgfHwgW107XG4gICAgICAgIHRoaXMuX2FueU91dGdvaW5nTGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWRkcyBhIGxpc3RlbmVyIHRoYXQgd2lsbCBiZSBmaXJlZCB3aGVuIGFueSBldmVudCBpcyBlbWl0dGVkLiBUaGUgZXZlbnQgbmFtZSBpcyBwYXNzZWQgYXMgdGhlIGZpcnN0IGFyZ3VtZW50IHRvIHRoZVxuICAgICAqIGNhbGxiYWNrLiBUaGUgbGlzdGVuZXIgaXMgYWRkZWQgdG8gdGhlIGJlZ2lubmluZyBvZiB0aGUgbGlzdGVuZXJzIGFycmF5LlxuICAgICAqXG4gICAgICogTm90ZTogYWNrbm93bGVkZ2VtZW50cyBzZW50IHRvIHRoZSBzZXJ2ZXIgYXJlIG5vdCBpbmNsdWRlZC5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogc29ja2V0LnByZXBlbmRBbnlPdXRnb2luZygoZXZlbnQsIC4uLmFyZ3MpID0+IHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKGBzZW50IGV2ZW50ICR7ZXZlbnR9YCk7XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBAcGFyYW0gbGlzdGVuZXJcbiAgICAgKi9cbiAgICBwcmVwZW5kQW55T3V0Z29pbmcobGlzdGVuZXIpIHtcbiAgICAgICAgdGhpcy5fYW55T3V0Z29pbmdMaXN0ZW5lcnMgPSB0aGlzLl9hbnlPdXRnb2luZ0xpc3RlbmVycyB8fCBbXTtcbiAgICAgICAgdGhpcy5fYW55T3V0Z29pbmdMaXN0ZW5lcnMudW5zaGlmdChsaXN0ZW5lcik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIHRoZSBsaXN0ZW5lciB0aGF0IHdpbGwgYmUgZmlyZWQgd2hlbiBhbnkgZXZlbnQgaXMgZW1pdHRlZC5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogY29uc3QgY2F0Y2hBbGxMaXN0ZW5lciA9IChldmVudCwgLi4uYXJncykgPT4ge1xuICAgICAqICAgY29uc29sZS5sb2coYHNlbnQgZXZlbnQgJHtldmVudH1gKTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBzb2NrZXQub25BbnlPdXRnb2luZyhjYXRjaEFsbExpc3RlbmVyKTtcbiAgICAgKlxuICAgICAqIC8vIHJlbW92ZSBhIHNwZWNpZmljIGxpc3RlbmVyXG4gICAgICogc29ja2V0Lm9mZkFueU91dGdvaW5nKGNhdGNoQWxsTGlzdGVuZXIpO1xuICAgICAqXG4gICAgICogLy8gb3IgcmVtb3ZlIGFsbCBsaXN0ZW5lcnNcbiAgICAgKiBzb2NrZXQub2ZmQW55T3V0Z29pbmcoKTtcbiAgICAgKlxuICAgICAqIEBwYXJhbSBbbGlzdGVuZXJdIC0gdGhlIGNhdGNoLWFsbCBsaXN0ZW5lciAob3B0aW9uYWwpXG4gICAgICovXG4gICAgb2ZmQW55T3V0Z29pbmcobGlzdGVuZXIpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9hbnlPdXRnb2luZ0xpc3RlbmVycykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxpc3RlbmVyKSB7XG4gICAgICAgICAgICBjb25zdCBsaXN0ZW5lcnMgPSB0aGlzLl9hbnlPdXRnb2luZ0xpc3RlbmVycztcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGxpc3RlbmVyID09PSBsaXN0ZW5lcnNbaV0pIHtcbiAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXJzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fYW55T3V0Z29pbmdMaXN0ZW5lcnMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhbiBhcnJheSBvZiBsaXN0ZW5lcnMgdGhhdCBhcmUgbGlzdGVuaW5nIGZvciBhbnkgZXZlbnQgdGhhdCBpcyBzcGVjaWZpZWQuIFRoaXMgYXJyYXkgY2FuIGJlIG1hbmlwdWxhdGVkLFxuICAgICAqIGUuZy4gdG8gcmVtb3ZlIGxpc3RlbmVycy5cbiAgICAgKi9cbiAgICBsaXN0ZW5lcnNBbnlPdXRnb2luZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FueU91dGdvaW5nTGlzdGVuZXJzIHx8IFtdO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBOb3RpZnkgdGhlIGxpc3RlbmVycyBmb3IgZWFjaCBwYWNrZXQgc2VudFxuICAgICAqXG4gICAgICogQHBhcmFtIHBhY2tldFxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBub3RpZnlPdXRnb2luZ0xpc3RlbmVycyhwYWNrZXQpIHtcbiAgICAgICAgaWYgKHRoaXMuX2FueU91dGdvaW5nTGlzdGVuZXJzICYmIHRoaXMuX2FueU91dGdvaW5nTGlzdGVuZXJzLmxlbmd0aCkge1xuICAgICAgICAgICAgY29uc3QgbGlzdGVuZXJzID0gdGhpcy5fYW55T3V0Z29pbmdMaXN0ZW5lcnMuc2xpY2UoKTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgbGlzdGVuZXIgb2YgbGlzdGVuZXJzKSB7XG4gICAgICAgICAgICAgICAgbGlzdGVuZXIuYXBwbHkodGhpcywgcGFja2V0LmRhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuIiwiLyoqXG4gKiBJbml0aWFsaXplIGJhY2tvZmYgdGltZXIgd2l0aCBgb3B0c2AuXG4gKlxuICogLSBgbWluYCBpbml0aWFsIHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzIFsxMDBdXG4gKiAtIGBtYXhgIG1heCB0aW1lb3V0IFsxMDAwMF1cbiAqIC0gYGppdHRlcmAgWzBdXG4gKiAtIGBmYWN0b3JgIFsyXVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzXG4gKiBAYXBpIHB1YmxpY1xuICovXG5leHBvcnQgZnVuY3Rpb24gQmFja29mZihvcHRzKSB7XG4gICAgb3B0cyA9IG9wdHMgfHwge307XG4gICAgdGhpcy5tcyA9IG9wdHMubWluIHx8IDEwMDtcbiAgICB0aGlzLm1heCA9IG9wdHMubWF4IHx8IDEwMDAwO1xuICAgIHRoaXMuZmFjdG9yID0gb3B0cy5mYWN0b3IgfHwgMjtcbiAgICB0aGlzLmppdHRlciA9IG9wdHMuaml0dGVyID4gMCAmJiBvcHRzLmppdHRlciA8PSAxID8gb3B0cy5qaXR0ZXIgOiAwO1xuICAgIHRoaXMuYXR0ZW1wdHMgPSAwO1xufVxuLyoqXG4gKiBSZXR1cm4gdGhlIGJhY2tvZmYgZHVyYXRpb24uXG4gKlxuICogQHJldHVybiB7TnVtYmVyfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuQmFja29mZi5wcm90b3R5cGUuZHVyYXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG1zID0gdGhpcy5tcyAqIE1hdGgucG93KHRoaXMuZmFjdG9yLCB0aGlzLmF0dGVtcHRzKyspO1xuICAgIGlmICh0aGlzLmppdHRlcikge1xuICAgICAgICB2YXIgcmFuZCA9IE1hdGgucmFuZG9tKCk7XG4gICAgICAgIHZhciBkZXZpYXRpb24gPSBNYXRoLmZsb29yKHJhbmQgKiB0aGlzLmppdHRlciAqIG1zKTtcbiAgICAgICAgbXMgPSAoTWF0aC5mbG9vcihyYW5kICogMTApICYgMSkgPT0gMCA/IG1zIC0gZGV2aWF0aW9uIDogbXMgKyBkZXZpYXRpb247XG4gICAgfVxuICAgIHJldHVybiBNYXRoLm1pbihtcywgdGhpcy5tYXgpIHwgMDtcbn07XG4vKipcbiAqIFJlc2V0IHRoZSBudW1iZXIgb2YgYXR0ZW1wdHMuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuQmFja29mZi5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5hdHRlbXB0cyA9IDA7XG59O1xuLyoqXG4gKiBTZXQgdGhlIG1pbmltdW0gZHVyYXRpb25cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5CYWNrb2ZmLnByb3RvdHlwZS5zZXRNaW4gPSBmdW5jdGlvbiAobWluKSB7XG4gICAgdGhpcy5tcyA9IG1pbjtcbn07XG4vKipcbiAqIFNldCB0aGUgbWF4aW11bSBkdXJhdGlvblxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cbkJhY2tvZmYucHJvdG90eXBlLnNldE1heCA9IGZ1bmN0aW9uIChtYXgpIHtcbiAgICB0aGlzLm1heCA9IG1heDtcbn07XG4vKipcbiAqIFNldCB0aGUgaml0dGVyXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuQmFja29mZi5wcm90b3R5cGUuc2V0Sml0dGVyID0gZnVuY3Rpb24gKGppdHRlcikge1xuICAgIHRoaXMuaml0dGVyID0gaml0dGVyO1xufTtcbiIsImltcG9ydCB7IFNvY2tldCBhcyBFbmdpbmUsIGluc3RhbGxUaW1lckZ1bmN0aW9ucywgbmV4dFRpY2ssIH0gZnJvbSBcImVuZ2luZS5pby1jbGllbnRcIjtcbmltcG9ydCB7IFNvY2tldCB9IGZyb20gXCIuL3NvY2tldC5qc1wiO1xuaW1wb3J0ICogYXMgcGFyc2VyIGZyb20gXCJzb2NrZXQuaW8tcGFyc2VyXCI7XG5pbXBvcnQgeyBvbiB9IGZyb20gXCIuL29uLmpzXCI7XG5pbXBvcnQgeyBCYWNrb2ZmIH0gZnJvbSBcIi4vY29udHJpYi9iYWNrbzIuanNcIjtcbmltcG9ydCB7IEVtaXR0ZXIsIH0gZnJvbSBcIkBzb2NrZXQuaW8vY29tcG9uZW50LWVtaXR0ZXJcIjtcbmV4cG9ydCBjbGFzcyBNYW5hZ2VyIGV4dGVuZHMgRW1pdHRlciB7XG4gICAgY29uc3RydWN0b3IodXJpLCBvcHRzKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5uc3BzID0ge307XG4gICAgICAgIHRoaXMuc3VicyA9IFtdO1xuICAgICAgICBpZiAodXJpICYmIFwib2JqZWN0XCIgPT09IHR5cGVvZiB1cmkpIHtcbiAgICAgICAgICAgIG9wdHMgPSB1cmk7XG4gICAgICAgICAgICB1cmkgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgb3B0cyA9IG9wdHMgfHwge307XG4gICAgICAgIG9wdHMucGF0aCA9IG9wdHMucGF0aCB8fCBcIi9zb2NrZXQuaW9cIjtcbiAgICAgICAgdGhpcy5vcHRzID0gb3B0cztcbiAgICAgICAgaW5zdGFsbFRpbWVyRnVuY3Rpb25zKHRoaXMsIG9wdHMpO1xuICAgICAgICB0aGlzLnJlY29ubmVjdGlvbihvcHRzLnJlY29ubmVjdGlvbiAhPT0gZmFsc2UpO1xuICAgICAgICB0aGlzLnJlY29ubmVjdGlvbkF0dGVtcHRzKG9wdHMucmVjb25uZWN0aW9uQXR0ZW1wdHMgfHwgSW5maW5pdHkpO1xuICAgICAgICB0aGlzLnJlY29ubmVjdGlvbkRlbGF5KG9wdHMucmVjb25uZWN0aW9uRGVsYXkgfHwgMTAwMCk7XG4gICAgICAgIHRoaXMucmVjb25uZWN0aW9uRGVsYXlNYXgob3B0cy5yZWNvbm5lY3Rpb25EZWxheU1heCB8fCA1MDAwKTtcbiAgICAgICAgdGhpcy5yYW5kb21pemF0aW9uRmFjdG9yKChfYSA9IG9wdHMucmFuZG9taXphdGlvbkZhY3RvcikgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogMC41KTtcbiAgICAgICAgdGhpcy5iYWNrb2ZmID0gbmV3IEJhY2tvZmYoe1xuICAgICAgICAgICAgbWluOiB0aGlzLnJlY29ubmVjdGlvbkRlbGF5KCksXG4gICAgICAgICAgICBtYXg6IHRoaXMucmVjb25uZWN0aW9uRGVsYXlNYXgoKSxcbiAgICAgICAgICAgIGppdHRlcjogdGhpcy5yYW5kb21pemF0aW9uRmFjdG9yKCksXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnRpbWVvdXQobnVsbCA9PSBvcHRzLnRpbWVvdXQgPyAyMDAwMCA6IG9wdHMudGltZW91dCk7XG4gICAgICAgIHRoaXMuX3JlYWR5U3RhdGUgPSBcImNsb3NlZFwiO1xuICAgICAgICB0aGlzLnVyaSA9IHVyaTtcbiAgICAgICAgY29uc3QgX3BhcnNlciA9IG9wdHMucGFyc2VyIHx8IHBhcnNlcjtcbiAgICAgICAgdGhpcy5lbmNvZGVyID0gbmV3IF9wYXJzZXIuRW5jb2RlcigpO1xuICAgICAgICB0aGlzLmRlY29kZXIgPSBuZXcgX3BhcnNlci5EZWNvZGVyKCk7XG4gICAgICAgIHRoaXMuX2F1dG9Db25uZWN0ID0gb3B0cy5hdXRvQ29ubmVjdCAhPT0gZmFsc2U7XG4gICAgICAgIGlmICh0aGlzLl9hdXRvQ29ubmVjdClcbiAgICAgICAgICAgIHRoaXMub3BlbigpO1xuICAgIH1cbiAgICByZWNvbm5lY3Rpb24odikge1xuICAgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcmVjb25uZWN0aW9uO1xuICAgICAgICB0aGlzLl9yZWNvbm5lY3Rpb24gPSAhIXY7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICByZWNvbm5lY3Rpb25BdHRlbXB0cyh2KSB7XG4gICAgICAgIGlmICh2ID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcmVjb25uZWN0aW9uQXR0ZW1wdHM7XG4gICAgICAgIHRoaXMuX3JlY29ubmVjdGlvbkF0dGVtcHRzID0gdjtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHJlY29ubmVjdGlvbkRlbGF5KHYpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAodiA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3JlY29ubmVjdGlvbkRlbGF5O1xuICAgICAgICB0aGlzLl9yZWNvbm5lY3Rpb25EZWxheSA9IHY7XG4gICAgICAgIChfYSA9IHRoaXMuYmFja29mZikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnNldE1pbih2KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHJhbmRvbWl6YXRpb25GYWN0b3Iodikge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmICh2ID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcmFuZG9taXphdGlvbkZhY3RvcjtcbiAgICAgICAgdGhpcy5fcmFuZG9taXphdGlvbkZhY3RvciA9IHY7XG4gICAgICAgIChfYSA9IHRoaXMuYmFja29mZikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnNldEppdHRlcih2KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHJlY29ubmVjdGlvbkRlbGF5TWF4KHYpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAodiA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3JlY29ubmVjdGlvbkRlbGF5TWF4O1xuICAgICAgICB0aGlzLl9yZWNvbm5lY3Rpb25EZWxheU1heCA9IHY7XG4gICAgICAgIChfYSA9IHRoaXMuYmFja29mZikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnNldE1heCh2KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHRpbWVvdXQodikge1xuICAgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdGltZW91dDtcbiAgICAgICAgdGhpcy5fdGltZW91dCA9IHY7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTdGFydHMgdHJ5aW5nIHRvIHJlY29ubmVjdCBpZiByZWNvbm5lY3Rpb24gaXMgZW5hYmxlZCBhbmQgd2UgaGF2ZSBub3RcbiAgICAgKiBzdGFydGVkIHJlY29ubmVjdGluZyB5ZXRcbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgbWF5YmVSZWNvbm5lY3RPbk9wZW4oKSB7XG4gICAgICAgIC8vIE9ubHkgdHJ5IHRvIHJlY29ubmVjdCBpZiBpdCdzIHRoZSBmaXJzdCB0aW1lIHdlJ3JlIGNvbm5lY3RpbmdcbiAgICAgICAgaWYgKCF0aGlzLl9yZWNvbm5lY3RpbmcgJiZcbiAgICAgICAgICAgIHRoaXMuX3JlY29ubmVjdGlvbiAmJlxuICAgICAgICAgICAgdGhpcy5iYWNrb2ZmLmF0dGVtcHRzID09PSAwKSB7XG4gICAgICAgICAgICAvLyBrZWVwcyByZWNvbm5lY3Rpb24gZnJvbSBmaXJpbmcgdHdpY2UgZm9yIHRoZSBzYW1lIHJlY29ubmVjdGlvbiBsb29wXG4gICAgICAgICAgICB0aGlzLnJlY29ubmVjdCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGN1cnJlbnQgdHJhbnNwb3J0IGBzb2NrZXRgLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gLSBvcHRpb25hbCwgY2FsbGJhY2tcbiAgICAgKiBAcmV0dXJuIHNlbGZcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgb3Blbihmbikge1xuICAgICAgICBpZiAofnRoaXMuX3JlYWR5U3RhdGUuaW5kZXhPZihcIm9wZW5cIikpXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgdGhpcy5lbmdpbmUgPSBuZXcgRW5naW5lKHRoaXMudXJpLCB0aGlzLm9wdHMpO1xuICAgICAgICBjb25zdCBzb2NrZXQgPSB0aGlzLmVuZ2luZTtcbiAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgICAgIHRoaXMuX3JlYWR5U3RhdGUgPSBcIm9wZW5pbmdcIjtcbiAgICAgICAgdGhpcy5za2lwUmVjb25uZWN0ID0gZmFsc2U7XG4gICAgICAgIC8vIGVtaXQgYG9wZW5gXG4gICAgICAgIGNvbnN0IG9wZW5TdWJEZXN0cm95ID0gb24oc29ja2V0LCBcIm9wZW5cIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc2VsZi5vbm9wZW4oKTtcbiAgICAgICAgICAgIGZuICYmIGZuKCk7XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBlbWl0IGBlcnJvcmBcbiAgICAgICAgY29uc3QgZXJyb3JTdWIgPSBvbihzb2NrZXQsIFwiZXJyb3JcIiwgKGVycikgPT4ge1xuICAgICAgICAgICAgc2VsZi5jbGVhbnVwKCk7XG4gICAgICAgICAgICBzZWxmLl9yZWFkeVN0YXRlID0gXCJjbG9zZWRcIjtcbiAgICAgICAgICAgIHRoaXMuZW1pdFJlc2VydmVkKFwiZXJyb3JcIiwgZXJyKTtcbiAgICAgICAgICAgIGlmIChmbikge1xuICAgICAgICAgICAgICAgIGZuKGVycik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBPbmx5IGRvIHRoaXMgaWYgdGhlcmUgaXMgbm8gZm4gdG8gaGFuZGxlIHRoZSBlcnJvclxuICAgICAgICAgICAgICAgIHNlbGYubWF5YmVSZWNvbm5lY3RPbk9wZW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChmYWxzZSAhPT0gdGhpcy5fdGltZW91dCkge1xuICAgICAgICAgICAgY29uc3QgdGltZW91dCA9IHRoaXMuX3RpbWVvdXQ7XG4gICAgICAgICAgICBpZiAodGltZW91dCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIG9wZW5TdWJEZXN0cm95KCk7IC8vIHByZXZlbnRzIGEgcmFjZSBjb25kaXRpb24gd2l0aCB0aGUgJ29wZW4nIGV2ZW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBzZXQgdGltZXJcbiAgICAgICAgICAgIGNvbnN0IHRpbWVyID0gdGhpcy5zZXRUaW1lb3V0Rm4oKCkgPT4ge1xuICAgICAgICAgICAgICAgIG9wZW5TdWJEZXN0cm95KCk7XG4gICAgICAgICAgICAgICAgc29ja2V0LmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgICAgIHNvY2tldC5lbWl0KFwiZXJyb3JcIiwgbmV3IEVycm9yKFwidGltZW91dFwiKSk7XG4gICAgICAgICAgICB9LCB0aW1lb3V0KTtcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdHMuYXV0b1VucmVmKSB7XG4gICAgICAgICAgICAgICAgdGltZXIudW5yZWYoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc3Vicy5wdXNoKGZ1bmN0aW9uIHN1YkRlc3Ryb3koKSB7XG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc3Vicy5wdXNoKG9wZW5TdWJEZXN0cm95KTtcbiAgICAgICAgdGhpcy5zdWJzLnB1c2goZXJyb3JTdWIpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWxpYXMgZm9yIG9wZW4oKVxuICAgICAqXG4gICAgICogQHJldHVybiBzZWxmXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIGNvbm5lY3QoZm4pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3Blbihmbik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxlZCB1cG9uIHRyYW5zcG9ydCBvcGVuLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBvbm9wZW4oKSB7XG4gICAgICAgIC8vIGNsZWFyIG9sZCBzdWJzXG4gICAgICAgIHRoaXMuY2xlYW51cCgpO1xuICAgICAgICAvLyBtYXJrIGFzIG9wZW5cbiAgICAgICAgdGhpcy5fcmVhZHlTdGF0ZSA9IFwib3BlblwiO1xuICAgICAgICB0aGlzLmVtaXRSZXNlcnZlZChcIm9wZW5cIik7XG4gICAgICAgIC8vIGFkZCBuZXcgc3Vic1xuICAgICAgICBjb25zdCBzb2NrZXQgPSB0aGlzLmVuZ2luZTtcbiAgICAgICAgdGhpcy5zdWJzLnB1c2gob24oc29ja2V0LCBcInBpbmdcIiwgdGhpcy5vbnBpbmcuYmluZCh0aGlzKSksIG9uKHNvY2tldCwgXCJkYXRhXCIsIHRoaXMub25kYXRhLmJpbmQodGhpcykpLCBvbihzb2NrZXQsIFwiZXJyb3JcIiwgdGhpcy5vbmVycm9yLmJpbmQodGhpcykpLCBvbihzb2NrZXQsIFwiY2xvc2VcIiwgdGhpcy5vbmNsb3NlLmJpbmQodGhpcykpLCBvbih0aGlzLmRlY29kZXIsIFwiZGVjb2RlZFwiLCB0aGlzLm9uZGVjb2RlZC5iaW5kKHRoaXMpKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxlZCB1cG9uIGEgcGluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgb25waW5nKCkge1xuICAgICAgICB0aGlzLmVtaXRSZXNlcnZlZChcInBpbmdcIik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxlZCB3aXRoIGRhdGEuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIG9uZGF0YShkYXRhKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLmRlY29kZXIuYWRkKGRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICB0aGlzLm9uY2xvc2UoXCJwYXJzZSBlcnJvclwiLCBlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgd2hlbiBwYXJzZXIgZnVsbHkgZGVjb2RlcyBhIHBhY2tldC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgb25kZWNvZGVkKHBhY2tldCkge1xuICAgICAgICAvLyB0aGUgbmV4dFRpY2sgY2FsbCBwcmV2ZW50cyBhbiBleGNlcHRpb24gaW4gYSB1c2VyLXByb3ZpZGVkIGV2ZW50IGxpc3RlbmVyIGZyb20gdHJpZ2dlcmluZyBhIGRpc2Nvbm5lY3Rpb24gZHVlIHRvIGEgXCJwYXJzZSBlcnJvclwiXG4gICAgICAgIG5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZW1pdFJlc2VydmVkKFwicGFja2V0XCIsIHBhY2tldCk7XG4gICAgICAgIH0sIHRoaXMuc2V0VGltZW91dEZuKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHVwb24gc29ja2V0IGVycm9yLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBvbmVycm9yKGVycikge1xuICAgICAgICB0aGlzLmVtaXRSZXNlcnZlZChcImVycm9yXCIsIGVycik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgc29ja2V0IGZvciB0aGUgZ2l2ZW4gYG5zcGAuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtTb2NrZXR9XG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIHNvY2tldChuc3AsIG9wdHMpIHtcbiAgICAgICAgbGV0IHNvY2tldCA9IHRoaXMubnNwc1tuc3BdO1xuICAgICAgICBpZiAoIXNvY2tldCkge1xuICAgICAgICAgICAgc29ja2V0ID0gbmV3IFNvY2tldCh0aGlzLCBuc3AsIG9wdHMpO1xuICAgICAgICAgICAgdGhpcy5uc3BzW25zcF0gPSBzb2NrZXQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5fYXV0b0Nvbm5lY3QgJiYgIXNvY2tldC5hY3RpdmUpIHtcbiAgICAgICAgICAgIHNvY2tldC5jb25uZWN0KCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNvY2tldDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHVwb24gYSBzb2NrZXQgY2xvc2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gc29ja2V0XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfZGVzdHJveShzb2NrZXQpIHtcbiAgICAgICAgY29uc3QgbnNwcyA9IE9iamVjdC5rZXlzKHRoaXMubnNwcyk7XG4gICAgICAgIGZvciAoY29uc3QgbnNwIG9mIG5zcHMpIHtcbiAgICAgICAgICAgIGNvbnN0IHNvY2tldCA9IHRoaXMubnNwc1tuc3BdO1xuICAgICAgICAgICAgaWYgKHNvY2tldC5hY3RpdmUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fY2xvc2UoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogV3JpdGVzIGEgcGFja2V0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHBhY2tldFxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX3BhY2tldChwYWNrZXQpIHtcbiAgICAgICAgY29uc3QgZW5jb2RlZFBhY2tldHMgPSB0aGlzLmVuY29kZXIuZW5jb2RlKHBhY2tldCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZW5jb2RlZFBhY2tldHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMuZW5naW5lLndyaXRlKGVuY29kZWRQYWNrZXRzW2ldLCBwYWNrZXQub3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2xlYW4gdXAgdHJhbnNwb3J0IHN1YnNjcmlwdGlvbnMgYW5kIHBhY2tldCBidWZmZXIuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGNsZWFudXAoKSB7XG4gICAgICAgIHRoaXMuc3Vicy5mb3JFYWNoKChzdWJEZXN0cm95KSA9PiBzdWJEZXN0cm95KCkpO1xuICAgICAgICB0aGlzLnN1YnMubGVuZ3RoID0gMDtcbiAgICAgICAgdGhpcy5kZWNvZGVyLmRlc3Ryb3koKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2xvc2UgdGhlIGN1cnJlbnQgc29ja2V0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfY2xvc2UoKSB7XG4gICAgICAgIHRoaXMuc2tpcFJlY29ubmVjdCA9IHRydWU7XG4gICAgICAgIHRoaXMuX3JlY29ubmVjdGluZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLm9uY2xvc2UoXCJmb3JjZWQgY2xvc2VcIik7XG4gICAgICAgIGlmICh0aGlzLmVuZ2luZSlcbiAgICAgICAgICAgIHRoaXMuZW5naW5lLmNsb3NlKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFsaWFzIGZvciBjbG9zZSgpXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGRpc2Nvbm5lY3QoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbG9zZSgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgdXBvbiBlbmdpbmUgY2xvc2UuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIG9uY2xvc2UocmVhc29uLCBkZXNjcmlwdGlvbikge1xuICAgICAgICB0aGlzLmNsZWFudXAoKTtcbiAgICAgICAgdGhpcy5iYWNrb2ZmLnJlc2V0KCk7XG4gICAgICAgIHRoaXMuX3JlYWR5U3RhdGUgPSBcImNsb3NlZFwiO1xuICAgICAgICB0aGlzLmVtaXRSZXNlcnZlZChcImNsb3NlXCIsIHJlYXNvbiwgZGVzY3JpcHRpb24pO1xuICAgICAgICBpZiAodGhpcy5fcmVjb25uZWN0aW9uICYmICF0aGlzLnNraXBSZWNvbm5lY3QpIHtcbiAgICAgICAgICAgIHRoaXMucmVjb25uZWN0KCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQXR0ZW1wdCBhIHJlY29ubmVjdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgcmVjb25uZWN0KCkge1xuICAgICAgICBpZiAodGhpcy5fcmVjb25uZWN0aW5nIHx8IHRoaXMuc2tpcFJlY29ubmVjdClcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICAgICAgaWYgKHRoaXMuYmFja29mZi5hdHRlbXB0cyA+PSB0aGlzLl9yZWNvbm5lY3Rpb25BdHRlbXB0cykge1xuICAgICAgICAgICAgdGhpcy5iYWNrb2ZmLnJlc2V0KCk7XG4gICAgICAgICAgICB0aGlzLmVtaXRSZXNlcnZlZChcInJlY29ubmVjdF9mYWlsZWRcIik7XG4gICAgICAgICAgICB0aGlzLl9yZWNvbm5lY3RpbmcgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGRlbGF5ID0gdGhpcy5iYWNrb2ZmLmR1cmF0aW9uKCk7XG4gICAgICAgICAgICB0aGlzLl9yZWNvbm5lY3RpbmcgPSB0cnVlO1xuICAgICAgICAgICAgY29uc3QgdGltZXIgPSB0aGlzLnNldFRpbWVvdXRGbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHNlbGYuc2tpcFJlY29ubmVjdClcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdFJlc2VydmVkKFwicmVjb25uZWN0X2F0dGVtcHRcIiwgc2VsZi5iYWNrb2ZmLmF0dGVtcHRzKTtcbiAgICAgICAgICAgICAgICAvLyBjaGVjayBhZ2FpbiBmb3IgdGhlIGNhc2Ugc29ja2V0IGNsb3NlZCBpbiBhYm92ZSBldmVudHNcbiAgICAgICAgICAgICAgICBpZiAoc2VsZi5za2lwUmVjb25uZWN0KVxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgc2VsZi5vcGVuKChlcnIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5fcmVjb25uZWN0aW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnJlY29ubmVjdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0UmVzZXJ2ZWQoXCJyZWNvbm5lY3RfZXJyb3JcIiwgZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYub25yZWNvbm5lY3QoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSwgZGVsYXkpO1xuICAgICAgICAgICAgaWYgKHRoaXMub3B0cy5hdXRvVW5yZWYpIHtcbiAgICAgICAgICAgICAgICB0aW1lci51bnJlZigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5zdWJzLnB1c2goZnVuY3Rpb24gc3ViRGVzdHJveSgpIHtcbiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHVwb24gc3VjY2Vzc2Z1bCByZWNvbm5lY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIG9ucmVjb25uZWN0KCkge1xuICAgICAgICBjb25zdCBhdHRlbXB0ID0gdGhpcy5iYWNrb2ZmLmF0dGVtcHRzO1xuICAgICAgICB0aGlzLl9yZWNvbm5lY3RpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5iYWNrb2ZmLnJlc2V0KCk7XG4gICAgICAgIHRoaXMuZW1pdFJlc2VydmVkKFwicmVjb25uZWN0XCIsIGF0dGVtcHQpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IHVybCB9IGZyb20gXCIuL3VybC5qc1wiO1xuaW1wb3J0IHsgTWFuYWdlciB9IGZyb20gXCIuL21hbmFnZXIuanNcIjtcbmltcG9ydCB7IFNvY2tldCB9IGZyb20gXCIuL3NvY2tldC5qc1wiO1xuLyoqXG4gKiBNYW5hZ2VycyBjYWNoZS5cbiAqL1xuY29uc3QgY2FjaGUgPSB7fTtcbmZ1bmN0aW9uIGxvb2t1cCh1cmksIG9wdHMpIHtcbiAgICBpZiAodHlwZW9mIHVyaSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICBvcHRzID0gdXJpO1xuICAgICAgICB1cmkgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIG9wdHMgPSBvcHRzIHx8IHt9O1xuICAgIGNvbnN0IHBhcnNlZCA9IHVybCh1cmksIG9wdHMucGF0aCB8fCBcIi9zb2NrZXQuaW9cIik7XG4gICAgY29uc3Qgc291cmNlID0gcGFyc2VkLnNvdXJjZTtcbiAgICBjb25zdCBpZCA9IHBhcnNlZC5pZDtcbiAgICBjb25zdCBwYXRoID0gcGFyc2VkLnBhdGg7XG4gICAgY29uc3Qgc2FtZU5hbWVzcGFjZSA9IGNhY2hlW2lkXSAmJiBwYXRoIGluIGNhY2hlW2lkXVtcIm5zcHNcIl07XG4gICAgY29uc3QgbmV3Q29ubmVjdGlvbiA9IG9wdHMuZm9yY2VOZXcgfHxcbiAgICAgICAgb3B0c1tcImZvcmNlIG5ldyBjb25uZWN0aW9uXCJdIHx8XG4gICAgICAgIGZhbHNlID09PSBvcHRzLm11bHRpcGxleCB8fFxuICAgICAgICBzYW1lTmFtZXNwYWNlO1xuICAgIGxldCBpbztcbiAgICBpZiAobmV3Q29ubmVjdGlvbikge1xuICAgICAgICBpbyA9IG5ldyBNYW5hZ2VyKHNvdXJjZSwgb3B0cyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBpZiAoIWNhY2hlW2lkXSkge1xuICAgICAgICAgICAgY2FjaGVbaWRdID0gbmV3IE1hbmFnZXIoc291cmNlLCBvcHRzKTtcbiAgICAgICAgfVxuICAgICAgICBpbyA9IGNhY2hlW2lkXTtcbiAgICB9XG4gICAgaWYgKHBhcnNlZC5xdWVyeSAmJiAhb3B0cy5xdWVyeSkge1xuICAgICAgICBvcHRzLnF1ZXJ5ID0gcGFyc2VkLnF1ZXJ5S2V5O1xuICAgIH1cbiAgICByZXR1cm4gaW8uc29ja2V0KHBhcnNlZC5wYXRoLCBvcHRzKTtcbn1cbi8vIHNvIHRoYXQgXCJsb29rdXBcIiBjYW4gYmUgdXNlZCBib3RoIGFzIGEgZnVuY3Rpb24gKGUuZy4gYGlvKC4uLilgKSBhbmQgYXMgYVxuLy8gbmFtZXNwYWNlIChlLmcuIGBpby5jb25uZWN0KC4uLilgKSwgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHlcbk9iamVjdC5hc3NpZ24obG9va3VwLCB7XG4gICAgTWFuYWdlcixcbiAgICBTb2NrZXQsXG4gICAgaW86IGxvb2t1cCxcbiAgICBjb25uZWN0OiBsb29rdXAsXG59KTtcbi8qKlxuICogUHJvdG9jb2wgdmVyc2lvbi5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB7IHByb3RvY29sIH0gZnJvbSBcInNvY2tldC5pby1wYXJzZXJcIjtcbi8qKlxuICogRXhwb3NlIGNvbnN0cnVjdG9ycyBmb3Igc3RhbmRhbG9uZSBidWlsZC5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB7IE1hbmFnZXIsIFNvY2tldCwgbG9va3VwIGFzIGlvLCBsb29rdXAgYXMgY29ubmVjdCwgbG9va3VwIGFzIGRlZmF1bHQsIH07XG4iLCJpbXBvcnQgeyBwYXJzZSB9IGZyb20gXCJlbmdpbmUuaW8tY2xpZW50XCI7XG4vKipcbiAqIFVSTCBwYXJzZXIuXG4gKlxuICogQHBhcmFtIHVyaSAtIHVybFxuICogQHBhcmFtIHBhdGggLSB0aGUgcmVxdWVzdCBwYXRoIG9mIHRoZSBjb25uZWN0aW9uXG4gKiBAcGFyYW0gbG9jIC0gQW4gb2JqZWN0IG1lYW50IHRvIG1pbWljIHdpbmRvdy5sb2NhdGlvbi5cbiAqICAgICAgICBEZWZhdWx0cyB0byB3aW5kb3cubG9jYXRpb24uXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1cmwodXJpLCBwYXRoID0gXCJcIiwgbG9jKSB7XG4gICAgbGV0IG9iaiA9IHVyaTtcbiAgICAvLyBkZWZhdWx0IHRvIHdpbmRvdy5sb2NhdGlvblxuICAgIGxvYyA9IGxvYyB8fCAodHlwZW9mIGxvY2F0aW9uICE9PSBcInVuZGVmaW5lZFwiICYmIGxvY2F0aW9uKTtcbiAgICBpZiAobnVsbCA9PSB1cmkpXG4gICAgICAgIHVyaSA9IGxvYy5wcm90b2NvbCArIFwiLy9cIiArIGxvYy5ob3N0O1xuICAgIC8vIHJlbGF0aXZlIHBhdGggc3VwcG9ydFxuICAgIGlmICh0eXBlb2YgdXJpID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGlmIChcIi9cIiA9PT0gdXJpLmNoYXJBdCgwKSkge1xuICAgICAgICAgICAgaWYgKFwiL1wiID09PSB1cmkuY2hhckF0KDEpKSB7XG4gICAgICAgICAgICAgICAgdXJpID0gbG9jLnByb3RvY29sICsgdXJpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdXJpID0gbG9jLmhvc3QgKyB1cmk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCEvXihodHRwcz98d3NzPyk6XFwvXFwvLy50ZXN0KHVyaSkpIHtcbiAgICAgICAgICAgIGlmIChcInVuZGVmaW5lZFwiICE9PSB0eXBlb2YgbG9jKSB7XG4gICAgICAgICAgICAgICAgdXJpID0gbG9jLnByb3RvY29sICsgXCIvL1wiICsgdXJpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdXJpID0gXCJodHRwczovL1wiICsgdXJpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIHBhcnNlXG4gICAgICAgIG9iaiA9IHBhcnNlKHVyaSk7XG4gICAgfVxuICAgIC8vIG1ha2Ugc3VyZSB3ZSB0cmVhdCBgbG9jYWxob3N0OjgwYCBhbmQgYGxvY2FsaG9zdGAgZXF1YWxseVxuICAgIGlmICghb2JqLnBvcnQpIHtcbiAgICAgICAgaWYgKC9eKGh0dHB8d3MpJC8udGVzdChvYmoucHJvdG9jb2wpKSB7XG4gICAgICAgICAgICBvYmoucG9ydCA9IFwiODBcIjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICgvXihodHRwfHdzKXMkLy50ZXN0KG9iai5wcm90b2NvbCkpIHtcbiAgICAgICAgICAgIG9iai5wb3J0ID0gXCI0NDNcIjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBvYmoucGF0aCA9IG9iai5wYXRoIHx8IFwiL1wiO1xuICAgIGNvbnN0IGlwdjYgPSBvYmouaG9zdC5pbmRleE9mKFwiOlwiKSAhPT0gLTE7XG4gICAgY29uc3QgaG9zdCA9IGlwdjYgPyBcIltcIiArIG9iai5ob3N0ICsgXCJdXCIgOiBvYmouaG9zdDtcbiAgICAvLyBkZWZpbmUgdW5pcXVlIGlkXG4gICAgb2JqLmlkID0gb2JqLnByb3RvY29sICsgXCI6Ly9cIiArIGhvc3QgKyBcIjpcIiArIG9iai5wb3J0ICsgcGF0aDtcbiAgICAvLyBkZWZpbmUgaHJlZlxuICAgIG9iai5ocmVmID1cbiAgICAgICAgb2JqLnByb3RvY29sICtcbiAgICAgICAgICAgIFwiOi8vXCIgK1xuICAgICAgICAgICAgaG9zdCArXG4gICAgICAgICAgICAobG9jICYmIGxvYy5wb3J0ID09PSBvYmoucG9ydCA/IFwiXCIgOiBcIjpcIiArIG9iai5wb3J0KTtcbiAgICByZXR1cm4gb2JqO1xufVxuIiwiaW1wb3J0ICogYXMgdW5pdHMgZnJvbSBcIi4vdW5pdHMvdW5pdHMuanNcIjtcclxuaW1wb3J0IHsgc2hhZGVyQWRkIH0gZnJvbSBcIi4vcm5kL3NoYWRlcnMuanNcIjtcclxuaW1wb3J0IHsgbW91c2UsIGNhbSwgQ29udHJvbENhbWVyYSB9IGZyb20gXCIuL3V0aWxzL2NvbnRyb2xzLmpzXCI7XHJcbmltcG9ydCAqIGFzIGNvbnRyb2xzIGZyb20gXCIuL3V0aWxzL2NvbnRyb2xzLmpzXCI7XHJcbmltcG9ydCB7IGxvYWRPYmogfSBmcm9tIFwiLi9ybmQvcHJpbXMuanNcIjtcclxuXHJcbmltcG9ydCB7IGlvIH0gZnJvbSBcInNvY2tldC5pby1jbGllbnRcIjtcclxuXHJcbmNvbnN0IHNvY2tldCA9IGlvKCk7XHJcblxyXG5leHBvcnQgbGV0IGdsO1xyXG5sZXQgY2FudmFzO1xyXG5sZXQgY29vcmRzO1xyXG5leHBvcnQgbGV0IHVzZXJzID0gW107XHJcbmxldCBtZXNzYWdlc0hUTUw7XHJcblxyXG5mdW5jdGlvbiB1c2VyUmVsb2FkUmVzcG9uc2UocmVzKSB7XHJcbiAgdXNlcnMgPSByZXM7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIG1zZ1JlbG9hZFJlc3BvbnNlKHJlcykge1xyXG4gIG1lc3NhZ2VzSFRNTC5pbm5lckhUTUwgPSByZXNcclxuICAgIC5tYXAoXHJcbiAgICAgIChpdCkgPT5cclxuICAgICAgICBgPGxpIGNsYXNzPVwibWVzc2FnZVwiIGlkPVwiJHtcclxuICAgICAgICAgIGl0LnNlbmRlci51c2VyTmFtZSA9PSBzb2NrZXQudXNlck5hbWUgPyBcInVzZXJcIiA6IFwibm90VXNlclwiXHJcbiAgICAgICAgfVwiPiR7aXQuc2VuZGVyLnVzZXJOYW1lICsgXCIgOiBcIiArIGl0LnRleHR9XHJcbiAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImRlbGV0ZU1lc3NhZ2VcIiBpZD1cIiR7aXQuX2lkLnRvU3RyaW5nKCl9XCIgc3R5bGU9XCJcclxuICAgICAgICBmbG9hdDogcmlnaHQ7IGJvcmRlci1yYWRpdXM6IDEwcHg7XCI+IERlbGV0ZTwvYnV0dG9uPjxzcGFuIHN0eWxlPVwiXHJcbiAgICAgICAgZmxvYXQ6IHJpZ2h0O1wiPiR7aXQuZGF0ZX08L3NwYW4+XHJcbiAgICAgICAgPC9saT5gXHJcbiAgICApXHJcbiAgICAuam9pbihcIlwiKTtcclxuICBtZXNzYWdlc0hUTUwuc2Nyb2xsVG8oMCwgbWVzc2FnZXNIVE1MLnNjcm9sbEhlaWdodCk7XHJcbiAgd2luZG93LnNjcm9sbFRvKDAsIG1lc3NhZ2VzSFRNTC5zY3JvbGxIZWlnaHQpO1xyXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibXNnYm94XCIpLnNjcm9sbFRvcCA9XHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm1zZ2JveFwiKS5zY3JvbGxIZWlnaHQ7XHJcbiAgZm9yIChsZXQgYnRuIG9mIGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJkZWxldGVNZXNzYWdlXCIpKSB7XHJcbiAgICBidG4ub25jbGljayA9ICgpID0+IHtcclxuICAgICAgc29ja2V0LmVtaXQoXCJkZWxldGVNZXNzYWdlXCIsIGJ0bi5pZCk7XHJcbiAgICAgIC8vIHNvY2tldC5lbWl0KFwicmVsb2FkUmVxdWVzdFwiKTtcclxuICAgIH07XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBjb25uZWN0KCkge1xyXG4gIGxldCB1c2VyTmFtZSA9IHByb21wdChcIkVudGVyIHlvdXIgbmFtZVwiKTtcclxuICBjb25zb2xlLmxvZyhzb2NrZXQuaWQpOyAvLyB4OFdJdjctbUplbGc3b25fQUxieFxyXG4gIHNvY2tldC5lbWl0KFwicmVsb2FkUmVxdWVzdFwiKTtcclxuICBzb2NrZXQuZW1pdChcImF1dGhcIiwgdXNlck5hbWUpO1xyXG4gIHNvY2tldC51c2VyTmFtZSA9IHVzZXJOYW1lO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzZXR1cFNvY2tldCgpIHtcclxuICBzb2NrZXQub24oXCJjb25uZWN0XCIsIGNvbm5lY3QpO1xyXG4gIHNvY2tldC5vbihcInVzZXJSZWxvYWRSZXNwb25zZVwiLCB1c2VyUmVsb2FkUmVzcG9uc2UpO1xyXG4gIHNvY2tldC5vbihcIm1zZ1JlbG9hZFJlc3BvbnNlXCIsIG1zZ1JlbG9hZFJlc3BvbnNlKTtcclxuICBzb2NrZXQub24oXCJkaXNjb25uZWN0XCIsICgpID0+IHtcclxuICAgIGNvbnNvbGUubG9nKFwiZGlzY29ubmVjdGVkXCIpOyAvLyB1bmRlZmluZWRcclxuICB9KTtcclxufVxyXG5cclxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsICgpID0+IHtcclxuICBtZXNzYWdlc0hUTUwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm1lc3NhZ2VzXCIpO1xyXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiaWQxXCIpLm9ua2V5dXAgPSAoZXYpID0+IHtcclxuICAgIGlmIChldi5jb2RlID09PSBcIkVudGVyXCIpIHtcclxuICAgICAgY29uc3QgdmFsdWUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImlkMVwiKS52YWx1ZTtcclxuICAgICAgY29uc29sZS5sb2codmFsdWUpO1xyXG4gICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImlkMVwiKS52YWx1ZSA9IFwiXCI7XHJcbiAgICAgIHNvY2tldC5lbWl0KFwiTWVzc2FnZVRvU2VydmVyXCIsIHZhbHVlKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNsZWFyQnV0dG9uXCIpLm9uY2xpY2sgPSAoKSA9PiB7XHJcbiAgICBzb2NrZXQuZW1pdChcImNsZWFyQWxsTWVzc2FnZXNcIik7XHJcbiAgfTtcclxuXHJcbiAgc2V0dXBTb2NrZXQoKTtcclxuXHJcbiAgY2FudmFzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJnbENhbnZhc1wiKTtcclxuICBnbCA9IGNhbnZhcy5nZXRDb250ZXh0KFwid2ViZ2wyXCIpO1xyXG5cclxuICBjb29yZHMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNvb3Jkc1wiKTtcclxuXHJcbiAgaW5pdEdMKCk7XHJcbiAgd2luZG93Lm9ubW91c2Vtb3ZlID0gY29udHJvbHMuaGFuZGxlTW91c2VNb3ZlO1xyXG4gIHdpbmRvdy5vbm1vdXNlZG93biA9IGNvbnRyb2xzLmhhbmRsZU1vdXNlRG93bjtcclxuICB3aW5kb3cub25tb3VzZXVwID0gY29udHJvbHMuaGFuZGxlTW91c2VVcDtcclxuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImNvbnRleHRtZW51XCIsIChlKSA9PiBlLnByZXZlbnREZWZhdWx0KCkpO1xyXG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwid2hlZWxcIiwgKGV2ZW50KSA9PiB7XHJcbiAgICBjb250cm9scy5oYW5kbGVNb3VzZVpvb20oZXZlbnQpO1xyXG4gIH0pO1xyXG4gIHdpbmRvdy5vbnNjcm9sbCA9ICgpID0+IHdpbmRvdy5zY3JvbGwoMCwgMCk7XHJcblxyXG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwia2V5dXBcIiwgKGV2ZW50KSA9PiB7XHJcbiAgICBjb250cm9scy5oYW5kbGVLZXlVcChldmVudCk7XHJcbiAgfSk7XHJcbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIChldmVudCkgPT4ge1xyXG4gICAgY29udHJvbHMuaGFuZGxlS2V5RG93bihldmVudCk7XHJcbiAgfSk7XHJcbiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNmaWxlXCIpLmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgbG9hZE9iaik7XHJcblxyXG4gIGZ1bmN0aW9uIHRvdWNoSGFuZGxlcihldmVudCkge1xyXG4gICAgdmFyIHRvdWNoZXMgPSBldmVudC5jaGFuZ2VkVG91Y2hlcyxcclxuICAgICAgZmlyc3QgPSB0b3VjaGVzWzBdLFxyXG4gICAgICB0eXBlID0gXCJcIjtcclxuICAgIHN3aXRjaCAoZXZlbnQudHlwZSkge1xyXG4gICAgICBjYXNlIFwidG91Y2hzdGFydFwiOlxyXG4gICAgICAgIHR5cGUgPSBcIm1vdXNlZG93blwiO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIFwidG91Y2htb3ZlXCI6XHJcbiAgICAgICAgdHlwZSA9IFwibW91c2Vtb3ZlXCI7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgXCJ0b3VjaGVuZFwiOlxyXG4gICAgICAgIHR5cGUgPSBcIm1vdXNldXBcIjtcclxuICAgICAgICBicmVhaztcclxuICAgICAgZGVmYXVsdDpcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICB2YXIgc2ltdWxhdGVkRXZlbnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudChcIk1vdXNlRXZlbnRcIik7XHJcbiAgICBzaW11bGF0ZWRFdmVudC5pbml0TW91c2VFdmVudChcclxuICAgICAgdHlwZSxcclxuICAgICAgdHJ1ZSxcclxuICAgICAgdHJ1ZSxcclxuICAgICAgd2luZG93LFxyXG4gICAgICAxLFxyXG4gICAgICBmaXJzdC5zY3JlZW5YLFxyXG4gICAgICBmaXJzdC5zY3JlZW5ZLFxyXG4gICAgICBmaXJzdC5jbGllbnRYLFxyXG4gICAgICBmaXJzdC5jbGllbnRZLFxyXG4gICAgICBmYWxzZSxcclxuICAgICAgZmFsc2UsXHJcbiAgICAgIGZhbHNlLFxyXG4gICAgICBmYWxzZSxcclxuICAgICAgMCAvKmxlZnQqLyxcclxuICAgICAgbnVsbFxyXG4gICAgKTtcclxuXHJcbiAgICBmaXJzdC50YXJnZXQuZGlzcGF0Y2hFdmVudChzaW11bGF0ZWRFdmVudCk7XHJcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gIH1cclxuXHJcbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNoc3RhcnRcIiwgdG91Y2hIYW5kbGVyLCB0cnVlKTtcclxuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwidG91Y2htb3ZlXCIsIHRvdWNoSGFuZGxlciwgdHJ1ZSk7XHJcbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNoZW5kXCIsIHRvdWNoSGFuZGxlciwgdHJ1ZSk7XHJcbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNoY2FuY2VsXCIsIHRvdWNoSGFuZGxlciwgdHJ1ZSk7XHJcbn0pO1xyXG5cclxuY29uc3QgZHJhdyA9ICgpID0+IHtcclxuICBnbC5jbGVhckNvbG9yKDAuOCwgMC40NywgMC4zLCAxLjApO1xyXG4gIGdsLmNsZWFyKGdsLkNPTE9SX0JVRkZFUl9CSVQgfCBnbC5ERVBUSF9CVUZGRVJfQklUKTtcclxuXHJcbiAgY2FudmFzLndpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XHJcbiAgY2FudmFzLmhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcclxuICBnbC52aWV3cG9ydChcclxuICAgIDAsXHJcbiAgICAwLFxyXG4gICAgY2FtLmZyYW1lVyxcclxuICAgIGNhbS5mcmFtZUhcclxuICAgIC8vICBNYXRoLm1heChnbC5jYW52YXMud2lkdGgsIGdsLmNhbnZhcy5oZWlnaHQpXHJcbiAgKTtcclxuICBDb250cm9sQ2FtZXJhKCk7XHJcblxyXG4gIGNhbS5zZXRTaXplKGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XHJcbiAgLy9jYW0uZnJhbWVIID0gY2FudmFzLmhlaWdodDtcclxuICAvL2NhbS5mcmFtZVcgPSBjYW52YXMud2lkdGg7XHJcbiAgY2FtLmNhbVNldChjYW0ubG9jLCBjYW0uYXQsIGNhbS51cCwgY2FtLnBvcywgY2FtLnVzZXJMb2MpO1xyXG5cclxuICBjb29yZHMuaW5uZXJIVE1MID1cclxuICAgIFwiTG9jWDogXCIgK1xyXG4gICAgY2FtLmxvYy54LnRvU3RyaW5nKCkuc2xpY2UoMCwgNSkgK1xyXG4gICAgXCIgTG9jWTogXCIgK1xyXG4gICAgY2FtLmxvYy55LnRvU3RyaW5nKCkuc2xpY2UoMCwgNSkgK1xyXG4gICAgXCIgTG9jWjogXCIgK1xyXG4gICAgY2FtLmxvYy56LnRvU3RyaW5nKCkuc2xpY2UoMCwgNSkgK1xyXG4gICAgXCI8YnIgLz5cIiArXHJcbiAgICBcIiBEaXIgWDogXCIgK1xyXG4gICAgY2FtLmRpci54LnRvU3RyaW5nKCkuc2xpY2UoMCwgNSkgK1xyXG4gICAgXCIgRGlyIFk6IFwiICtcclxuICAgIGNhbS5kaXIueS50b1N0cmluZygpLnNsaWNlKDAsIDUpICtcclxuICAgIFwiIERpciBaOiBcIiArXHJcbiAgICBjYW0uZGlyLnoudG9TdHJpbmcoKS5zbGljZSgwLCA1KSArXHJcbiAgICBcIjxiciAvPlwiICtcclxuICAgIFwiIFVwIFg6IFwiICtcclxuICAgIGNhbS51cC54LnRvU3RyaW5nKCkuc2xpY2UoMCwgNSkgK1xyXG4gICAgXCIgVXAgWTogXCIgK1xyXG4gICAgY2FtLnVwLnkudG9TdHJpbmcoKS5zbGljZSgwLCA1KSArXHJcbiAgICBcIiBVcCBaOiBcIiArXHJcbiAgICBjYW0udXAuei50b1N0cmluZygpLnNsaWNlKDAsIDUpICtcclxuICAgIFwiPGJyIC8+XCIgK1xyXG4gICAgXCIgQXQgWDogXCIgK1xyXG4gICAgY2FtLmF0LngudG9TdHJpbmcoKS5zbGljZSgwLCA1KSArXHJcbiAgICBcIiBBdCBZOiBcIiArXHJcbiAgICBjYW0uYXQueS50b1N0cmluZygpLnNsaWNlKDAsIDUpICtcclxuICAgIFwiIEF0IFo6IFwiICtcclxuICAgIGNhbS5hdC56LnRvU3RyaW5nKCkuc2xpY2UoMCwgNSkgK1xyXG4gICAgXCI8YnIgLz5cIjtcclxuXHJcbiAgdW5pdHMucmVuZGVyKCk7XHJcblxyXG4gIG1vdXNlLmR4ID0gbW91c2UuZHkgPSBtb3VzZS5keiA9IDA7IC8v0LrQvtGB0YLRi9C70YwgYmVjYXVzZSBpZGsgaG93IHRvIHNlZSBlbmQgb2YgbW91c2UgbW92ZVxyXG4gIHNvY2tldC5lbWl0KFwicmVsb2FkUmVxdWVzdFwiLCBjYW0pO1xyXG4gIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZHJhdyk7XHJcbn07XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaW5pdEdMKCkge1xyXG4gIGdsLmNsZWFyQ29sb3IoMSwgMSwgMCwgMSk7XHJcbiAgZ2wuY2xlYXIoZ2wuQ09MT1JfQlVGRkVSX0JJVCk7XHJcbiAgZ2wuZW5hYmxlKGdsLkRFUFRIX1RFU1QpO1xyXG5cclxuICAvL2dsLmVuYWJsZShnbC5DVUxMX0ZBQ0UpO1xyXG4gIGdsLnZpZXdwb3J0KDAsIDAsIGdsLmNhbnZhcy53aWR0aCwgZ2wuY2FudmFzLmhlaWdodCk7IC8qIERlbGV0ZSB0aGlzIG1iKi9cclxuICBjYW52YXMud2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcclxuICBjYW52YXMuaGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0O1xyXG4gIENvbnRyb2xDYW1lcmEoKTtcclxuICBjYW0uc2V0U2l6ZShjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xyXG4gIGNhbS5jYW1TZXQoY2FtLmxvYywgY2FtLmF0LCBjYW0udXAsIGNhbS5wb3MsIGNhbS51c2VyTG9jKTtcclxuXHJcbiAgYXdhaXQgc2hhZGVyQWRkKFwiZGVmYXVsdFwiKTtcclxuICBhd2FpdCB1bml0cy5pbml0KCk7XHJcbiAgZHJhdygpO1xyXG59XHJcbiJdLCJuYW1lcyI6WyJ2ZWMyIiwiY29uc3RydWN0b3IiLCJ4IiwieSIsInRoaXMiLCJhZGQiLCJ2ZWMiLCJzdWIiLCJtdWwiLCJuIiwiZGl2IiwibmVnIiwiZG90IiwiY3Jvc3MiLCJsZW4yIiwibGVuIiwiTWF0aCIsInNxcnQiLCJub3JtYWxpemUiLCJsZXJwIiwiYyIsInZlYzMiLCJ6IiwiZXEiLCJtdWxNYXRyIiwibSIsInciLCJhbmdsZSIsInVwIiwiY29zVGgiLCJhY29zIiwieHh4IiwieXl5Iiwienp6IiwiY29weSIsInZlYzQiLCJtYXRyNCIsImEiLCJ0cmFuc2xhdGUiLCJzY2FsZSIsInJvdGF0ZVgiLCJhbmdsZUluRGVncmVlIiwiUEkiLCJzaW5lIiwic2luIiwiY29zaW5lIiwiY29zIiwicm90YXRlWSIsInJvdGF0ZVoiLCJyb3RhdGUiLCJ2Iiwic2kiLCJjbyIsInRyYW5zcG9zZSIsInJlcyIsImRldGVybTN4MyIsIkExMSIsIkExMiIsIkExMyIsIkEyMSIsIkEyMiIsIkEyMyIsIkEzMSIsIkEzMiIsIkEzMyIsImRldGVybSIsImludmVyc2UiLCJkZXQiLCJyIiwidmlldyIsImxvYyIsImF0IiwidXAxIiwiZGlyIiwicmlnaHQiLCJvcnRobyIsImxlZnQiLCJib3R0b20iLCJ0b3AiLCJuZWFyIiwiZmFyIiwiZnJ1c3R1bSIsImtleXMiLCJtb3VzZSIsInNhdmVkWCIsInNhdmVkWSIsInpvb20iLCJkeCIsImR5IiwiZHoiLCJpc0Rvd24iLCJpc1JEb3duIiwiY2FtIiwicHJvalNpemUiLCJwcm9qRGlzdCIsInByb2pGYXJDbGlwIiwiZnJhbWVXIiwiZnJhbWVIIiwibWF0clZpZXciLCJtYXRyUHJvaiIsIm1hdHJWUCIsImlkIiwicmFuZG9tIiwidG9TdHJpbmciLCJzZXREZWYiLCJjYW1TZXQiLCJwb3MiLCJ1c2VyTG9jIiwibXlNYXRyNCIsInNldFByb2oiLCJyeCIsInJ5Iiwic2V0U2l6ZSIsImhhbmRsZU1vdXNlTW92ZSIsImV2ZW50IiwicGFnZVgiLCJwYWdlWSIsImhhbmRsZU1vdXNlRG93biIsImJ1dHRvbiIsImhhbmRsZU1vdXNlVXAiLCJhbmdsZVNwZWVkIiwic3BlZWQiLCJ1c2VyRGlyIiwiYWNjZWxlcmF0aW9uIiwiZGVjZWxlcmF0aW9uIiwicm90QW5nbGUiLCJtYXhSb3RBbmdsZSIsImFuZ2xlQWNjZWxlcmF0aW9uIiwiYW5nbGVEZWNlbGVyYXRpb24iLCJDb250cm9sQ2FtZXJhIiwiYWJzIiwiY29ycmVjdERpciIsImJpa2UiLCJjYWxjdWxhdGVOb3JtYWxzIiwiaW5kcyIsInB0cyIsImsiLCJBcnJheSIsImxlbmd0aCIsImkiLCJub3JtYWxzIiwicDAiLCJwMSIsInAyIiwic2hhZGVycyIsInNoYWRlciIsInZzIiwiZnMiLCJzaGFkZXJQcm9ncmFtIiwiYXN5bmMiLCJzaGFkZXJBZGQiLCJmaWxlTmFtZSIsImxvYWRTaGFkZXIiLCJnbCIsInR5cGUiLCJzb3VyY2UiLCJjcmVhdGVTaGFkZXIiLCJzaGFkZXJTb3VyY2UiLCJjb21waWxlU2hhZGVyIiwiZnQxIiwiZmV0Y2giLCJ0aGVuIiwidGV4dCIsImRhdGEiLCJmdDIiLCJhbGxEYXRhIiwiUHJvbWlzZSIsImFsbCIsInZlcnRleFNoYWRlciIsIlZFUlRFWF9TSEFERVIiLCJmcmFnbWVudFNoYWRlciIsIkZSQUdNRU5UX1NIQURFUiIsImNyZWF0ZVByb2dyYW0iLCJhdHRhY2hTaGFkZXIiLCJsaW5rUHJvZ3JhbSIsImdldFByb2dyYW1QYXJhbWV0ZXIiLCJMSU5LX1NUQVRVUyIsIkJ1ZiIsImdldFByb2dyYW1JbmZvTG9nIiwiY29uc29sZSIsImxvZyIsInB1c2giLCJ1c2VTaGFkZXIiLCJ2ZXJ0aWNlcyIsImluZGljZXMiLCJwb3NMb2MiLCJnZXRBdHRyaWJMb2NhdGlvbiIsInBvc2l0aW9uQnVmZmVyIiwiY3JlYXRlQnVmZmVyIiwiYmluZEJ1ZmZlciIsIkFSUkFZX0JVRkZFUiIsImJ1ZmZlckRhdGEiLCJTVEFUSUNfRFJBVyIsImVuYWJsZVZlcnRleEF0dHJpYkFycmF5IiwidmVydGV4QXR0cmliUG9pbnRlciIsIkZMT0FUIiwibm9ybWFsTG9jIiwibm9ybWFsQnVmZmVyIiwiRmxvYXQzMkFycmF5IiwiaW5kZXhCdWZmZXIiLCJFTEVNRU5UX0FSUkFZX0JVRkZFUiIsImN1YmVWZXJ0ZXhQb3NpdGlvbnMiLCJjdWJlVmVydGV4SW5kaWNlcyIsIlVpbnQxNkFycmF5IiwiY3ViZVZlcnRleEFycmF5Iiwic2hhZGVySSIsInJlbmRlciIsInVzZVByb2dyYW0iLCJ0aW1lTG9jIiwiZ2V0VW5pZm9ybUxvY2F0aW9uIiwicHJvamVjdGlvbkxvYyIsIm1vZGVsVmlld0xvYyIsIndvcmxkTG9jIiwiYmluZFZlcnRleEFycmF5IiwidW5pZm9ybU1hdHJpeDRmdiIsImpvaW4iLCJzcGxpdCIsInVuaWZvcm0xZiIsIkRhdGUiLCJub3ciLCJsaWdodERpckxvYyIsImNhbUxvY0xvYyIsInVuaWZvcm0zZiIsImthTG9jIiwia2RMb2MiLCJrc0xvYyIsInBoTG9jIiwiZHJhd0VsZW1lbnRzIiwiVFJJQU5HTEVTIiwiVU5TSUdORURfU0hPUlQiLCJpbml0IiwiY3JlYXRlVmVydGV4QXJyYXkiLCJ0ZXRyVmVydGV4UG9zaXRpb25zIiwidGV0clZlcnRleEluZGljZXMiLCJ0ZXRyVmVydGV4QXJyYXkiLCJvY3RhVmVydGV4UG9zaXRpb25zIiwib2N0YVZlcnRleEluZGljZXMiLCJvY3RhVmVydGV4QXJyYXkiLCJQSEkiLCJpY29WZXJ0ZXhQb3NpdGlvbnMiLCJpY29WZXJ0ZXhJbmRpY2VzIiwiaWNvVmVydGV4QXJyYXkiLCJjb2xvckxvYyIsIm1hdHJpY2VzIiwiY29sb3IiLCJ1bmlmb3JtNGYiLCJmb3JFYWNoIiwiaXQiLCJkcmF3QXJyYXlzIiwibWFya2VyRHJhdyIsInN0YXJ0IiwiZW5kIiwid2lkdGgiLCJjZW50ZXJlZCIsInByaW1pdGl2ZXMiLCJtdGwiLCJuYW1lIiwia2EiLCJrZCIsImtzIiwicGgiLCJ0cmFucyIsInNoYWRlck5hbWUiLCJ0ZXgiLCJsb2FkT2JqIiwiaW5wdXQiLCJmaWxlIiwidGFyZ2V0IiwiZmlsZXMiLCJyZWFkZXIiLCJGaWxlUmVhZGVyIiwicmVhZEFzVGV4dCIsIm9ubG9hZCIsImUiLCJwcmltTG9hZE9iaiIsInJlc3VsdCIsIm9uZXJyb3IiLCJlcnJvciIsInN0cmluZ3MiLCJzdHJpbmciLCJyZWFsViIsImluZGV4IiwidmVydGV4IiwicHJpbSIsImNyZWF0ZSIsInAiLCJ0IiwidkJ1ZiIsImlCdWYiLCJ2YSIsImRyYXciLCJ3b3JsZCIsIm1hcCIsImVsIiwiZmxhdCIsInBsYW5lVmVydGV4UG9zaXRpb25zIiwicGxhbmVWZXJ0ZXhBcnJheSIsImRvZGUiLCJwcmltaXRpdmUiLCJvYmoiLCJwciIsInN1Y2Nlc3MiLCJmbG9vciIsImNhdGNoIiwicGxhY2VzSFRNTCIsInNpZGUiLCJ1c2VyQ2FtIiwidXNlcnMiLCJjbGlwc3BhY2UiLCJwaXhlbFgiLCJjYW52YXMiLCJwaXhlbFkiLCJoZWlnaHQiLCJwbGFjZVRhZyIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsIm5hbWVUYWciLCJjcmVhdGVUZXh0Tm9kZSIsInVzZXJOYW1lIiwiYXBwZW5kQ2hpbGQiLCJjbGFzc05hbWUiLCJzdHlsZSIsInBvc2l0aW9uIiwiZm9udFNpemUiLCJmb250RmFtaWx5IiwiYmFja2dyb3VuZENvbG9yIiwiYm9yZGVyUmFkaXVzIiwicGFkZGluZ1JpZ2h0IiwicGFkZGluZ0xlZnQiLCJnZXRFbGVtZW50QnlJZCIsInNpemUiLCJtYXhUaWxlUmVuZGVyTGVuZ3RoIiwibWFwVmVydGV4VGV4Y29vcmRzIiwidGlsZVZBIiwidGlsZXMiLCJvbGRVc2VyTG9jIiwibWF4VGlsZVJlbmRlckxlbmd0aDIiLCJtYXhUaWxlUmVuZGVyQnVmZmVyTGVuZ3RoMiIsInN0YXJ0VGlsZVgiLCJsb24iLCJwb3ciLCJsb24ydGlsZSIsInN0YXJ0VGlsZVkiLCJsYXQiLCJ0YW4iLCJsYXQydGlsZSIsImxvYWRQbGFjZUNhdGVnb3J5IiwicGxhY2VzIiwiY2F0ZWdvcnkiLCJhbW91bnQiLCJwbGFjZXNVcmwiLCJ0aWxlMmxvbiIsInRpbGUybGF0IiwibWV0aG9kIiwianNvbiIsImZlYXR1cmVzIiwiZmVhdHVyZSIsInByb3BlcnRpZXMiLCJsb24ycGxhY2UiLCJsYXQycGxhY2UiLCJmaWx0ZXIiLCJ0aWxlIiwiYmxvY2tQb3MiLCJsb2FkQ291bnRlciIsInVybCIsInJlc3BvbnNlIiwib2siLCJibG9iIiwiaW1hZ2VCTSIsImNyZWF0ZUltYWdlQml0bWFwIiwidGV4dHVyZSIsImNyZWF0ZVRleHR1cmUiLCJiaW5kVGV4dHVyZSIsIlRFWFRVUkVfMkQiLCJ0ZXhJbWFnZTJEIiwiUkdCQSIsIlVOU0lHTkVEX0JZVEUiLCJ0ZXhQYXJhbWV0ZXJpIiwiVEVYVFVSRV9NSU5fRklMVEVSIiwiTkVBUkVTVCIsIlRFWFRVUkVfTUFHX0ZJTFRFUiIsIlRFWFRVUkVfV1JBUF9TIiwiQ0xBTVBfVE9fRURHRSIsIlRFWFRVUkVfV1JBUF9UIiwiaXNMb2FkZWQiLCJsb2FkIiwic3RhdHVzIiwidGV4TG9jIiwidXNlckJsb2NrUG9zIiwiZmluZCIsIm5ld1RpbGUiLCJyZWxvYWRUaWxlcyIsImlubmVySFRNTCIsImFjdGl2ZVRleHR1cmUiLCJURVhUVVJFMCIsInVuaWZvcm0xaSIsInRleGNvb3JkTG9jIiwidGV4Y29vcmRCdWZmZXIiLCJhdGFuIiwiZXhwIiwic2t5U2hhZGVyIiwiZnJhY1ZlcnRleEFycmF5IiwicmNvZWZmIiwiZ2NvZWZmIiwiYmNvZWZmIiwiYiIsImZiVGV4dHVyZVdpZHRoIiwiZmJUZXh0dXJlSGVpZ2h0IiwiZmIiLCJmYlRleHR1cmUiLCJkZXB0aFJCIiwic3RhcnRUaW1lIiwidGV4VW5pdCIsImRpc2FibGUiLCJERVBUSF9URVNUIiwiYmluZEZyYW1lYnVmZmVyIiwiRlJBTUVCVUZGRVIiLCJ2aWV3cG9ydCIsInhMb2MiLCJ5TG9jIiwicmNvZWZmTG9jIiwiZ2NvZWZmTG9jIiwiYmNvZWZmTG9jIiwiYUxvYyIsImJMb2MiLCJ2YWx1ZSIsIlRSSUFOR0xFX1NUUklQIiwiY2FtRGlyTG9jIiwiY2FtVXBMb2MiLCJjYW1SaWdodExvYyIsInByb2pEaXN0TG9jIiwiZnJhbWVXTG9jIiwiZnJhbWVITG9jIiwiZW5hYmxlIiwiTElORUFSIiwiY3JlYXRlUmVuZGVyYnVmZmVyIiwiYmluZFJlbmRlcmJ1ZmZlciIsIlJFTkRFUkJVRkZFUiIsInJlbmRlcmJ1ZmZlclN0b3JhZ2UiLCJERVBUSF9DT01QT05FTlQxNiIsImNyZWF0ZUZyYW1lYnVmZmVyIiwiZnJhbWVidWZmZXJUZXh0dXJlMkQiLCJDT0xPUl9BVFRBQ0hNRU5UMCIsImZyYW1lYnVmZmVyUmVuZGVyYnVmZmVyIiwiREVQVEhfQVRUQUNITUVOVCIsIm9uY2xpY2siLCJ2aXNpYmlsaXR5Iiwibm9ydGgiLCJiYWNrZ3JvdW5kUG9zaXRpb24iLCJmbGFnIiwiaCIsIm51bU9mQ29uc3RyYWludHMiLCJjb25zdHJhaW50cyIsIm9sZFAiLCJmb3JjZXMiLCJ3aW5kIiwid2VpZ2h0IiwiZnJpY3Rpb24iLCJzdGlmZm5lc3MiLCJoYW5kbGVDb2xsaXNpb25zIiwiaGFuZGxlSGFyZENvbnN0cmFpbnRzIiwibnVtSXRlcmF0aW9ucyIsImNyZWF0ZURlZmF1bHQiLCJwYXJ0aWNsZUEiLCJwYXJ0aWNsZUIiLCJyZXN0TGVuZ3RoIiwiZGFtcGVyIiwic3RyZXRjaCIsImFjY3VtdWxhdGVGb3JjZXMiLCJ2ZXJsZXRTdGVwIiwib2xkUG9zIiwibmV3UG9zIiwic2F0aXNmeUNvbnN0cmFpbnRzIiwiaXRlcmF0aW9uIiwiY29uc3RyYWludCIsImRlbHRhIiwidXBkYXRlIiwic29tZUNsb3RoIiwidW5pdCIsImlzVG9SZW5kZXIiLCJ1bml0cyIsInVuaXRBZGQiLCJsYWJlbCIsImNoZWNrZWQiLCJQQUNLRVRfVFlQRVMiLCJPYmplY3QiLCJQQUNLRVRfVFlQRVNfUkVWRVJTRSIsImtleSIsIkVSUk9SX1BBQ0tFVCIsIndpdGhOYXRpdmVCbG9iIiwiQmxvYiIsInByb3RvdHlwZSIsImNhbGwiLCJ3aXRoTmF0aXZlQXJyYXlCdWZmZXIiLCJBcnJheUJ1ZmZlciIsImVuY29kZVBhY2tldCIsInN1cHBvcnRzQmluYXJ5IiwiY2FsbGJhY2siLCJlbmNvZGVCbG9iQXNCYXNlNjQiLCJpc1ZpZXciLCJidWZmZXIiLCJmaWxlUmVhZGVyIiwiY29udGVudCIsInJlYWRBc0RhdGFVUkwiLCJjaGFycyIsImxvb2t1cCIsIlVpbnQ4QXJyYXkiLCJjaGFyQ29kZUF0IiwiZGVjb2RlUGFja2V0IiwiZW5jb2RlZFBhY2tldCIsImJpbmFyeVR5cGUiLCJtYXBCaW5hcnkiLCJjaGFyQXQiLCJkZWNvZGVCYXNlNjRQYWNrZXQiLCJzdWJzdHJpbmciLCJkZWNvZGVkIiwiYmFzZTY0IiwiZW5jb2RlZDEiLCJlbmNvZGVkMiIsImVuY29kZWQzIiwiZW5jb2RlZDQiLCJidWZmZXJMZW5ndGgiLCJhcnJheWJ1ZmZlciIsImJ5dGVzIiwiZGVjb2RlIiwiU0VQQVJBVE9SIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwiRW1pdHRlciIsIm1peGluIiwib24iLCJhZGRFdmVudExpc3RlbmVyIiwiZm4iLCJfY2FsbGJhY2tzIiwib25jZSIsIm9mZiIsImFwcGx5IiwiYXJndW1lbnRzIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiY2IiLCJjYWxsYmFja3MiLCJzcGxpY2UiLCJlbWl0IiwiYXJncyIsInNsaWNlIiwiZW1pdFJlc2VydmVkIiwibGlzdGVuZXJzIiwiaGFzTGlzdGVuZXJzIiwiZ2xvYmFsVGhpc1NoaW0iLCJzZWxmIiwid2luZG93IiwiRnVuY3Rpb24iLCJwaWNrIiwiYXR0ciIsInJlZHVjZSIsImFjYyIsImhhc093blByb3BlcnR5IiwiTkFUSVZFX1NFVF9USU1FT1VUIiwiZ2xvYmFsVGhpcyIsInNldFRpbWVvdXQiLCJOQVRJVkVfQ0xFQVJfVElNRU9VVCIsImNsZWFyVGltZW91dCIsImluc3RhbGxUaW1lckZ1bmN0aW9ucyIsIm9wdHMiLCJ1c2VOYXRpdmVUaW1lcnMiLCJzZXRUaW1lb3V0Rm4iLCJiaW5kIiwiY2xlYXJUaW1lb3V0Rm4iLCJUcmFuc3BvcnRFcnJvciIsIkVycm9yIiwicmVhc29uIiwiZGVzY3JpcHRpb24iLCJjb250ZXh0Iiwic3VwZXIiLCJUcmFuc3BvcnQiLCJ3cml0YWJsZSIsInF1ZXJ5Iiwic29ja2V0Iiwib25FcnJvciIsIm9wZW4iLCJyZWFkeVN0YXRlIiwiZG9PcGVuIiwiY2xvc2UiLCJkb0Nsb3NlIiwib25DbG9zZSIsInNlbmQiLCJwYWNrZXRzIiwid3JpdGUiLCJvbk9wZW4iLCJvbkRhdGEiLCJwYWNrZXQiLCJvblBhY2tldCIsImRldGFpbHMiLCJwYXVzZSIsIm9uUGF1c2UiLCJhbHBoYWJldCIsInByZXYiLCJzZWVkIiwiZW5jb2RlIiwibnVtIiwiZW5jb2RlZCIsInllYXN0Iiwic3RyIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiWE1MSHR0cFJlcXVlc3QiLCJlcnIiLCJoYXNDT1JTIiwiWEhSIiwieGRvbWFpbiIsImNvbmNhdCIsImVtcHR5IiwiaGFzWEhSMiIsInJlc3BvbnNlVHlwZSIsIlJlcXVlc3QiLCJ1cmkiLCJ1bmRlZmluZWQiLCJ4ZCIsInhzY2hlbWUiLCJ4cyIsInhociIsImV4dHJhSGVhZGVycyIsInNldERpc2FibGVIZWFkZXJDaGVjayIsInNldFJlcXVlc3RIZWFkZXIiLCJ3aXRoQ3JlZGVudGlhbHMiLCJyZXF1ZXN0VGltZW91dCIsInRpbWVvdXQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJvbkxvYWQiLCJyZXF1ZXN0c0NvdW50IiwicmVxdWVzdHMiLCJjbGVhbnVwIiwiZnJvbUVycm9yIiwiYWJvcnQiLCJyZXNwb25zZVRleHQiLCJhdHRhY2hFdmVudCIsInVubG9hZEhhbmRsZXIiLCJuZXh0VGljayIsInJlc29sdmUiLCJXZWJTb2NrZXQiLCJNb3pXZWJTb2NrZXQiLCJpc1JlYWN0TmF0aXZlIiwibmF2aWdhdG9yIiwicHJvZHVjdCIsInRvTG93ZXJDYXNlIiwidHJhbnNwb3J0cyIsIndlYnNvY2tldCIsImZvcmNlQmFzZTY0IiwiY2hlY2siLCJwcm90b2NvbHMiLCJoZWFkZXJzIiwid3MiLCJhZGRFdmVudExpc3RlbmVycyIsIm9ub3BlbiIsImF1dG9VbnJlZiIsIl9zb2NrZXQiLCJ1bnJlZiIsIm9uY2xvc2UiLCJjbG9zZUV2ZW50Iiwib25tZXNzYWdlIiwiZXYiLCJsYXN0UGFja2V0Iiwic2NoZW1hIiwic2VjdXJlIiwicG9ydCIsIk51bWJlciIsInRpbWVzdGFtcFJlcXVlc3RzIiwidGltZXN0YW1wUGFyYW0iLCJiNjQiLCJlbmNvZGVkUXVlcnkiLCJob3N0bmFtZSIsImluZGV4T2YiLCJwYXRoIiwicG9sbGluZyIsImxvY2F0aW9uIiwiaXNTU0wiLCJwcm90b2NvbCIsInBvbGwiLCJ0b3RhbCIsImRvUG9sbCIsImVuY29kZWRQYXlsb2FkIiwiZW5jb2RlZFBhY2tldHMiLCJkZWNvZGVkUGFja2V0IiwiZGVjb2RlUGF5bG9hZCIsImNvdW50IiwiZW5jb2RlUGF5bG9hZCIsImRvV3JpdGUiLCJzaWQiLCJyZXF1ZXN0IiwiYXNzaWduIiwicmVxIiwieGhyU3RhdHVzIiwicG9sbFhociIsInJlIiwicGFydHMiLCJwYXJzZSIsInNyYyIsInJlcGxhY2UiLCJleGVjIiwiaG9zdCIsImF1dGhvcml0eSIsImlwdjZ1cmkiLCJwYXRoTmFtZXMiLCJyZWd4IiwibmFtZXMiLCJxdWVyeUtleSIsIiQwIiwiJDEiLCIkMiIsIlNvY2tldCIsIndyaXRlQnVmZmVyIiwicHJldkJ1ZmZlckxlbiIsImFnZW50IiwidXBncmFkZSIsInJlbWVtYmVyVXBncmFkZSIsImFkZFRyYWlsaW5nU2xhc2giLCJyZWplY3RVbmF1dGhvcml6ZWQiLCJwZXJNZXNzYWdlRGVmbGF0ZSIsInRocmVzaG9sZCIsInRyYW5zcG9ydE9wdGlvbnMiLCJjbG9zZU9uQmVmb3JldW5sb2FkIiwicXMiLCJxcnkiLCJwYWlycyIsImwiLCJwYWlyIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwidXBncmFkZXMiLCJwaW5nSW50ZXJ2YWwiLCJwaW5nVGltZW91dCIsInBpbmdUaW1lb3V0VGltZXIiLCJiZWZvcmV1bmxvYWRFdmVudExpc3RlbmVyIiwidHJhbnNwb3J0Iiwib2ZmbGluZUV2ZW50TGlzdGVuZXIiLCJjcmVhdGVUcmFuc3BvcnQiLCJFSU8iLCJwcmlvcldlYnNvY2tldFN1Y2Nlc3MiLCJzaGlmdCIsInNldFRyYW5zcG9ydCIsIm9uRHJhaW4iLCJwcm9iZSIsImZhaWxlZCIsIm9uVHJhbnNwb3J0T3BlbiIsIm1zZyIsInVwZ3JhZGluZyIsImZsdXNoIiwiZnJlZXplVHJhbnNwb3J0Iiwib25UcmFuc3BvcnRDbG9zZSIsIm9udXBncmFkZSIsInRvIiwib25IYW5kc2hha2UiLCJKU09OIiwicmVzZXRQaW5nVGltZW91dCIsInNlbmRQYWNrZXQiLCJjb2RlIiwiZmlsdGVyVXBncmFkZXMiLCJtYXhQYXlsb2FkIiwiZ2V0V3JpdGFibGVQYWNrZXRzIiwicGF5bG9hZFNpemUiLCJ1dGY4TGVuZ3RoIiwiY2VpbCIsImJ5dGVMZW5ndGgiLCJvcHRpb25zIiwiY29tcHJlc3MiLCJjbGVhbnVwQW5kQ2xvc2UiLCJ3YWl0Rm9yVXBncmFkZSIsImZpbHRlcmVkVXBncmFkZXMiLCJqIiwiU29ja2V0JDEiLCJ3aXRoTmF0aXZlRmlsZSIsIkZpbGUiLCJpc0JpbmFyeSIsImhhc0JpbmFyeSIsInRvSlNPTiIsImlzQXJyYXkiLCJkZWNvbnN0cnVjdFBhY2tldCIsImJ1ZmZlcnMiLCJwYWNrZXREYXRhIiwicGFjayIsIl9kZWNvbnN0cnVjdFBhY2tldCIsImF0dGFjaG1lbnRzIiwicGxhY2Vob2xkZXIiLCJfcGxhY2Vob2xkZXIiLCJuZXdEYXRhIiwicmVjb25zdHJ1Y3RQYWNrZXQiLCJfcmVjb25zdHJ1Y3RQYWNrZXQiLCJSRVNFUlZFRF9FVkVOVFMiLCJQYWNrZXRUeXBlIiwiaXNPYmplY3QiLCJEZWNvZGVyIiwicmV2aXZlciIsInJlY29uc3RydWN0b3IiLCJkZWNvZGVTdHJpbmciLCJpc0JpbmFyeUV2ZW50IiwiQklOQVJZX0VWRU5UIiwiQklOQVJZX0FDSyIsIkVWRU5UIiwiQUNLIiwiQmluYXJ5UmVjb25zdHJ1Y3RvciIsInRha2VCaW5hcnlEYXRhIiwiYnVmIiwibnNwIiwibmV4dCIsInBheWxvYWQiLCJ0cnlQYXJzZSIsInN1YnN0ciIsImlzUGF5bG9hZFZhbGlkIiwic3RhdGljIiwiQ09OTkVDVCIsIkRJU0NPTk5FQ1QiLCJDT05ORUNUX0VSUk9SIiwiZGVzdHJveSIsImZpbmlzaGVkUmVjb25zdHJ1Y3Rpb24iLCJyZWNvblBhY2siLCJiaW5EYXRhIiwicmVwbGFjZXIiLCJlbmNvZGVBc1N0cmluZyIsImVuY29kZUFzQmluYXJ5Iiwic3RyaW5naWZ5IiwiZGVjb25zdHJ1Y3Rpb24iLCJ1bnNoaWZ0IiwiZnJlZXplIiwiY29ubmVjdCIsImNvbm5lY3RfZXJyb3IiLCJkaXNjb25uZWN0IiwiZGlzY29ubmVjdGluZyIsIm5ld0xpc3RlbmVyIiwiaW8iLCJjb25uZWN0ZWQiLCJyZWNvdmVyZWQiLCJyZWNlaXZlQnVmZmVyIiwic2VuZEJ1ZmZlciIsIl9xdWV1ZSIsIl9xdWV1ZVNlcSIsImlkcyIsImFja3MiLCJmbGFncyIsImF1dGgiLCJfb3B0cyIsIl9hdXRvQ29ubmVjdCIsImRpc2Nvbm5lY3RlZCIsInN1YkV2ZW50cyIsInN1YnMiLCJvbnBhY2tldCIsImFjdGl2ZSIsIl9yZWFkeVN0YXRlIiwicmV0cmllcyIsImZyb21RdWV1ZSIsInZvbGF0aWxlIiwiX2FkZFRvUXVldWUiLCJhY2siLCJwb3AiLCJfcmVnaXN0ZXJBY2tDYWxsYmFjayIsImlzVHJhbnNwb3J0V3JpdGFibGUiLCJlbmdpbmUiLCJub3RpZnlPdXRnb2luZ0xpc3RlbmVycyIsIl9hIiwiYWNrVGltZW91dCIsInRpbWVyIiwiZW1pdFdpdGhBY2siLCJ3aXRoRXJyIiwicmVqZWN0IiwiYXJnMSIsImFyZzIiLCJ0cnlDb3VudCIsInBlbmRpbmciLCJyZXNwb25zZUFyZ3MiLCJfZHJhaW5RdWV1ZSIsImZvcmNlIiwiX3BhY2tldCIsIl9zZW5kQ29ubmVjdFBhY2tldCIsIl9waWQiLCJwaWQiLCJvZmZzZXQiLCJfbGFzdE9mZnNldCIsIm9uY29ubmVjdCIsIm9uZXZlbnQiLCJvbmFjayIsIm9uZGlzY29ubmVjdCIsIm1lc3NhZ2UiLCJlbWl0RXZlbnQiLCJfYW55TGlzdGVuZXJzIiwibGlzdGVuZXIiLCJzZW50IiwiZW1pdEJ1ZmZlcmVkIiwic3ViRGVzdHJveSIsIm9uQW55IiwicHJlcGVuZEFueSIsIm9mZkFueSIsImxpc3RlbmVyc0FueSIsIm9uQW55T3V0Z29pbmciLCJfYW55T3V0Z29pbmdMaXN0ZW5lcnMiLCJwcmVwZW5kQW55T3V0Z29pbmciLCJvZmZBbnlPdXRnb2luZyIsImxpc3RlbmVyc0FueU91dGdvaW5nIiwiQmFja29mZiIsIm1zIiwibWluIiwibWF4IiwiZmFjdG9yIiwiaml0dGVyIiwiYXR0ZW1wdHMiLCJkdXJhdGlvbiIsInJhbmQiLCJkZXZpYXRpb24iLCJyZXNldCIsInNldE1pbiIsInNldE1heCIsInNldEppdHRlciIsIk1hbmFnZXIiLCJuc3BzIiwicmVjb25uZWN0aW9uIiwicmVjb25uZWN0aW9uQXR0ZW1wdHMiLCJJbmZpbml0eSIsInJlY29ubmVjdGlvbkRlbGF5IiwicmVjb25uZWN0aW9uRGVsYXlNYXgiLCJyYW5kb21pemF0aW9uRmFjdG9yIiwiYmFja29mZiIsIl9wYXJzZXIiLCJwYXJzZXIiLCJlbmNvZGVyIiwiRW5jb2RlciIsImRlY29kZXIiLCJhdXRvQ29ubmVjdCIsIl9yZWNvbm5lY3Rpb24iLCJfcmVjb25uZWN0aW9uQXR0ZW1wdHMiLCJfcmVjb25uZWN0aW9uRGVsYXkiLCJfcmFuZG9taXphdGlvbkZhY3RvciIsIl9yZWNvbm5lY3Rpb25EZWxheU1heCIsIl90aW1lb3V0IiwibWF5YmVSZWNvbm5lY3RPbk9wZW4iLCJfcmVjb25uZWN0aW5nIiwicmVjb25uZWN0IiwiRW5naW5lIiwic2tpcFJlY29ubmVjdCIsIm9wZW5TdWJEZXN0cm95IiwiZXJyb3JTdWIiLCJvbnBpbmciLCJvbmRhdGEiLCJvbmRlY29kZWQiLCJfZGVzdHJveSIsIl9jbG9zZSIsImRlbGF5Iiwib25yZWNvbm5lY3QiLCJhdHRlbXB0IiwiY2FjaGUiLCJwYXJzZWQiLCJ0ZXN0IiwiaHJlZiIsInNhbWVOYW1lc3BhY2UiLCJmb3JjZU5ldyIsIm11bHRpcGxleCIsImNvb3JkcyIsIm1lc3NhZ2VzSFRNTCIsInVzZXJSZWxvYWRSZXNwb25zZSIsIm1zZ1JlbG9hZFJlc3BvbnNlIiwic2VuZGVyIiwiX2lkIiwiZGF0ZSIsInNjcm9sbFRvIiwic2Nyb2xsSGVpZ2h0Iiwic2Nyb2xsVG9wIiwiYnRuIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsInByb21wdCIsImV4cG9ydHMiLCJ0b3VjaEhhbmRsZXIiLCJmaXJzdCIsImNoYW5nZWRUb3VjaGVzIiwic2ltdWxhdGVkRXZlbnQiLCJjcmVhdGVFdmVudCIsImluaXRNb3VzZUV2ZW50Iiwic2NyZWVuWCIsInNjcmVlblkiLCJjbGllbnRYIiwiY2xpZW50WSIsImRpc3BhdGNoRXZlbnQiLCJwcmV2ZW50RGVmYXVsdCIsIm9ua2V5dXAiLCJnZXRDb250ZXh0IiwiaW5pdEdMIiwib25tb3VzZW1vdmUiLCJjb250cm9scyIsIm9ubW91c2Vkb3duIiwib25tb3VzZXVwIiwiZGVsdGFZIiwib25zY3JvbGwiLCJzY3JvbGwiLCJxdWVyeVNlbGVjdG9yIiwiY2xlYXJDb2xvciIsImNsZWFyIiwiQ09MT1JfQlVGRkVSX0JJVCIsIkRFUFRIX0JVRkZFUl9CSVQiLCJpbm5lcldpZHRoIiwiaW5uZXJIZWlnaHQiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiXSwibWFwcGluZ3MiOiIwQkFBTyxNQUFNQSxFQUNYQyxZQUFZQyxFQUFJLEVBQUdDLEVBQUks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QUFDLEVBQUcsRUFBRyxFQUFHLEdBQ1YsQ0FBQyxFQUFHLEVBQUcsRUFBRyxHQUNWLENBQUMsRUFBRyxFQUFHLEVBQUcsR0FDVixDQUFDLEVBQUcsRUFBRyxFQUFHLEtBR1pyQixLQUFLLEdBQUssR0FDVkEsS0FBSyxHQUFLLEdBQ1ZBLEtBQUssR0FBSyxHQUNWQSxLQUFLLEdBQUssR0FFVkEsS0FBSyxHQUFHLEdBQUtxQixFQUFFLEdBQUcsR0FDbEJyQixLQUFLLEdBQUcsR0FBS3FCLEVBQUUsR0FBRyxHQUNsQnJCLEtBQUssR0FBRyxHQUFLcUIsRUFBRSxHQUFHLEdBQ2xCckIsS0FBSyxHQUFHLEdBQUtxQixFQUFFLEdBQUcsR0FFbEJyQixLQUFLLEdBQUcsR0FBS3FCLEVBQUUsR0FBRyxHQUNsQnJCLEtBQUssR0FBRyxHQUFLcUIsRUFBRSxHQUFHLEdBQ2xCckIsS0FBSyxHQUFHLEdBQUtxQixFQUFFLEdBQUcsR0FDbEJyQixLQUFLLEdBQUcsR0FBS3FCLEVBQUUsR0FBRyxHQUVsQnJCLEtBQUssR0FBRyxHQUFLcUIsRUFBRSxHQUFHLEdBQ2xCckIsS0FBSyxHQUFHLEdBQUtxQixFQUFFLEdBQUcsR0FDbEJyQixLQUFLLEdBQUcsR0FBS3FCLEVBQUUsR0FBRyxHQUNsQnJCLEtBQUssR0FBRyxHQUFLcUIsRUFBRSxHQUFHLEdBRWxCckIsS0FBSyxHQUFHLEdBQUtxQixFQUFFLEdBQUcsR0FDbEJyQixLQUFLLEdBQUcsR0FBS3FCLEVBQUUsR0FBRyxHQUNsQnJCLEtBQUssR0FBRyxHQUFLcUIsRUFBRSxHQUFHLEdBQ2xCckIsS0FBSyxHQUFHLEdBQUtxQixFQUFFLEdBQUcsRUFDcEIsQ0FDQVksSUFDRSxNQUFPLENBQ0wsQ0FBQ2pDLEtBQUssR0FBRyxHQUFJQSxLQUFLLEdBQUcsR0FBSUEsS0FBSyxHQUFHLEdBQUlBLEtBQUssR0FBRyxJQUM3QyxDQUFDQSxLQUFLLEdBQUcsR0FBSUEsS0FBSyxHQUFHLEdBQUlBLEtBQUssR0FBRyxHQUFJQSxLQUFLLEdBQUcsSUFDN0MsQ0FBQ0EsS0FBSyxHQUFH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QUFLLEdBQUcsSUFDTitELEVBRU5DLEVBQUUsR0FBRyxJQUNGaEUsS0FBS21ELFVBQ0puRCxLQUFLLEdBQUcsR0FDUkEsS0FBSyxHQUFHLEdBQ1JBLEtBQUssR0FBRyxHQUNSQSxLQUFLLEdBQUcsR0FDUkEsS0FBSyxHQUFHLEdBQ1JBLEtBQUssR0FBRyxHQUNSQSxLQUFLLEdBQUcsR0FDUkEsS0FBSyxHQUFHLEdBQ1JBLEtBQUssR0FBRyxJQUNOK0QsRUFFTkMsRUFBRSxHQUFHLElBQ0ZoRSxLQUFLbUQsVUFDSm5ELEtBQUssR0FBRyxHQUNSQSxLQUFLLEdBQUcsR0FDUkEsS0FBSyxHQUFHLEdBQ1JBLEtBQUssR0FBRyxHQUNSQSxLQUFLLEdBQUcsR0FDUkEsS0FBSyxHQUFHLEdBQ1JBLEtBQUssR0FBRyxHQUNSQSxLQUFLLEdBQUcsR0FDUkEsS0FBSyxHQUFHLElBQ04rRCxFQUVOQyxFQUFFLEdBQUcsSUFDRmhFLEtBQUttRCxVQUNKbkQsS0FBSyxHQUFHLEdBQ1JBLEtBQUssR0FBRyxHQUNSQSxLQUFLLEdBQUcsR0FDUkEsS0FBSyxHQUFHLEdBQ1JBLEtBQUssR0FBRyxHQUNSQSxLQUFLLEdBQUcsR0FDUkEsS0FBSyxHQUFHLEdBQ1JBLEtBQUssR0FBRyxHQUNSQSxLQUFLLEdBQUcsSUFDTitELEVBRU5DLEVBQUUsR0FBRyxJQUNGaEUsS0FBS21ELFVBQ0puRCxLQUFLLEdBQUcsR0FDUkEsS0FBSyxHQUFHLEdBQ1JBLEtBQUssR0FBRyxHQUNSQSxLQUFLLEdBQUcsR0FDUkEsS0FBSyxHQUFHLEdBQ1JBLEtBQUssR0FBRyxHQUNSQSxLQUFLLEdBQUcsR0FDUkEsS0FBSyxHQUFHLEdBQ1JBLEtBQUssR0FBRyxJQUNOK0QsRUFFTkMsRUFBRSxHQUFHLElBQ0ZoRSxLQUFLbUQsVUFDSm5ELEtBQUssR0FBRyxHQUNSQSxLQUFLLEdBQUcsR0FDUkEsS0FBSyxHQUFHLEdBQ1JBLEtBQUssR0FBRyxHQUNSQSxLQUFLLEdBQUcsR0FDUkEsS0FBSyxHQUFHLEdBQ1JBLEtBQUssR0FBRyxHQUNSQSxLQUFLLEdBQUcsR0FDUkEsS0FBSyxHQUFHLElBQ04rRCxFQUVOQyxFQUFFLEdBQUcsSUFDRmhFLEtBQUttRCxVQUNKbkQsS0FBSyxHQUFHLEdBQ1JBLEtBQUssR0FBRyxHQUNSQSxLQUFLLEdBQUcsR0FDUkEsS0FBSyxHQUFHLEdBQ1JBLEtBQUssR0FBRyxHQUNSQSxLQUFLLEdBQUcsR0FDUkEsS0FBSyxHQUFHLEdBQ1JBLEtBQUssR0FBRyxHQUNSQSxLQUFLLEdBQUcsSUFDTitELEVBRU5DLEVBQUUsR0FBRyxJQUNGaEUsS0FBS21ELFVBQ0puRCxLQUFLLEdBQUcsR0FDUkEsS0FBSyxHQUFHLEdBQ1JBLEtBQUssR0FBRyxHQUNSQSxLQUFLLEdBQUcsR0FDUkEsS0FBSyxHQUFHLEdBQ1JBLEtBQUssR0FBRyxHQUNSQSxLQUFLLEdBQUcsR0FDUkEsS0FBSyxHQUFHLEdBQ1JBLEtBQUssR0FBRyxJQUNOK0QsRUFFTkMsRUFBRSxHQUFHLElBQ0ZoRSxLQUFLbUQsVUFDSm5ELEtBQUssR0FBRyxHQUNSQSxLQUFLLEdBQUcsR0FDUkEsS0FBSyxHQUFHLEdBQ1JBLEtBQUssR0FBRyxHQUNSQSxLQUFLLEdBQUcsR0FDUkEsS0FBSyxHQUFHLEdBQ1JBLEtBQUssR0FBRyxHQUNSQSxLQUFLLEdBQUcsR0FDUkEsS0FBSyxHQUFHLElBQ04rRCxFQUVOQyxFQUFFLEdBQUcsSUFDRmhFLEtBQUttRCxVQUNKbkQsS0FBSyxHQUFHLEdBQ1JBLEtBQUssR0FBRyxHQUNSQSxLQUFLLEdBQUcsR0FDUkEsS0FBSyxHQUFHLEdBQ1JBLEtBQUssR0FBRyxHQUNSQSxLQUFLLEdBQUcsR0FDUkEsS0FBSyxHQUFHLEdBQ1JBLEtBQUssR0FBRyxHQUNSQSxLQUFLLEdBQUcsSUFDTitELEVBRU5DLEVBQUUsR0FBRyxJQUNGaEUsS0FBS21ELFVBQ0puRCxLQUFLLEdBQUcsR0FDUkEsS0FBSyxHQUFHLEdBQ1JBLEtBQUssR0FBRyxHQUNSQSxLQUFLLEdBQUcsR0FDUkEsS0FBSyxHQUFHLEdBQ1JBLEtBQUssR0FBRyxHQUNSQSxLQUFLLEdBQUcsR0FDUkEsS0FBSyxHQUFHLEdBQ1JBLEtBQUssR0FBRyxJQUNOK0QsRUFFTkMsRUFBRSxHQUFHLElBQ0ZoRSxLQUFLbUQsVUFDSm5ELEtBQUssR0FBRyxHQUNSQSxLQUFLLEdBQUcsR0FDUkEsS0FBSyxHQUFHLEdBQ1JBLEtBQUssR0FBRyxHQUNSQSxLQUFLLEdBQUcsR0FDUkEsS0FBSyxHQUFHLEdBQ1JBLEtBQUssR0FBRyxHQUNSQSxLQUFLLEdBQUcsR0FDUkEsS0FBSyxHQUFHLElBQ04rRCxFQUVOQyxFQUFFLEdBQUcsSUFDRmhFLEtBQUttRCxVQUNKbkQsS0FBSyxHQUFHLEdBQ1JBLEtBQUssR0FBRyxHQUNSQSxLQUFLLEdBQUcsR0FDUkEsS0FBSyxHQUFHLEdBQ1JBLEtBQUssR0FBRyxHQUNSQSxLQUFLLEdBQUcsR0FDUkEsS0FBSyxHQUFHLEdBQ1JBLEtBQUssR0FBRyxHQUNSQSxLQUFLLEdBQUcsSUFDTitELEVBRU5DLEVBQUUsR0FBRyxJQUNGaEUsS0FBS21ELFVBQ0puRCxLQUFLLEdBQUcsR0FDUkEsS0FBSyxHQUFHLEdBQ1JBLEtBQUssR0FBRyxHQUNSQSxLQUFLLEdBQUcsR0FDUkEsS0FBSyxHQUFHLEdBQ1JBLEtBQUssR0FBRyxHQUNSQSxLQUFLLEdBQUcsR0FDUkEsS0FBSyxHQUFHLEdBQ1JBLEtBQUssR0FBRyxJQUNOK0QsRUFFTkMsRUFBRSxHQUFHLElBQ0ZoRSxLQUFLbUQsVUFDSm5ELEtBQUssR0FBRyxHQUNSQSxLQUFLLEdBQUcsR0FDUkEsS0FBSyxHQUFHLEdBQ1JBLEtBQUssR0FBRyxHQUNSQSxLQUFLLEdBQUcsR0FDUkEsS0FBSyxHQUFHLEdBQ1JBLEtBQUssR0FBRyxHQUNSQSxLQUFLLEdBQUcsR0FDUkEsS0FBSyxHQUFHLElBQ04rRCxFQUVOQyxFQUFFLEdBQUcsSUFDRmhFLEtBQUttRCxVQUNKbkQsS0FBSyxHQUFHLEdBQ1JBLEtBQUssR0FBRyxHQUNSQSxLQUFLLEdBQUcsR0FDUkEsS0FBSyxHQUFHLEdBQ1JBLEtBQUssR0FBRyxHQUNSQSxLQUFLLEdBQUcsR0FDUkEsS0FB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S0FBSyxHQUFHLEdBQUtxQixFQUFFLEdBQUcsR0FDbEJyQixLQUFLLEdBQUcsR0FBS3FCLEVBQUUsR0FBRyxHQUNsQnJCLEtBQUssR0FBRyxHQUFLcUIsRUFBRSxHQUFHLEdBQ2xCckIsS0FBSyxHQUFHLEdBQUtxQixFQUFFLEdBQUcsR0FDcEIyQyxFQUFFLEdBQUcsR0FDSGhFLEtBQUssR0FBRyxHQUFLcUIsRUFBRSxHQUFHLEdBQ2xCckIsS0FBSyxHQUFHLEdBQUtxQixFQUFFLEdBQUcsR0FDbEJyQixLQUFLLEdBQUcsR0FBS3FCLEVBQUUsR0FBRyxHQUNsQnJCLEtBQUssR0FBRyxHQUFLcUIsRUFBRSxHQUFHLEdBQ3BCMkMsRUFBRSxHQUFHLEdBQ0hoRSxLQUFLLEdBQUcsR0FBS3FCLEVBQUUsR0FBRyxHQUNsQnJCLEtBQUssR0FBRyxHQUFLcUIsRUFBRSxHQUFHLEdBQ2xCckIsS0FBSyxHQUFHLEdBQUtxQixFQUFFLEdBQUcsR0FDbEJyQixLQUFLLEdBQUcsR0FBS3FCLEVBQUUsR0FBRyxHQUVwQjJDLEVBQUUsR0FBRyxHQUNIaEUsS0FBSyxHQUFHLEdBQUtxQixFQUFFLEdBQUcsR0FDbEJyQixLQUFLLEdBQUcsR0FBS3FCLEVBQUUsR0FBRyxHQUNsQnJCLEtBQUssR0FBRyxHQUFLcUIsRUFBRSxHQUFHLEdBQ2xCckIsS0FBSyxHQUFHLEdBQUtxQixFQUFFLEdBQUcsR0FDcEIyQyxFQUFFLEdBQUcsR0FDSGhFLEtBQUssR0FBRyxHQUFLcUIsRUFBRSxHQUFHLEdBQ2xCckIsS0FBSyxHQUFHLEdBQUtxQixFQUFFLEdBQUcsR0FDbEJyQixLQUFLLEdBQUcsR0FBS3FCLEVBQUUsR0FBRyxHQUNsQnJCLEtBQUssR0FBRyxHQUFLcUIsRUFBRSxHQUFHLEdBQ3BCMkMsRUFBRSxHQUFHLEdBQ0hoRSxLQUFLLEdBQUcsR0FBS3FCLEVBQUUsR0FBRyxHQUNsQnJCLEtBQUssR0FBRyxHQUFLcUIsRUFBRSxHQUFHLEdBQ2xCckIsS0FBSyxHQUFHLEdBQUtxQixFQUFFLEdBQUcsR0FDbEJyQixLQUFLLEdBQUcs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LEVBQUVBLEdBQUNxMEIsV0FBVyxFQUFHLEVBQUcsRUFBRyxHQUN2QnIwQixFQUFBQSxHQUFHczBCLE1BQU10MEIsS0FBR3UwQixrQkFDWnYwQixFQUFBQSxHQUFHd1IsT0FBT3hSLEtBQUdxUSxZQUdiclEsRUFBQUEsR0FBR3dRLFNBQVMsRUFBRyxFQUFHeFEsRUFBRUEsR0FBQzZKLE9BQU8xRCxNQUFPbkcsRUFBRUEsR0FBQzZKLE9BQU9FLFFBQzdDRixHQUFPMUQsTUFBUTRTLE9BQU8wYixXQUN0QjVxQixHQUFPRSxPQUFTZ1AsT0FBTzJiLFlBQ3ZCbDJCLElBQ0FyQyxFQUFJb0IsUUFBUXNNLEdBQU8xRCxNQUFPMEQsR0FBT0UsUUFDakM1TixFQUFJYSxPQUFPYixFQUFJdEIsSUFBS3NCLEVBQUlyQixHQUFJcUIsRUFBSWhFLEdBQUlnRSxFQUFJYyxJQUFLZCxFQUFJZSxlQUUzQzJDLEVBQVUsaUJBQ1YwVSxLQUNOOUwsSUFDRiIsInhfZ29vZ2xlX2lnbm9yZUxpc3QiOlsyNCwyNSwyNiwyNywyOCwyOSwzMCwzMSwzMiwzMywzNCwzNSwzNiwzNywzOCwzOSw0MCw0MSw0Miw0Myw0NCw0NSw0Niw0Nyw0OCw0OSw1MCw1MV19
