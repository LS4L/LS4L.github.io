!function(t){"use strict";class e{constructor(t=0,e=0){this.x=t,this.y=e}add(t){return new e(this.x+t.x,this.y+t.y)}sub(t){return new e(this.x-t.x,this.y-t.y)}mul(t){return new e(this.x*t,this.y*t)}div(t){return new e(this.x/t,this.y/t)}neg(){return new e(-this.x,-this.y)}dot(t){return this.x*t.x+this.y*t.y}cross(t){return this.x*t.y-this.y*t.x}len2(){return this.x*this.x+this.y*this.y}len(){return Math.sqrt(this.len2())}normalize(){return this.div(this.len())}lerp(t,s){return new e(this.x+(t.x-this.x)*s,this.y+(t.y-this.y)*s)}}class s{constructor(t=0,e=0,s=0){this.x=t,this.y=e,this.z=s}eq(t){return this.x==t.x&&this.y==t.y&&this.z==t.z}add(t){return new s(this.x+t.x,this.y+t.y,this.z+t.z)}sub(t){return new s(this.x-t.x,this.y-t.y,this.z-t.z)}mul(t){return new s(this.x*t,this.y*t,this.z*t)}div(t){return 0!=t?new s(this.x/t,this.y/t,this.z/t):new s}neg(){return new s(-this.x,-this.y,-this.z)}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}cross(t){return new s(this.y*t.z-this.z*t.y,this.z*t.x-this.x*t.z,this.x*t.y-this.y*t.x)}len2(){return this.x*this.x+this.y*this.y+this.z*this.z}len(){return Math.sqrt(this.len2())}normalize(){return this.div(this.len())}lerp(t,e=.5){return new s(this.x+(t.x-this.x)*e,this.y+(t.y-this.y)*e,this.z+(t.z-this.z)*e)}mulMatr(t){let e=this.x*t[0][3]+this.y*t[1][3]+this.z*t[2][3]+t[3][3];return new s((this.x*t[0][0]+this.y*t[1][0]+this.z*t[2][0]+t[3][0])/e,(this.x*t[0][1]+this.y*t[1][1]+this.z*t[2][1]+t[3][1])/e,(this.x*t[0][2]+this.y*t[1][2]+this.z*t[2][2]+t[3][2])/e)}angle(t,e=new s(0,1,0)){if(0==t.len2()||0==this.len2())return 0;let i=this.cross(t),r=this.dot(t)/(this.len()*t.len()),n=Math.acos(r);return i.dot(e)<0&&(n=-n),n}get xxx(){return new s(this.x,this.x,this.x)}get yyy(){return new s(this.y,this.y,this.y)}get zzz(){return new s(this.z,this.z,this.z)}}class i{constructor(t=0,e=0,s=0,i=0){this.x=t,this.y=e,this.z=s,this.w=i}add(t){return new i(this.x+t.x,this.y+t.y,this.z+t.z,this.w+t.w)}sub(t){return new i(this.x-t.x,this.y-t.y,this.z-t.z,this.w-t.w)}mul(t){return new i(this.x*t,this.y*t,this.z*t,this.w*t)}div(t){return new i(this.x/t,this.y/t,this.z/t,this.w/t)}neg(){return new i(-this.x,-this.y,-this.z,-this.w)}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z+this.w*this.w}len2(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}len(){return Math.sqrt(this.len2())}normalize(){return this.div(this.len())}lerp(t,e){return new s(this.x+(t.x-this.x)*e,this.y+(t.y-this.y)*e,this.z+(t.z-this.z)*e,this.w+(t.w-this.w)*e)}}class r{constructor(t=[[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]]){this[0]=[],this[1]=[],this[2]=[],this[3]=[],this[0][0]=t[0][0],this[0][1]=t[0][1],this[0][2]=t[0][2],this[0][3]=t[0][3],this[1][0]=t[1][0],this[1][1]=t[1][1],this[1][2]=t[1][2],this[1][3]=t[1][3],this[2][0]=t[2][0],this[2][1]=t[2][1],this[2][2]=t[2][2],this[2][3]=t[2][3],this[3][0]=t[3][0],this[3][1]=t[3][1],this[3][2]=t[3][2],this[3][3]=t[3][3]}a(){return[[this[0][0],this[0][1],this[0][2],this[0][3]],[this[1][0],this[1][1],this[1][2],this[1][3]],[this[2][0],this[2][1],this[2][2],this[2][3]],[this[3][0],this[3][1],this[3][2],this[3][3]]]}translate(t){return new r([[1,0,0,0],[0,1,0,0],[0,0,1,0],[t.x,t.y,t.z,1]])}scale(t){return new r([[t.x,0,0,0],[0,t.y,0,0],[0,0,t.z,0],[0,0,0,1]])}rotateX(t){let e=new r,s=t/180*Math.PI,i=Math.sin(s),n=Math.cos(s);return e[1][1]=n,e[2][2]=n,e[1][2]=i,e[2][1]=-i,e}rotateY(t){let e=new r,s=t/180*Math.PI,i=Math.sin(s),n=Math.cos(s);return e[0][0]=n,e[2][2]=n,e[0][2]=-i,e[2][0]=i,e}rotateZ(t){let e=new r,s=t/180*Math.PI,i=Math.sin(s),n=Math.cos(s);return e[0][0]=n,e[1][1]=n,e[0][1]=i,e[1][0]=-i,e}rotate(t,e){let s=t/180*Math.PI,i=Math.sin(s),n=Math.cos(s);return new r([[n+e.x*e.x*(1-n),e.x*e.y*(1-n)+e.z*i,e.x*e.z*(1-n)-e.y*i,0],[e.y*e.x*(1-n)-e.z*i,n+e.y*e.y*(1-n),e.y*e.z*(1-n)+e.x*i,0],[e.z*e.x*(1-n)+e.y*i,e.z*e.y*(1-n)-e.x*i,n+e.z*e.z*(1-n),0],[0,0,0,1]])}transpose(){let t=new r;return t[0][0]=this[0][0],t[0][1]=this[1][0],t[0][2]=this[2][0],t[0][3]=this[3][0],t[1][0]=this[0][1],t[1][1]=this[1][1],t[1][2]=this[2][1],t[1][3]=this[3][1],t[2][0]=this[0][2],t[2][1]=this[1][2],t[2][2]=this[2][2],t[2][3]=this[3][2],t[3][0]=this[0][3],t[3][1]=this[1][3],t[3][2]=this[2][3],t[3][3]=this[3][3],t}determ3x3(t,e,s,i,r,n,o,a,h){return t*r*h+e*n*o+s*i*a-t*n*a-e*i*h-s*r*o}determ(){return+this[0][0]*this.determ3x3(this[1][1],this[1][2],this[1][3],this[2][1],this[2][2],this[2][3],this[3][1],this[3][2],this[3][3])+-this[0][1]*this.determ3x3(this[1][0],this[1][2],this[1][3],this[2][0],this[2][2],this[2][3],this[3][0],this[3][2],this[3][3])+ +this[0][2]*this.determ3x3(this[1][0],this[1][1],this[1][3],this[2][0],this[2][1],this[2][3],this[3][0],this[3][1],this[3][3])+-this[0][3]*this.determ3x3(this[1][0],this[1][1],this[1][2],this[2][0],this[2][1],this[2][2],this[3][0],this[3][1],this[3][2])}inverse(){let t=this.determ(),e=new r;return 0==t?new r:(e[0][0]=+this.determ3x3(this[1][1],this[1][2],this[1][3],this[2][1],this[2][2],this[2][3],this[3][1],this[3][2],this[3][3])/t,e[1][0]=-this.determ3x3(this[1][0],this[1][2],this[1][3],this[2][0],this[2][2],this[2][3],this[3][0],this[3][2],this[3][3])/t,e[2][0]=+this.determ3x3(this[1][0],this[1][1],this[1][3],this[2][0],this[2][1],this[2][3],this[3][0],this[3][1],this[3][3])/t,e[3][0]=-this.determ3x3(this[1][0],this[1][1],this[1][2],this[2][0],this[2][1],this[2][2],this[3][0],this[3][1],this[3][2])/t,e[0][1]=-this.determ3x3(this[0][1],this[0][2],this[0][3],this[2][1],this[2][2],this[2][3],this[3][1],this[3][2],this[3][3])/t,e[1][1]=+this.determ3x3(this[0][0],this[0][2],this[0][3],this[2][0],this[2][2],this[2][3],this[3][0],this[3][2],this[3][3])/t,e[2][1]=-this.determ3x3(this[0][0],this[0][1],this[0][3],this[2][0],this[2][1],this[2][3],this[3][0],this[3][1],this[3][3])/t,e[3][1]=+this.determ3x3(this[0][0],this[0][1],this[0][2],this[2][0],this[2][1],this[2][2],this[3][0],this[3][1],this[3][2])/t,e[0][2]=+this.determ3x3(this[0][1],this[0][2],this[0][3],this[1][1],this[1][2],this[1][3],this[3][1],this[3][2],this[3][3])/t,e[1][2]=-this.determ3x3(this[0][0],this[0][2],this[0][3],this[1][0],this[1][2],this[1][3],this[3][0],this[3][2],this[3][3])/t,e[2][2]=+this.determ3x3(this[0][0],this[0][1],this[0][3],this[1][0],this[1][1],this[1][3],this[3][0],this[3][1],this[3][3])/t,e[3][2]=-this.determ3x3(this[0][0],this[0][1],this[0][2],this[1][0],this[1][1],this[1][2],this[3][0],this[3][1],this[3][2])/t,e[0][3]=-this.determ3x3(this[0][1],this[0][2],this[0][3],this[1][1],this[1][2],this[1][3],this[2][1],this[2][2],this[2][3])/t,e[1][3]=+this.determ3x3(this[0][0],this[0][2],this[0][3],this[1][0],this[1][2],this[1][3],this[2][0],this[2][2],this[2][3])/t,e[2][3]=-this.determ3x3(this[0][0],this[0][1],this[0][3],this[1][0],this[1][1],this[1][3],this[2][0],this[2][1],this[2][3])/t,e[3][3]=+this.determ3x3(this[0][0],this[0][1],this[0][2],this[1][0],this[1][1],this[1][2],this[2][0],this[2][1],this[2][2])/t,e)}add(t){let e=new r;return e[0][0]=this[0][0]+t[0][0],e[0][1]=this[0][1]+t[0][1],e[0][2]=this[0][2]+t[0][2],e[0][3]=this[0][3]+t[0][3],e[1][0]=this[1][0]+t[1][0],e[1][1]=this[1][1]+t[1][1],e[1][2]=this[1][2]+t[1][2],e[1][3]=this[1][3]+t[1][3],e[2][0]=this[2][0]+t[2][0],e[2][1]=this[2][1]+t[2][1],e[2][2]=this[2][2]+t[2][2],e[2][3]=this[2][3]+t[2][3],e[3][0]=this[3][0]+t[3][0],e[3][1]=this[3][1]+t[3][1],e[3][2]=this[3][2]+t[3][2],e[3][3]=this[3][3]+t[3][3],e}mul(t){let e=new r;return e[0][0]=this[0][0]*t[0][0]+this[0][1]*t[1][0]+this[0][2]*t[2][0]+this[0][3]*t[3][0],e[0][1]=this[0][0]*t[0][1]+this[0][1]*t[1][1]+this[0][2]*t[2][1]+this[0][3]*t[3][1],e[0][2]=this[0][0]*t[0][2]+this[0][1]*t[1][2]+this[0][2]*t[2][2]+this[0][3]*t[3][2],e[0][3]=this[0][0]*t[0][3]+this[0][1]*t[1][3]+this[0][2]*t[2][3]+this[0][3]*t[3][3],e[1][0]=this[1][0]*t[0][0]+this[1][1]*t[1][0]+this[1][2]*t[2][0]+this[1][3]*t[3][0],e[1][1]=this[1][0]*t[0][1]+this[1][1]*t[1][1]+this[1][2]*t[2][1]+this[1][3]*t[3][1],e[1][2]=this[1][0]*t[0][2]+this[1][1]*t[1][2]+this[1][2]*t[2][2]+this[1][3]*t[3][2],e[1][3]=this[1][0]*t[0][3]+this[1][1]*t[1][3]+this[1][2]*t[2][3]+this[1][3]*t[3][3],e[2][0]=this[2][0]*t[0][0]+this[2][1]*t[1][0]+this[2][2]*t[2][0]+this[2][3]*t[3][0],e[2][1]=this[2][0]*t[0][1]+this[2][1]*t[1][1]+this[2][2]*t[2][1]+this[2][3]*t[3][1],e[2][2]=this[2][0]*t[0][2]+this[2][1]*t[1][2]+this[2][2]*t[2][2]+this[2][3]*t[3][2],e[2][3]=this[2][0]*t[0][3]+this[2][1]*t[1][3]+this[2][2]*t[2][3]+this[2][3]*t[3][3],e[3][0]=this[3][0]*t[0][0]+this[3][1]*t[1][0]+this[3][2]*t[2][0]+this[3][3]*t[3][0],e[3][1]=this[3][0]*t[0][1]+this[3][1]*t[1][1]+this[3][2]*t[2][1]+this[3][3]*t[3][1],e[3][2]=this[3][0]*t[0][2]+this[3][1]*t[1][2]+this[3][2]*t[2][2]+this[3][3]*t[3][2],e[3][3]=this[3][0]*t[0][3]+this[3][1]*t[1][3]+this[3][2]*t[2][3]+this[3][3]*t[3][3],e}view(t,e,s){let i=e.sub(t).normalize(),n=i.cross(s).normalize(),o=n.cross(i);return new r([[n.x,o.x,-i.x,0],[n.y,o.y,-i.y,0],[n.z,o.z,-i.z,0],[-t.dot(n),-t.dot(o),t.dot(i),1]])}ortho(t,e,s,i,n,o){return new r([[2/(e-t),0,0,0],[0,2/(i-s),0,0],[0,0,-2/(o-n),0],[-(e+t)/(e-t),-(i+s)/(i-s),-(o+n)/(o-n),1]])}frustum(t,e,s,i,n,o){return new r([[2*n/(e-t),0,0,0],[0,2*n/(i-s),0,0],[(e+t)/(e-t),(i+s)/(i-s),-(o+n)/(o-n),-1],[0,0,-2*n*o/(o-n),0]])}}let n=[],o={x:0,y:0,savedX:0,savedY:0,zoom:1,dx:0,dy:0,dz:0,isDown:!1,isRDown:!1},a=new class{constructor(){this.projSize=.1,this.projDist=.1,this.projFarClip=18e3,this.frameW=30,this.frameH=30,this.matrView=new r,this.matrProj=new r,this.matrVP=new r,this.id=Math.random().toString(),this.setDef()}camSet(t,e,i,n,o){let a=new r;return this.matrView=a.view(t,e,i),this.loc=t,this.at=e,this.dir=new s(-this.matrView[0][2],-this.matrView[1][2],-this.matrView[2][2]),this.up=new s(this.matrView[0][1],this.matrView[1][1],this.matrView[2][1]),this.right=new s(this.matrView[0][0],this.matrView[1][0],this.matrView[2][0]),this.pos=n,this.userLoc=o,this.matrVP=this.matrView.mul(this.matrProj),this}setProj(t,e,s){let i,n;i=n=t,this.projDist=e,this.projSize=t,this.projFarClip=s,this.frameW>this.frameH?i*=this.frameW/this.frameH:n*=this.frameH/this.frameW;let o=new r;return this.matrProj=o.frustum(-i/2,i/2,-n/2,n/2,e,s),this.matrVP=this.matrView.mul(this.matrProj),this}setSize(t,e){return this.frameW=t,this.frameH=e,this.setProj(this.projSize,this.projDist,this.projFarClip),this}setDef(){return this.loc=new s(0,0,1),this.at=new s(0,0,0),this.dir=new s(0,0,-1),this.up=new s(0,1,0),this.right=new s(1,0,0),this.projDist=.1,this.projSize=.1,this.projFarClip=1e4,this.frameW=30,this.frameH=30,this.camSet(this.loc,this.at,this.up,this.pos,this.userLoc),this.setProj(this.projSize,this.projDist,this.projFarClip),this.setSize(this.frameW,this.frameH),this}};function h(t){o.dx=t.pageX-o.x,o.dy=t.pageY-o.y,o.x=t.pageX,o.y=t.pageY}function l(t){0==t.button?o.isDown=!0:2==t.button&&(o.isRDown=!0)}function c(t){0==t.button?o.isDown=!1:2==t.button&&(o.isRDown=!1)}a.camSet(new s(0,2.5,0),new s(0,0,-6),new s(0,1,0),new s(1,1,1),new s(0,2,0));let u=.05,d=1;function g(){!function(){a.pos=a.pos.add(a.pos.mul(.001*o.dz));let t=new r;a.pos=a.pos.mulMatr(t.rotateY(-o.isDown*u*o.dx)),a.pos=a.pos.mulMatr(t.rotateX(-o.isDown*u*o.dy)),a.userDir=a.pos.neg().normalize(),a.userDir.y=0,a.userLoc=a.userLoc.add(a.userDir.mul(!!n.KeyW*!n.ControlLeft*d)).add(a.userDir.mul(-!!n.KeyS*d)).add(a.userDir.mulMatr(t.rotateY(90)).mul(!!n.KeyA*d)).add(a.userDir.mulMatr(t.rotateY(90)).mul(-!!n.KeyD*d)),a.at=a.userLoc,a.dir=a.pos.neg().normalize(),a.loc=a.userLoc.add(a.pos),a.right=a.userDir.cross(new s(0,1,0)),a.up=a.right.cross(a.dir)}()}function f(t,e=null){let i=[],r=0;null==e&&(e=[...Array(t.length/3).keys()]);for(let e=0;e<t.length;e+=3)i[r++]=new s(t[e],t[e+1],t[e+2]);let n=[];for(let t=0;t<i.length;t++)n[t]=new s;for(let t=0;t<e.length;t+=3){let s=i[e[t]],r=i[e[t+1]],o=i[e[t+2]],a=r.sub(s).cross(o.sub(s)).normalize();n[e[t]]=n[e[t]].add(a),n[e[t+1]]=n[e[t+1]].add(a),n[e[t+2]]=n[e[t+2]].add(a)}for(let t=0;t<i.length;t++)n[t]=n[t].normalize();r=0;let o=[];for(let t=0;t<n.length;t++)o[r++]=n[t].x,o[r++]=n[t].y,o[r++]=n[t].z;return o}const p=[];class m{constructor(t,e,s){this.vs=t,this.fs=e,this.shaderProgram=s}}async function y(e=null){let s,i,r;if(null==e)return p[0];function n(t,e,s){const i=t.createShader(e);return t.shaderSource(i,s),t.compileShader(i,s),i}const o=fetch(`bin/shaders/${e}/vert.glsl`).then((t=>t.text())).then((t=>{s=t})),a=fetch(`bin/shaders/${e}/frag.glsl`).then((t=>t.text())).then((t=>{i=t})),h=Promise.all([o,a]);return await h.then((()=>{const e=n(t.gl,t.gl.VERTEX_SHADER,s),o=n(t.gl,t.gl.FRAGMENT_SHADER,i);let a=t.gl.createProgram();if(t.gl.attachShader(a,e),t.gl.attachShader(a,o),t.gl.linkProgram(a),!t.gl.getProgramParameter(a,t.gl.LINK_STATUS)){const e=t.gl.getProgramInfoLog(a);console.log(e)}r=new m(s,i,a),p.push(r)})),r}function w(e,s,i=null,r=null){let n=t.gl.getAttribLocation(e.shaderProgram,"in_pos");const o=t.gl.createBuffer();t.gl.bindBuffer(t.gl.ARRAY_BUFFER,o),t.gl.bufferData(t.gl.ARRAY_BUFFER,s,t.gl.STATIC_DRAW),t.gl.enableVertexAttribArray(n),t.gl.vertexAttribPointer(n,3,t.gl.FLOAT,!1,0,0);const a=t.gl.getAttribLocation(e.shaderProgram,"normal"),h=t.gl.createBuffer();if(t.gl.bindBuffer(t.gl.ARRAY_BUFFER,h),null==r&&(r=new Float32Array(f(s,i))),t.gl.bufferData(t.gl.ARRAY_BUFFER,r,t.gl.STATIC_DRAW),t.gl.enableVertexAttribArray(a),t.gl.vertexAttribPointer(a,3,t.gl.FLOAT,!1,0,0),null!=i){const e=t.gl.createBuffer();t.gl.bindBuffer(t.gl.ELEMENT_ARRAY_BUFFER,e),t.gl.bufferData(t.gl.ELEMENT_ARRAY_BUFFER,i,t.gl.STATIC_DRAW)}}const b=new Float32Array([1,1,-1,1,1,1,1,-1,1,1,-1,-1,-1,1,1,-1,1,-1,-1,-1,-1,-1,-1,1,-1,1,1,1,1,1,1,1,-1,-1,1,-1,-1,-1,-1,1,-1,-1,1,-1,1,-1,-1,1,1,1,1,-1,1,1,-1,-1,1,1,-1,1,-1,1,-1,1,1,-1,1,-1,-1,-1,-1,-1]),x=new Uint16Array([0,1,2,0,2,3,4,5,6,4,6,7,8,9,10,8,10,11,12,13,14,12,14,15,16,17,18,16,18,19,20,21,22,20,22,23]);let A,E;function v(){t.gl.useProgram(E.shaderProgram);let e=t.gl.getUniformLocation(E.shaderProgram,"time");const s=t.gl.getUniformLocation(E.shaderProgram,"projection"),i=t.gl.getUniformLocation(E.shaderProgram,"modelView"),n=t.gl.getUniformLocation(E.shaderProgram,"world");t.gl.bindVertexArray(A),t.gl.uniformMatrix4fv(s,!1,new Float32Array(a.matrProj.a().join().split(",")));let o=new r;t.gl.uniformMatrix4fv(n,!1,new Float32Array(o.a().join().split(","))),t.gl.uniformMatrix4fv(i,!1,new Float32Array(a.matrView.a().join().split(","))),t.gl.uniform1f(e,Date.now());const h=t.gl.getUniformLocation(E.shaderProgram,"lightDir"),l=t.gl.getUniformLocation(E.shaderProgram,"camLoc");t.gl.uniform3f(h,1,2,3),t.gl.uniform3f(l,a.loc.x,a.loc.y,a.loc.z);const c=t.gl.getUniformLocation(E.shaderProgram,"ka"),u=t.gl.getUniformLocation(E.shaderProgram,"kd"),d=t.gl.getUniformLocation(E.shaderProgram,"ks"),g=t.gl.getUniformLocation(E.shaderProgram,"ph");t.gl.uniform3f(c,.0215,.1745,.0215),t.gl.uniform3f(u,.07568,.61424,.07568),t.gl.uniform3f(d,.633,.727811,.633),t.gl.uniform1f(g,76.8),t.gl.drawElements(t.gl.TRIANGLES,36,t.gl.UNSIGNED_SHORT,0)}async function L(){E=await y("rainbow"),A=t.gl.createVertexArray(),t.gl.bindVertexArray(A),w(E,b,x),t.gl.bindVertexArray(null)}const R=new Float32Array([1,1,1,1,-1,-1,-1,1,-1,-1,-1,1]),T=new Uint16Array([0,3,1,0,2,3,0,1,2,3,2,1]);let _,P;function k(){t.gl.useProgram(P.shaderProgram);let e=t.gl.getUniformLocation(P.shaderProgram,"time");const i=t.gl.getUniformLocation(P.shaderProgram,"projection"),n=t.gl.getUniformLocation(P.shaderProgram,"modelView"),o=t.gl.getUniformLocation(P.shaderProgram,"world");t.gl.bindVertexArray(_),t.gl.uniformMatrix4fv(i,!1,new Float32Array(a.matrProj.a().join().split(","))),t.gl.uniformMatrix4fv(n,!1,new Float32Array(a.matrView.a().join().split(",")));let h=new r;t.gl.uniformMatrix4fv(o,!1,new Float32Array(h.rotateZ(Date.now()/30).mul(h.translate(new s(0,3,0))).a().join().split(",")));const l=t.gl.getUniformLocation(P.shaderProgram,"lightDir"),c=t.gl.getUniformLocation(P.shaderProgram,"camLoc");t.gl.uniform1f(e,Date.now()),t.gl.uniform3f(l,1,2,3),t.gl.uniform3f(c,a.loc.x,a.loc.y,a.loc.z);const u=t.gl.getUniformLocation(P.shaderProgram,"ka"),d=t.gl.getUniformLocation(P.shaderProgram,"kd"),g=t.gl.getUniformLocation(P.shaderProgram,"ks"),f=t.gl.getUniformLocation(P.shaderProgram,"ph");t.gl.uniform3f(u,.24725,.2245,.0645),t.gl.uniform3f(d,.34615,.3143,.0903),t.gl.uniform3f(g,.797357,.723991,.208006),t.gl.uniform1f(f,83.2),t.gl.drawElements(t.gl.TRIANGLES,12,t.gl.UNSIGNED_SHORT,0)}async function B(){P=await y("withLight"),_=t.gl.createVertexArray(),t.gl.bindVertexArray(_),w(P,R,T),t.gl.bindVertexArray(null)}const U=new Float32Array([1,0,0,0,1,0,0,0,1,-1,0,0,0,-1,0,0,0,-1]),S=new Uint16Array([0,1,2,0,2,4,4,2,3,3,2,1,5,1,0,5,0,4,5,4,3,5,3,1]);let D,F;function N(){t.gl.useProgram(F.shaderProgram);let e=t.gl.getUniformLocation(F.shaderProgram,"time");const i=t.gl.getUniformLocation(F.shaderProgram,"projection"),n=t.gl.getUniformLocation(F.shaderProgram,"modelView"),o=t.gl.getUniformLocation(F.shaderProgram,"lightDir"),h=t.gl.getUniformLocation(F.shaderProgram,"camLoc"),l=t.gl.getUniformLocation(F.shaderProgram,"world");t.gl.bindVertexArray(D),t.gl.uniformMatrix4fv(i,!1,new Float32Array(a.matrProj.a().join().split(","))),t.gl.uniformMatrix4fv(n,!1,new Float32Array(a.matrView.a().join().split(",")));let c=new r;t.gl.uniform1f(e,Date.now()),t.gl.uniform3f(o,1,2,3),t.gl.uniform3f(h,a.loc.x,a.loc.y,a.loc.z),t.gl.uniformMatrix4fv(l,!1,new Float32Array(c.rotateY(180*Math.sin(Date.now()/1e3)).mul(c.translate(new s(3,0,0))).a().join().split(",")));const u=t.gl.getUniformLocation(F.shaderProgram,"ka"),d=t.gl.getUniformLocation(F.shaderProgram,"kd"),g=t.gl.getUniformLocation(F.shaderProgram,"ks"),f=t.gl.getUniformLocation(F.shaderProgram,"ph");t.gl.uniform3f(u,.05375,.05,.06625),t.gl.uniform3f(d,.18275,.17,.22525),t.gl.uniform3f(g,.332741,.328634,.346435),t.gl.uniform1f(f,38.4),t.gl.drawElements(t.gl.TRIANGLES,24,t.gl.UNSIGNED_SHORT,0)}async function O(){F=await y("withLight"),D=t.gl.createVertexArray(),t.gl.bindVertexArray(D),w(F,U,S),t.gl.bindVertexArray(null)}const z=1.6180339887,C=new Float32Array([0,1,z,1,z,0,z,0,1,0,-1,z,-1,z,0,z,0,-1,0,1,-z,1,-z,0,-z,0,1,0,-1,-z,-1,-z,0,-z,0,-1]),M=new Uint16Array([0,2,1,0,1,4,0,4,8,0,8,3,0,3,2,11,8,4,11,4,6,11,6,9,11,9,10,11,10,9,7,3,10,7,10,9,7,9,5,7,5,2,7,2,3,2,5,1,1,5,6,5,6,9,10,3,8,1,4,6]);let j,I;function V(){t.gl.useProgram(I.shaderProgram);let e=t.gl.getUniformLocation(I.shaderProgram,"time");const i=t.gl.getUniformLocation(I.shaderProgram,"projection"),n=t.gl.getUniformLocation(I.shaderProgram,"modelView"),o=t.gl.getUniformLocation(I.shaderProgram,"world");t.gl.bindVertexArray(j),t.gl.uniformMatrix4fv(i,!1,new Float32Array(a.matrProj.a().join().split(","))),t.gl.uniformMatrix4fv(n,!1,new Float32Array(a.matrView.a().join().split(",")));let h=new r;t.gl.uniformMatrix4fv(o,!1,new Float32Array(h.rotateX(Date.now()/10).mul(h.translate(new s(-3,0,0))).a().join().split(",")));const l=t.gl.getUniformLocation(I.shaderProgram,"camLoc"),c=t.gl.getUniformLocation(I.shaderProgram,"lightDir");t.gl.uniform3f(c,1,1,1),t.gl.uniform3f(l,a.loc.x,a.loc.y,a.loc.z);const u=t.gl.getUniformLocation(I.shaderProgram,"ka"),d=t.gl.getUniformLocation(I.shaderProgram,"kd"),g=t.gl.getUniformLocation(I.shaderProgram,"ks"),f=t.gl.getUniformLocation(I.shaderProgram,"ph");t.gl.uniform3f(u,Math.sin(Date.now()/500)/4+.25,Math.cos(Date.now()/300)/4+.25,Math.sin(Date.now()/1e3+5)/4+.25),t.gl.uniform3f(d,.07568,.61424,.07568),t.gl.uniform3f(g,.633,.727811,.633),t.gl.uniform1f(f,76.8),t.gl.uniform1f(e,Date.now()),t.gl.drawElements(t.gl.TRIANGLES,60,t.gl.UNSIGNED_SHORT,0)}async function q(){I=await y("withLight"),j=t.gl.createVertexArray(),t.gl.bindVertexArray(j),w(I,C,M),t.gl.bindVertexArray(null)}const Y=new Float32Array([0,1,0,0,0,.5,0,0,-.5,0,1,0,.5,0,0,-.5,0,0]);let H,X,W,G,K=[];function Q(){t.gl.useProgram(G.shaderProgram),t.gl.bindVertexArray(W);const e=t.gl.getUniformLocation(G.shaderProgram,"projection"),s=t.gl.getUniformLocation(G.shaderProgram,"modelView");H=t.gl.getUniformLocation(G.shaderProgram,"world"),X=t.gl.getUniformLocation(G.shaderProgram,"color"),t.gl.uniformMatrix4fv(e,!1,new Float32Array(a.matrProj.a().join().split(","))),t.gl.uniformMatrix4fv(s,!1,new Float32Array(a.matrView.a().join().split(",")));let r=new i(1,0,1,1);t.gl.uniform4f(X,r.x,r.y,r.z,r.w),K.forEach((e=>{t.gl.uniformMatrix4fv(H,!1,e),t.gl.drawArrays(t.gl.TRIANGLES,0,6)})),K=[]}async function $(){G=await y("markers"),W=t.gl.createVertexArray(),t.gl.bindVertexArray(W),w(G,Y),t.gl.bindVertexArray(null)}function J(t=new s(0),e=new s(100),i=1){let n=new r,o=new s(0,1,0),a=e.sub(t);K.push(new Float32Array(n.scale(new s(i,a.len(),i)).mul(n.rotate(180,a.normalize().lerp(o,.5).normalize())).mul(n.translate(t)).a().join().split(",")))}function Z(){J(new s(0,0,0),a.userLoc.sub(new s(0,1,0)),1),J(new s(0,0,0),new s(10,10,10),1)}async function tt(){}function et(){for(let t=0;t<300;t++)J(new s(3*t,0,0),new s(3*t,t,Math.sin(t)*t*2),.1*t);J(new s(0,0,0),new s(1,1,1),1),J(new s(0,0,0),new s(-1,-1,-1),1)}async function st(){}let it=[];class rt{constructor(t=new s(.25,.25,.25),e=new s(.4,.4,.4),i=new s(.774597,.774597,.774597),r=76.8,n=null,o=[null]){this.ka=t,this.kd=e,this.ks=i,this.ph=r,this.shaderName=n,this.tex=[...o]}}function nt(t){let e=t.target.files[0],s=new FileReader;s.readAsText(e),s.onload=t=>{ot(t.target.result).then((t=>it.push(t)))},s.onerror=function(){console.log(s.error)}}async function ot(t){let e=[0],i=[],r=[],n=t.split("\n");for(let t=0;t<n.length;t++){let o=n[t].split(" ");if("v"==o[0]){let t=+o[1],i=+o[2],r=+o[3];e.push(new s(t,i,r))}else if("f"==o[0])i.push(+o[1].split("/")[0]),i.push(+o[2].split("/")[0]),i.push(+o[3].split("/")[0]);else if("vn"==o[0]){let t=+o[1],e=+o[2],i=+o[3];r.push(new s(t,e,i))}}0==r.length&&(r=f(e,i));let o=[];e.forEach(((t,e)=>o.push(new at(t,r[e]))));let a=new ht(o,i);return a.mtl=new rt,a.mtl.shaderName="withLight",await a.create(),a}class at{constructor(t=new s,r=new s,n=new e,o=new i){this.p=t,this.n=r,this.t=n,this.c=o}}class ht{constructor(e,s=null,i=0,n=new r,o=t.gl.TRIANGLES,a=null){this.va=a,this.mtl=i,this.vBuf=e,this.iBuf=s,this.trans=n,this.type=o}draw(e){t.gl.useProgram(this.shader.shaderProgram);let s=t.gl.getUniformLocation(this.shader.shaderProgram,"time");const i=t.gl.getUniformLocation(this.shader.shaderProgram,"projection"),r=t.gl.getUniformLocation(this.shader.shaderProgram,"modelView"),n=t.gl.getUniformLocation(this.shader.shaderProgram,"lightDir"),o=t.gl.getUniformLocation(this.shader.shaderProgram,"camLoc"),h=t.gl.getUniformLocation(this.shader.shaderProgram,"world");t.gl.bindVertexArray(this.va),t.gl.uniformMatrix4fv(i,!1,new Float32Array(a.matrProj.a().join().split(","))),t.gl.uniformMatrix4fv(r,!1,new Float32Array(a.matrView.a().join().split(","))),t.gl.uniform1f(s,Date.now()),t.gl.uniform3f(n,1,2,3),t.gl.uniform3f(o,a.loc.x,a.loc.y,a.loc.z),t.gl.uniformMatrix4fv(h,!1,new Float32Array(e.a().join().split(",")));const l=t.gl.getUniformLocation(this.shader.shaderProgram,"ka"),c=t.gl.getUniformLocation(this.shader.shaderProgram,"kd"),u=t.gl.getUniformLocation(this.shader.shaderProgram,"ks"),d=t.gl.getUniformLocation(this.shader.shaderProgram,"ph");t.gl.uniform3f(l,this.mtl.ka.x,this.mtl.ka.y,this.mtl.ka.z),t.gl.uniform3f(c,this.mtl.kd.x,this.mtl.kd.y,this.mtl.kd.z),t.gl.uniform3f(u,this.mtl.ks.x,this.mtl.ks.y,this.mtl.ks.z),t.gl.uniform1f(d,this.mtl.ph),null!=this.iBuf?t.gl.drawElements(t.gl.TRIANGLES,this.iBuf.length,t.gl.UNSIGNED_SHORT,0):t.gl.drawArrays(t.gl.type,0,this.vBuf.length)}async create(){this.shader=await y(this.mtl.shaderName),this.va=t.gl.createVertexArray(),t.gl.bindVertexArray(this.va),w(this.shader,new Float32Array(this.vBuf.map((t=>[t.p.x,t.p.y,t.p.z])).flat()),new Uint16Array(this.iBuf),new Float32Array(this.vBuf.map((t=>[t.n.x,t.n.y,t.n.z])).flat())),t.gl.bindVertexArray(null)}}function lt(){it.forEach((t=>t.draw(t.trans)))}async function ct(){}const ut=new Float32Array([10,-5,10,-10,-5,-10,10,-5,-10,10,-5,10,-10,-5,10,-10,-5,-10]);for(let t=0;t<18;t+=3)ut[t]*=100,ut[t+1]=0,ut[t+2]*=100;let dt,gt,ft=new r;function pt(){dt.mtl.ka.x=Math.sin(Date.now()/100),dt.draw(ft.scale(new s(1*(Math.sin(Date.now()/500)+2),1*(Math.cos(Date.now()/200)+2),1*(Math.sin(Date.now()/300+5)+2))).mul(ft.translate(new s(0,-3,0))))}async function mt(){let t;const e=fetch("bin/models/dode.obj").then((t=>t.text())).then((e=>{t=e}));await e.then((()=>{ot(t).then((t=>dt=t))}))}let yt,wt=new r,bt=1;function xt(){if(bt){gt.draw(wt.scale(new s(.2*(Math.sin(Date.now()/200)/5+1.2),.2*(Math.cos(Date.now()/300)/5+1.2),.2*(Math.sin(Date.now()/400+5)/5+1.2))).mul(wt.translate(new s(0,-3,0))).mul(wt.translate(new s(-10,0,0))));let t=40;for(let e=0;e<t*t;e++)gt.mtl.ka=new s(.4*(Math.sin(Date.now()/200+e)/5+1.2),.4*(Math.cos(Date.now()/300+e)/5+1.2),.4*(Math.sin(Date.now()/400+5+e)/5+1.2)),gt.draw(wt.scale(new s(.2*(Math.sin(Date.now()/200+e)/5+1.2),.2*(Math.cos(Date.now()/300+e)/5+1.2),.2*(Math.sin(Date.now()/400+5+e)/5+1.2))).mul(wt.translate(new s(0,5*Math.floor(e/t),-e%t*5))))}}async function At(){let t;await fetch("bin/models/cow1.obj").then((t=>t.text())).then((e=>{t=e})).catch((()=>bt=0)),gt=await ot(t),gt.mtl.shaderName="withLightSmooth",await gt.create()}let Et=new r,vt=1,Lt=new s(-1,0,0);function Rt(){vt&&yt.draw(Et.rotateY(180*Lt.angle(a.right)/Math.PI).mul(Et.scale(new s(1,1,1))).mul(Et.translate(new s(a.userLoc.x,0,a.userLoc.z))));for(let e of t.users)null!=e&&a.id!=e.id&&yt.draw(Et.rotateY(180*Lt.angle(new s(e.right.x,e.right.y,e.right.z))/Math.PI).mul(Et.scale(new s(1,1,1))).mul(Et.translate(new s(e.userLoc.x,0,e.userLoc.z))))}async function Tt(){let t;await fetch("bin/models/me1.obj").then((t=>t.text())).then((e=>{t=e})).catch((()=>vt=0)),yt=await ot(t),yt.mtl.shaderName="withLightSmooth",await yt.create()}let _t=10;const Pt=new Float32Array([_t/2,0,_t/2,-_t/2,0,_t/2,_t/2,0,-_t/2,_t/2,0,-_t/2,-_t/2,0,_t/2,-_t/2,0,-_t/2]),kt=new Float32Array([1,1,0,1,1,0,1,0,0,1,0,0]);let Bt,Ut,St=[],Dt=new s(0,1e3,0),Ft=3,Nt=Ft*Ft;class Ot{constructor(t,e){this.x=t,this.y=e}async load(){let e="pk.eyJ1IjoiYWxla3NlaS1hLXIiLCJhIjoiY2xpeWNkbDZ0MGd4bjNkbzFxYzZzOTRjaSJ9.OTXez9jXEokdDh5WEL8lIQ";e="pk.eyJ1IjoibHM0IiwiYSI6ImNsaXluYmYyODA1bnAzcXQ4amlweGowc3gifQ.6cQiQQxsiO3WUIbKFOQrmw";let s=await fetch("https://api.mapbox.com/v4/mapbox.satellite/1/0/0.png?access_token=pk.eyJ1IjoibHM0IiwiYSI6ImNsaXluYmYyODA1bnAzcXQ4amlweGowc3gifQ.6cQiQQxsiO3WUIbKFOQrmw");if(s.ok){let e=await s.blob(),i=await createImageBitmap(e);this.texture=t.gl.createTexture(),t.gl.bindTexture(t.gl.TEXTURE_2D,this.texture),t.gl.texImage2D(t.gl.TEXTURE_2D,0,t.gl.RGBA,i.width,i.height,0,t.gl.RGBA,t.gl.UNSIGNED_BYTE,i),t.gl.texParameteri(t.gl.TEXTURE_2D,t.gl.TEXTURE_MIN_FILTER,t.gl.NEAREST),t.gl.texParameteri(t.gl.TEXTURE_2D,t.gl.TEXTURE_MAG_FILTER,t.gl.NEAREST),t.gl.texParameteri(t.gl.TEXTURE_2D,t.gl.TEXTURE_WRAP_S,t.gl.CLAMP_TO_EDGE),t.gl.texParameteri(t.gl.TEXTURE_2D,t.gl.TEXTURE_WRAP_T,t.gl.CLAMP_TO_EDGE)}else alert("HTTP error: "+s.status);return this}}function zt(){t.gl.useProgram(Ut.shaderProgram);let e=t.gl.getUniformLocation(Ut.shaderProgram,"time");const i=t.gl.getUniformLocation(Ut.shaderProgram,"projection"),n=t.gl.getUniformLocation(Ut.shaderProgram,"modelView"),o=t.gl.getUniformLocation(Ut.shaderProgram,"world");t.gl.bindVertexArray(Bt),t.gl.uniformMatrix4fv(i,!1,new Float32Array(a.matrProj.a().join().split(","))),t.gl.uniformMatrix4fv(n,!1,new Float32Array(a.matrView.a().join().split(",")));let h=new r;const l=t.gl.getUniformLocation(Ut.shaderProgram,"camLoc"),c=t.gl.getUniformLocation(Ut.shaderProgram,"lightDir");t.gl.uniform3f(c,1,1,1),t.gl.uniform3f(l,a.loc.x,a.loc.y,a.loc.z);const u=t.gl.getUniformLocation(Ut.shaderProgram,"ka"),d=t.gl.getUniformLocation(Ut.shaderProgram,"kd"),g=t.gl.getUniformLocation(Ut.shaderProgram,"ks"),f=t.gl.getUniformLocation(Ut.shaderProgram,"ph");t.gl.uniform3f(u,.01,.3,.1),t.gl.uniform3f(d,.07568,.61424,.07568),t.gl.uniform3f(g,.633,.727811,.633),t.gl.uniform1f(f,76.8),t.gl.uniform1f(e,Date.now()),Dt.sub(a.userLoc).len2()>1&&function(){St=St.filter((t=>(t.x-a.userBlockPos.x)*(t.x-a.userBlockPos.x)+(t.y-a.userBlockPos.y)*(t.y-a.userBlockPos.y)<Nt)),a.userBlockPos=new s(Math.floor(a.userLoc.x/_t),0,Math.floor(a.userLoc.z/_t));for(let t=-Ft;t<Ft;t++)for(let e=-Ft;e<Ft;e++)t*t+e*e<Nt&&!St.find((s=>s.x==t+a.userBlockPos.x&&s.y==e+a.userBlockPos.y))&&new Ot(t+a.userBlockPos.x,e+a.userBlockPos.y).load().then((t=>St.push(t)))}();const p=t.gl.getUniformLocation(Ut.shaderProgram,"tex0");for(let e=0;e<St.length;e++)t.gl.uniformMatrix4fv(o,!1,new Float32Array(h.translate(new s(St[e].x+a.userBlockPos.x,0,St[e].y+a.userBlockPos.y)).a().join().split(","))),t.gl.activeTexture(t.gl.TEXTURE0+0),t.gl.bindTexture(t.gl.TEXTURE_2D,St[e].texture),t.gl.uniform1i(p,0),t.gl.drawArrays(t.gl.TRIANGLES,0,6)}async function Ct(){Ut=await y("map"),Bt=t.gl.createVertexArray(),t.gl.bindVertexArray(Bt),w(Ut,Pt);const e=t.gl.getAttribLocation(Ut.shaderProgram,"texCoord"),i=t.gl.createBuffer();t.gl.bindBuffer(t.gl.ARRAY_BUFFER,i),t.gl.bufferData(t.gl.ARRAY_BUFFER,kt,t.gl.STATIC_DRAW),t.gl.enableVertexAttribArray(e),t.gl.vertexAttribPointer(e,2,t.gl.FLOAT,!1,0,0),t.gl.bindVertexArray(null),a.userBlockPos=new s(Math.floor(a.userLoc.x/_t),0,Math.floor(a.userLoc.z/_t))}let Mt,jt,It,Vt=[];const qt=document.getElementById("rcoeff"),Yt=document.getElementById("gcoeff"),Ht=document.getElementById("bcoeff"),Xt=document.getElementById("a"),Wt=document.getElementById("b");let Gt,Kt,Qt,$t,Jt,Zt=Date.now(),te=6;function ee(){t.gl.disable(t.gl.DEPTH_TEST),t.gl.bindFramebuffer(t.gl.FRAMEBUFFER,Qt),t.gl.viewport(0,0,Gt,Kt),t.gl.bindVertexArray(It),t.gl.useProgram(Mt.shaderProgram);let e=t.gl.getUniformLocation(Mt.shaderProgram,"time"),s=t.gl.getUniformLocation(Mt.shaderProgram,"x"),i=t.gl.getUniformLocation(Mt.shaderProgram,"y"),r=t.gl.getUniformLocation(Mt.shaderProgram,"zoom"),n=t.gl.getUniformLocation(Mt.shaderProgram,"rcoeff"),o=t.gl.getUniformLocation(Mt.shaderProgram,"gcoeff"),h=t.gl.getUniformLocation(Mt.shaderProgram,"bcoeff"),l=t.gl.getUniformLocation(Mt.shaderProgram,"a"),c=t.gl.getUniformLocation(Mt.shaderProgram,"b");t.gl.uniform1f(e,(Date.now()-Zt)/1e3),t.gl.uniform1f(i,.4),t.gl.uniform1f(s,.4),t.gl.uniform1f(r,1),t.gl.uniform1f(n,qt.value),t.gl.uniform1f(o,Yt.value),t.gl.uniform1f(h,Ht.value),t.gl.uniform1f(l,Xt.value),t.gl.uniform1f(c,5*Wt.value),t.gl.useProgram(Mt.shaderProgram),t.gl.drawArrays(t.gl.TRIANGLE_STRIP,0,4),t.gl.useProgram(jt.shaderProgram);const u=t.gl.getUniformLocation(jt.shaderProgram,"tex0");t.gl.bindFramebuffer(t.gl.FRAMEBUFFER,null),t.gl.viewport(0,0,a.frameW,a.frameH),t.gl.activeTexture(t.gl.TEXTURE0+te),t.gl.bindTexture(t.gl.TEXTURE_2D,$t),t.gl.uniform1i(u,te);let d=t.gl.getUniformLocation(jt.shaderProgram,"camDir"),g=t.gl.getUniformLocation(jt.shaderProgram,"camUp"),f=t.gl.getUniformLocation(jt.shaderProgram,"camRight"),p=t.gl.getUniformLocation(jt.shaderProgram,"projDist"),m=t.gl.getUniformLocation(jt.shaderProgram,"frameW"),y=t.gl.getUniformLocation(jt.shaderProgram,"frameH");t.gl.uniform3f(d,a.dir.x,a.dir.y,a.dir.z),t.gl.uniform3f(g,a.up.x,a.up.y,a.up.z),t.gl.uniform3f(f,a.right.x,a.right.y,a.right.z),t.gl.uniform1f(p,a.projDist),t.gl.uniform1f(m,a.frameW),t.gl.uniform1f(y,a.frameH),t.gl.useProgram(jt.shaderProgram),t.gl.drawArrays(t.gl.TRIANGLE_STRIP,0,4),t.gl.enable(t.gl.DEPTH_TEST)}async function se(){It=t.gl.createVertexArray(),t.gl.bindVertexArray(It),Mt=await y("mandelbrot"),Vt=[-1,-1,0,-1,1,0,1,-1,0,1,1,0];let e=t.gl.getAttribLocation(Mt.shaderProgram,"in_pos"),s=t.gl.createBuffer();t.gl.bindBuffer(t.gl.ARRAY_BUFFER,s),t.gl.bufferData(t.gl.ARRAY_BUFFER,new Float32Array(Vt),t.gl.STATIC_DRAW),t.gl.enableVertexAttribArray(e),t.gl.vertexAttribPointer(e,3,t.gl.FLOAT,!1,0,0),jt=await y("sky"),e=t.gl.getAttribLocation(Mt.shaderProgram,"in_pos"),s=t.gl.createBuffer(),t.gl.bindBuffer(t.gl.ARRAY_BUFFER,s),t.gl.bufferData(t.gl.ARRAY_BUFFER,new Float32Array(Vt),t.gl.STATIC_DRAW),t.gl.enableVertexAttribArray(e),t.gl.vertexAttribPointer(e,3,t.gl.FLOAT,!1,0,0),Gt=3*a.frameW,Kt=3*a.frameH,$t=t.gl.createTexture(),t.gl.bindTexture(t.gl.TEXTURE_2D,$t),t.gl.texImage2D(t.gl.TEXTURE_2D,0,t.gl.RGBA,Gt,Kt,0,t.gl.RGBA,t.gl.UNSIGNED_BYTE,null),t.gl.texParameteri(t.gl.TEXTURE_2D,t.gl.TEXTURE_MIN_FILTER,t.gl.LINEAR),Jt=t.gl.createRenderbuffer(),t.gl.bindRenderbuffer(t.gl.RENDERBUFFER,Jt),t.gl.renderbufferStorage(t.gl.RENDERBUFFER,t.gl.DEPTH_COMPONENT16,Gt,Kt),Qt=t.gl.createFramebuffer(),t.gl.bindFramebuffer(t.gl.FRAMEBUFFER,Qt),t.gl.framebufferTexture2D(t.gl.FRAMEBUFFER,t.gl.COLOR_ATTACHMENT0,t.gl.TEXTURE_2D,$t,0),t.gl.framebufferRenderbuffer(t.gl.FRAMEBUFFER,t.gl.DEPTH_ATTACHMENT,t.gl.RENDERBUFFER,Jt),t.gl.bindVertexArray(null)}class ie{constructor(t,e){this.init=t,this.render=e}}let re=[];async function ne(){oe(se,ee),oe(L,v),oe(B,k),oe(O,N),oe(mt,pt),oe(At,xt),oe(q,V),oe($,Q),oe(Tt,Rt),oe(ct,lt),oe(st,et),oe(tt,Z),oe(Ct,zt);for(let t=0;t<re.length;t++)await re[t].init()}function oe(t,e){re.push(new ie(t,e))}const ae=Object.create(null);ae.open="0",ae.close="1",ae.ping="2",ae.pong="3",ae.message="4",ae.upgrade="5",ae.noop="6";const he=Object.create(null);Object.keys(ae).forEach((t=>{he[ae[t]]=t}));const le={type:"error",data:"parser error"},ce="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===Object.prototype.toString.call(Blob),ue="function"==typeof ArrayBuffer,de=({type:t,data:e},s,i)=>{return ce&&e instanceof Blob?s?i(e):ge(e,i):ue&&(e instanceof ArrayBuffer||(r=e,"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(r):r&&r.buffer instanceof ArrayBuffer))?s?i(e):ge(new Blob([e]),i):i(ae[t]+(e||""));var r},ge=(t,e)=>{const s=new FileReader;return s.onload=function(){const t=s.result.split(",")[1];e("b"+(t||""))},s.readAsDataURL(t)},fe="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",pe="undefined"==typeof Uint8Array?[]:new Uint8Array(256);for(let t=0;t<64;t++)pe[fe.charCodeAt(t)]=t;const me="function"==typeof ArrayBuffer,ye=(t,e)=>{if("string"!=typeof t)return{type:"message",data:be(t,e)};const s=t.charAt(0);if("b"===s)return{type:"message",data:we(t.substring(1),e)};return he[s]?t.length>1?{type:he[s],data:t.substring(1)}:{type:he[s]}:le},we=(t,e)=>{if(me){const s=(t=>{let e,s,i,r,n,o=.75*t.length,a=t.length,h=0;"="===t[t.length-1]&&(o--,"="===t[t.length-2]&&o--);const l=new ArrayBuffer(o),c=new Uint8Array(l);for(e=0;e<a;e+=4)s=pe[t.charCodeAt(e)],i=pe[t.charCodeAt(e+1)],r=pe[t.charCodeAt(e+2)],n=pe[t.charCodeAt(e+3)],c[h++]=s<<2|i>>4,c[h++]=(15&i)<<4|r>>2,c[h++]=(3&r)<<6|63&n;return l})(t);return be(s,e)}return{base64:!0,data:t}},be=(t,e)=>"blob"===e&&t instanceof ArrayBuffer?new Blob([t]):t,xe=String.fromCharCode(30);function Ae(t){if(t)return function(t){for(var e in Ae.prototype)t[e]=Ae.prototype[e];return t}(t)}Ae.prototype.on=Ae.prototype.addEventListener=function(t,e){return this._callbacks=this._callbacks||{},(this._callbacks["$"+t]=this._callbacks["$"+t]||[]).push(e),this},Ae.prototype.once=function(t,e){function s(){this.off(t,s),e.apply(this,arguments)}return s.fn=e,this.on(t,s),this},Ae.prototype.off=Ae.prototype.removeListener=Ae.prototype.removeAllListeners=Ae.prototype.removeEventListener=function(t,e){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var s,i=this._callbacks["$"+t];if(!i)return this;if(1==arguments.length)return delete this._callbacks["$"+t],this;for(var r=0;r<i.length;r++)if((s=i[r])===e||s.fn===e){i.splice(r,1);break}return 0===i.length&&delete this._callbacks["$"+t],this},Ae.prototype.emit=function(t){this._callbacks=this._callbacks||{};for(var e=new Array(arguments.length-1),s=this._callbacks["$"+t],i=1;i<arguments.length;i++)e[i-1]=arguments[i];if(s){i=0;for(var r=(s=s.slice(0)).length;i<r;++i)s[i].apply(this,e)}return this},Ae.prototype.emitReserved=Ae.prototype.emit,Ae.prototype.listeners=function(t){return this._callbacks=this._callbacks||{},this._callbacks["$"+t]||[]},Ae.prototype.hasListeners=function(t){return!!this.listeners(t).length};const Ee="undefined"!=typeof self?self:"undefined"!=typeof window?window:Function("return this")();function ve(t,...e){return e.reduce(((e,s)=>(t.hasOwnProperty(s)&&(e[s]=t[s]),e)),{})}const Le=Ee.setTimeout,Re=Ee.clearTimeout;function Te(t,e){e.useNativeTimers?(t.setTimeoutFn=Le.bind(Ee),t.clearTimeoutFn=Re.bind(Ee)):(t.setTimeoutFn=Ee.setTimeout.bind(Ee),t.clearTimeoutFn=Ee.clearTimeout.bind(Ee))}class _e extends Error{constructor(t,e,s){super(t),this.description=e,this.context=s,this.type="TransportError"}}class Pe extends Ae{constructor(t){super(),this.writable=!1,Te(this,t),this.opts=t,this.query=t.query,this.socket=t.socket}onError(t,e,s){return super.emitReserved("error",new _e(t,e,s)),this}open(){return this.readyState="opening",this.doOpen(),this}close(){return"opening"!==this.readyState&&"open"!==this.readyState||(this.doClose(),this.onClose()),this}send(t){"open"===this.readyState&&this.write(t)}onOpen(){this.readyState="open",this.writable=!0,super.emitReserved("open")}onData(t){const e=ye(t,this.socket.binaryType);this.onPacket(e)}onPacket(t){super.emitReserved("packet",t)}onClose(t){this.readyState="closed",super.emitReserved("close",t)}pause(t){}}const ke="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(""),Be=64,Ue={};let Se,De=0,Fe=0;function Ne(t){let e="";do{e=ke[t%Be]+e,t=Math.floor(t/Be)}while(t>0);return e}function Oe(){const t=Ne(+new Date);return t!==Se?(De=0,Se=t):t+"."+Ne(De++)}for(;Fe<Be;Fe++)Ue[ke[Fe]]=Fe;function ze(t){let e="";for(let s in t)t.hasOwnProperty(s)&&(e.length&&(e+="&"),e+=encodeURIComponent(s)+"="+encodeURIComponent(t[s]));return e}let Ce=!1;try{Ce="undefined"!=typeof XMLHttpRequest&&"withCredentials"in new XMLHttpRequest}catch(t){}const Me=Ce;function je(t){const e=t.xdomain;try{if("undefined"!=typeof XMLHttpRequest&&(!e||Me))return new XMLHttpRequest}catch(t){}if(!e)try{return new(Ee[["Active"].concat("Object").join("X")])("Microsoft.XMLHTTP")}catch(t){}}function Ie(){}const Ve=null!=new je({xdomain:!1}).responseType;class qe extends Ae{constructor(t,e){super(),Te(this,e),this.opts=e,this.method=e.method||"GET",this.uri=t,this.async=!1!==e.async,this.data=void 0!==e.data?e.data:null,this.create()}create(){const t=ve(this.opts,"agent","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized","autoUnref");t.xdomain=!!this.opts.xd,t.xscheme=!!this.opts.xs;const e=this.xhr=new je(t);try{e.open(this.method,this.uri,this.async);try{if(this.opts.extraHeaders){e.setDisableHeaderCheck&&e.setDisableHeaderCheck(!0);for(let t in this.opts.extraHeaders)this.opts.extraHeaders.hasOwnProperty(t)&&e.setRequestHeader(t,this.opts.extraHeaders[t])}}catch(t){}if("POST"===this.method)try{e.setRequestHeader("Content-type","text/plain;charset=UTF-8")}catch(t){}try{e.setRequestHeader("Accept","*/*")}catch(t){}"withCredentials"in e&&(e.withCredentials=this.opts.withCredentials),this.opts.requestTimeout&&(e.timeout=this.opts.requestTimeout),e.onreadystatechange=()=>{4===e.readyState&&(200===e.status||1223===e.status?this.onLoad():this.setTimeoutFn((()=>{this.onError("number"==typeof e.status?e.status:0)}),0))},e.send(this.data)}catch(t){return void this.setTimeoutFn((()=>{this.onError(t)}),0)}"undefined"!=typeof document&&(this.index=qe.requestsCount++,qe.requests[this.index]=this)}onError(t){this.emitReserved("error",t,this.xhr),this.cleanup(!0)}cleanup(t){if(void 0!==this.xhr&&null!==this.xhr){if(this.xhr.onreadystatechange=Ie,t)try{this.xhr.abort()}catch(t){}"undefined"!=typeof document&&delete qe.requests[this.index],this.xhr=null}}onLoad(){const t=this.xhr.responseText;null!==t&&(this.emitReserved("data",t),this.emitReserved("success"),this.cleanup())}abort(){this.cleanup()}}if(qe.requestsCount=0,qe.requests={},"undefined"!=typeof document)if("function"==typeof attachEvent)attachEvent("onunload",Ye);else if("function"==typeof addEventListener){addEventListener("onpagehide"in Ee?"pagehide":"unload",Ye,!1)}function Ye(){for(let t in qe.requests)qe.requests.hasOwnProperty(t)&&qe.requests[t].abort()}const He="function"==typeof Promise&&"function"==typeof Promise.resolve?t=>Promise.resolve().then(t):(t,e)=>e(t,0),Xe=Ee.WebSocket||Ee.MozWebSocket,We="undefined"!=typeof navigator&&"string"==typeof navigator.product&&"reactnative"===navigator.product.toLowerCase();const Ge={websocket:class extends Pe{constructor(t){super(t),this.supportsBinary=!t.forceBase64}get name(){return"websocket"}doOpen(){if(!this.check())return;const t=this.uri(),e=this.opts.protocols,s=We?{}:ve(this.opts,"agent","perMessageDeflate","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized","localAddress","protocolVersion","origin","maxPayload","family","checkServerIdentity");this.opts.extraHeaders&&(s.headers=this.opts.extraHeaders);try{this.ws=We?new Xe(t,e,s):e?new Xe(t,e):new Xe(t)}catch(t){return this.emitReserved("error",t)}this.ws.binaryType=this.socket.binaryType||"arraybuffer",this.addEventListeners()}addEventListeners(){this.ws.onopen=()=>{this.opts.autoUnref&&this.ws._socket.unref(),this.onOpen()},this.ws.onclose=t=>this.onClose({description:"websocket connection closed",context:t}),this.ws.onmessage=t=>this.onData(t.data),this.ws.onerror=t=>this.onError("websocket error",t)}write(t){this.writable=!1;for(let e=0;e<t.length;e++){const s=t[e],i=e===t.length-1;de(s,this.supportsBinary,(t=>{try{this.ws.send(t)}catch(t){}i&&He((()=>{this.writable=!0,this.emitReserved("drain")}),this.setTimeoutFn)}))}}doClose(){void 0!==this.ws&&(this.ws.close(),this.ws=null)}uri(){let t=this.query||{};const e=this.opts.secure?"wss":"ws";let s="";this.opts.port&&("wss"===e&&443!==Number(this.opts.port)||"ws"===e&&80!==Number(this.opts.port))&&(s=":"+this.opts.port),this.opts.timestampRequests&&(t[this.opts.timestampParam]=Oe()),this.supportsBinary||(t.b64=1);const i=ze(t);return e+"://"+(-1!==this.opts.hostname.indexOf(":")?"["+this.opts.hostname+"]":this.opts.hostname)+s+this.opts.path+(i.length?"?"+i:"")}check(){return!!Xe}},polling:class extends Pe{constructor(t){if(super(t),this.polling=!1,"undefined"!=typeof location){const e="https:"===location.protocol;let s=location.port;s||(s=e?"443":"80"),this.xd="undefined"!=typeof location&&t.hostname!==location.hostname||s!==t.port,this.xs=t.secure!==e}const e=t&&t.forceBase64;this.supportsBinary=Ve&&!e}get name(){return"polling"}doOpen(){this.poll()}pause(t){this.readyState="pausing";const e=()=>{this.readyState="paused",t()};if(this.polling||!this.writable){let t=0;this.polling&&(t++,this.once("pollComplete",(function(){--t||e()}))),this.writable||(t++,this.once("drain",(function(){--t||e()})))}else e()}poll(){this.polling=!0,this.doPoll(),this.emitReserved("poll")}onData(t){((t,e)=>{const s=t.split(xe),i=[];for(let t=0;t<s.length;t++){const r=ye(s[t],e);if(i.push(r),"error"===r.type)break}return i})(t,this.socket.binaryType).forEach((t=>{if("opening"===this.readyState&&"open"===t.type&&this.onOpen(),"close"===t.type)return this.onClose({description:"transport closed by the server"}),!1;this.onPacket(t)})),"closed"!==this.readyState&&(this.polling=!1,this.emitReserved("pollComplete"),"open"===this.readyState&&this.poll())}doClose(){const t=()=>{this.write([{type:"close"}])};"open"===this.readyState?t():this.once("open",t)}write(t){this.writable=!1,((t,e)=>{const s=t.length,i=new Array(s);let r=0;t.forEach(((t,n)=>{de(t,!1,(t=>{i[n]=t,++r===s&&e(i.join(xe))}))}))})(t,(t=>{this.doWrite(t,(()=>{this.writable=!0,this.emitReserved("drain")}))}))}uri(){let t=this.query||{};const e=this.opts.secure?"https":"http";let s="";!1!==this.opts.timestampRequests&&(t[this.opts.timestampParam]=Oe()),this.supportsBinary||t.sid||(t.b64=1),this.opts.port&&("https"===e&&443!==Number(this.opts.port)||"http"===e&&80!==Number(this.opts.port))&&(s=":"+this.opts.port);const i=ze(t);return e+"://"+(-1!==this.opts.hostname.indexOf(":")?"["+this.opts.hostname+"]":this.opts.hostname)+s+this.opts.path+(i.length?"?"+i:"")}request(t={}){return Object.assign(t,{xd:this.xd,xs:this.xs},this.opts),new qe(this.uri(),t)}doWrite(t,e){const s=this.request({method:"POST",data:t});s.on("success",e),s.on("error",((t,e)=>{this.onError("xhr post error",t,e)}))}doPoll(){const t=this.request();t.on("data",this.onData.bind(this)),t.on("error",((t,e)=>{this.onError("xhr poll error",t,e)})),this.pollXhr=t}}},Ke=/^(?:(?![^:@\/?#]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@\/?#]*)(?::([^:@\/?#]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/,Qe=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"];function $e(t){const e=t,s=t.indexOf("["),i=t.indexOf("]");-1!=s&&-1!=i&&(t=t.substring(0,s)+t.substring(s,i).replace(/:/g,";")+t.substring(i,t.length));let r=Ke.exec(t||""),n={},o=14;for(;o--;)n[Qe[o]]=r[o]||"";return-1!=s&&-1!=i&&(n.source=e,n.host=n.host.substring(1,n.host.length-1).replace(/;/g,":"),n.authority=n.authority.replace("[","").replace("]","").replace(/;/g,":"),n.ipv6uri=!0),n.pathNames=function(t,e){const s=/\/{2,9}/g,i=e.replace(s,"/").split("/");"/"!=e.slice(0,1)&&0!==e.length||i.splice(0,1);"/"==e.slice(-1)&&i.splice(i.length-1,1);return i}(0,n.path),n.queryKey=function(t,e){const s={};return e.replace(/(?:^|&)([^&=]*)=?([^&]*)/g,(function(t,e,i){e&&(s[e]=i)})),s}(0,n.query),n}let Je=class t extends Ae{constructor(t,e={}){super(),this.writeBuffer=[],t&&"object"==typeof t&&(e=t,t=null),t?(t=$e(t),e.hostname=t.host,e.secure="https"===t.protocol||"wss"===t.protocol,e.port=t.port,t.query&&(e.query=t.query)):e.host&&(e.hostname=$e(e.host).host),Te(this,e),this.secure=null!=e.secure?e.secure:"undefined"!=typeof location&&"https:"===location.protocol,e.hostname&&!e.port&&(e.port=this.secure?"443":"80"),this.hostname=e.hostname||("undefined"!=typeof location?location.hostname:"localhost"),this.port=e.port||("undefined"!=typeof location&&location.port?location.port:this.secure?"443":"80"),this.transports=e.transports||["polling","websocket"],this.writeBuffer=[],this.prevBufferLen=0,this.opts=Object.assign({path:"/engine.io",agent:!1,withCredentials:!1,upgrade:!0,timestampParam:"t",rememberUpgrade:!1,addTrailingSlash:!0,rejectUnauthorized:!0,perMessageDeflate:{threshold:1024},transportOptions:{},closeOnBeforeunload:!0},e),this.opts.path=this.opts.path.replace(/\/$/,"")+(this.opts.addTrailingSlash?"/":""),"string"==typeof this.opts.query&&(this.opts.query=function(t){let e={},s=t.split("&");for(let t=0,i=s.length;t<i;t++){let i=s[t].split("=");e[decodeURIComponent(i[0])]=decodeURIComponent(i[1])}return e}(this.opts.query)),this.id=null,this.upgrades=null,this.pingInterval=null,this.pingTimeout=null,this.pingTimeoutTimer=null,"function"==typeof addEventListener&&(this.opts.closeOnBeforeunload&&(this.beforeunloadEventListener=()=>{this.transport&&(this.transport.removeAllListeners(),this.transport.close())},addEventListener("beforeunload",this.beforeunloadEventListener,!1)),"localhost"!==this.hostname&&(this.offlineEventListener=()=>{this.onClose("transport close",{description:"network connection lost"})},addEventListener("offline",this.offlineEventListener,!1))),this.open()}createTransport(t){const e=Object.assign({},this.opts.query);e.EIO=4,e.transport=t,this.id&&(e.sid=this.id);const s=Object.assign({},this.opts.transportOptions[t],this.opts,{query:e,socket:this,hostname:this.hostname,secure:this.secure,port:this.port});return new Ge[t](s)}open(){let e;if(this.opts.rememberUpgrade&&t.priorWebsocketSuccess&&-1!==this.transports.indexOf("websocket"))e="websocket";else{if(0===this.transports.length)return void this.setTimeoutFn((()=>{this.emitReserved("error","No transports available")}),0);e=this.transports[0]}this.readyState="opening";try{e=this.createTransport(e)}catch(t){return this.transports.shift(),void this.open()}e.open(),this.setTransport(e)}setTransport(t){this.transport&&this.transport.removeAllListeners(),this.transport=t,t.on("drain",this.onDrain.bind(this)).on("packet",this.onPacket.bind(this)).on("error",this.onError.bind(this)).on("close",(t=>this.onClose("transport close",t)))}probe(e){let s=this.createTransport(e),i=!1;t.priorWebsocketSuccess=!1;const r=()=>{i||(s.send([{type:"ping",data:"probe"}]),s.once("packet",(e=>{if(!i)if("pong"===e.type&&"probe"===e.data){if(this.upgrading=!0,this.emitReserved("upgrading",s),!s)return;t.priorWebsocketSuccess="websocket"===s.name,this.transport.pause((()=>{i||"closed"!==this.readyState&&(c(),this.setTransport(s),s.send([{type:"upgrade"}]),this.emitReserved("upgrade",s),s=null,this.upgrading=!1,this.flush())}))}else{const t=new Error("probe error");t.transport=s.name,this.emitReserved("upgradeError",t)}})))};function n(){i||(i=!0,c(),s.close(),s=null)}const o=t=>{const e=new Error("probe error: "+t);e.transport=s.name,n(),this.emitReserved("upgradeError",e)};function a(){o("transport closed")}function h(){o("socket closed")}function l(t){s&&t.name!==s.name&&n()}const c=()=>{s.removeListener("open",r),s.removeListener("error",o),s.removeListener("close",a),this.off("close",h),this.off("upgrading",l)};s.once("open",r),s.once("error",o),s.once("close",a),this.once("close",h),this.once("upgrading",l),s.open()}onOpen(){if(this.readyState="open",t.priorWebsocketSuccess="websocket"===this.transport.name,this.emitReserved("open"),this.flush(),"open"===this.readyState&&this.opts.upgrade){let t=0;const e=this.upgrades.length;for(;t<e;t++)this.probe(this.upgrades[t])}}onPacket(t){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState)switch(this.emitReserved("packet",t),this.emitReserved("heartbeat"),t.type){case"open":this.onHandshake(JSON.parse(t.data));break;case"ping":this.resetPingTimeout(),this.sendPacket("pong"),this.emitReserved("ping"),this.emitReserved("pong");break;case"error":const e=new Error("server error");e.code=t.data,this.onError(e);break;case"message":this.emitReserved("data",t.data),this.emitReserved("message",t.data)}}onHandshake(t){this.emitReserved("handshake",t),this.id=t.sid,this.transport.query.sid=t.sid,this.upgrades=this.filterUpgrades(t.upgrades),this.pingInterval=t.pingInterval,this.pingTimeout=t.pingTimeout,this.maxPayload=t.maxPayload,this.onOpen(),"closed"!==this.readyState&&this.resetPingTimeout()}resetPingTimeout(){this.clearTimeoutFn(this.pingTimeoutTimer),this.pingTimeoutTimer=this.setTimeoutFn((()=>{this.onClose("ping timeout")}),this.pingInterval+this.pingTimeout),this.opts.autoUnref&&this.pingTimeoutTimer.unref()}onDrain(){this.writeBuffer.splice(0,this.prevBufferLen),this.prevBufferLen=0,0===this.writeBuffer.length?this.emitReserved("drain"):this.flush()}flush(){if("closed"!==this.readyState&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length){const t=this.getWritablePackets();this.transport.send(t),this.prevBufferLen=t.length,this.emitReserved("flush")}}getWritablePackets(){if(!(this.maxPayload&&"polling"===this.transport.name&&this.writeBuffer.length>1))return this.writeBuffer;let t=1;for(let s=0;s<this.writeBuffer.length;s++){const i=this.writeBuffer[s].data;if(i&&(t+="string"==typeof(e=i)?function(t){let e=0,s=0;for(let i=0,r=t.length;i<r;i++)e=t.charCodeAt(i),e<128?s+=1:e<2048?s+=2:e<55296||e>=57344?s+=3:(i++,s+=4);return s}(e):Math.ceil(1.33*(e.byteLength||e.size))),s>0&&t>this.maxPayload)return this.writeBuffer.slice(0,s);t+=2}var e;return this.writeBuffer}write(t,e,s){return this.sendPacket("message",t,e,s),this}send(t,e,s){return this.sendPacket("message",t,e,s),this}sendPacket(t,e,s,i){if("function"==typeof e&&(i=e,e=void 0),"function"==typeof s&&(i=s,s=null),"closing"===this.readyState||"closed"===this.readyState)return;(s=s||{}).compress=!1!==s.compress;const r={type:t,data:e,options:s};this.emitReserved("packetCreate",r),this.writeBuffer.push(r),i&&this.once("flush",i),this.flush()}close(){const t=()=>{this.onClose("forced close"),this.transport.close()},e=()=>{this.off("upgrade",e),this.off("upgradeError",e),t()},s=()=>{this.once("upgrade",e),this.once("upgradeError",e)};return"opening"!==this.readyState&&"open"!==this.readyState||(this.readyState="closing",this.writeBuffer.length?this.once("drain",(()=>{this.upgrading?s():t()})):this.upgrading?s():t()),this}onError(e){t.priorWebsocketSuccess=!1,this.emitReserved("error",e),this.onClose("transport error",e)}onClose(t,e){"opening"!==this.readyState&&"open"!==this.readyState&&"closing"!==this.readyState||(this.clearTimeoutFn(this.pingTimeoutTimer),this.transport.removeAllListeners("close"),this.transport.close(),this.transport.removeAllListeners(),"function"==typeof removeEventListener&&(removeEventListener("beforeunload",this.beforeunloadEventListener,!1),removeEventListener("offline",this.offlineEventListener,!1)),this.readyState="closed",this.id=null,this.emitReserved("close",t,e),this.writeBuffer=[],this.prevBufferLen=0)}filterUpgrades(t){const e=[];let s=0;const i=t.length;for(;s<i;s++)~this.transports.indexOf(t[s])&&e.push(t[s]);return e}};Je.protocol=4;const Ze="function"==typeof ArrayBuffer,ts=t=>"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(t):t.buffer instanceof ArrayBuffer,es=Object.prototype.toString,ss="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===es.call(Blob),is="function"==typeof File||"undefined"!=typeof File&&"[object FileConstructor]"===es.call(File);function rs(t){return Ze&&(t instanceof ArrayBuffer||ts(t))||ss&&t instanceof Blob||is&&t instanceof File}function ns(t,e){if(!t||"object"!=typeof t)return!1;if(Array.isArray(t)){for(let e=0,s=t.length;e<s;e++)if(ns(t[e]))return!0;return!1}if(rs(t))return!0;if(t.toJSON&&"function"==typeof t.toJSON&&1===arguments.length)return ns(t.toJSON(),!0);for(const e in t)if(Object.prototype.hasOwnProperty.call(t,e)&&ns(t[e]))return!0;return!1}function os(t){const e=[],s=t.data,i=t;return i.data=as(s,e),i.attachments=e.length,{packet:i,buffers:e}}function as(t,e){if(!t)return t;if(rs(t)){const s={_placeholder:!0,num:e.length};return e.push(t),s}if(Array.isArray(t)){const s=new Array(t.length);for(let i=0;i<t.length;i++)s[i]=as(t[i],e);return s}if("object"==typeof t&&!(t instanceof Date)){const s={};for(const i in t)Object.prototype.hasOwnProperty.call(t,i)&&(s[i]=as(t[i],e));return s}return t}function hs(t,e){return t.data=ls(t.data,e),delete t.attachments,t}function ls(t,e){if(!t)return t;if(t&&!0===t._placeholder){if("number"==typeof t.num&&t.num>=0&&t.num<e.length)return e[t.num];throw new Error("illegal attachments")}if(Array.isArray(t))for(let s=0;s<t.length;s++)t[s]=ls(t[s],e);else if("object"==typeof t)for(const s in t)Object.prototype.hasOwnProperty.call(t,s)&&(t[s]=ls(t[s],e));return t}const cs=["connect","connect_error","disconnect","disconnecting","newListener","removeListener"];var us;!function(t){t[t.CONNECT=0]="CONNECT",t[t.DISCONNECT=1]="DISCONNECT",t[t.EVENT=2]="EVENT",t[t.ACK=3]="ACK",t[t.CONNECT_ERROR=4]="CONNECT_ERROR",t[t.BINARY_EVENT=5]="BINARY_EVENT",t[t.BINARY_ACK=6]="BINARY_ACK"}(us||(us={}));function ds(t){return"[object Object]"===Object.prototype.toString.call(t)}class gs extends Ae{constructor(t){super(),this.reviver=t}add(t){let e;if("string"==typeof t){if(this.reconstructor)throw new Error("got plaintext data when reconstructing a packet");e=this.decodeString(t);const s=e.type===us.BINARY_EVENT;s||e.type===us.BINARY_ACK?(e.type=s?us.EVENT:us.ACK,this.reconstructor=new fs(e),0===e.attachments&&super.emitReserved("decoded",e)):super.emitReserved("decoded",e)}else{if(!rs(t)&&!t.base64)throw new Error("Unknown type: "+t);if(!this.reconstructor)throw new Error("got binary data when not reconstructing a packet");e=this.reconstructor.takeBinaryData(t),e&&(this.reconstructor=null,super.emitReserved("decoded",e))}}decodeString(t){let e=0;const s={type:Number(t.charAt(0))};if(void 0===us[s.type])throw new Error("unknown packet type "+s.type);if(s.type===us.BINARY_EVENT||s.type===us.BINARY_ACK){const i=e+1;for(;"-"!==t.charAt(++e)&&e!=t.length;);const r=t.substring(i,e);if(r!=Number(r)||"-"!==t.charAt(e))throw new Error("Illegal attachments");s.attachments=Number(r)}if("/"===t.charAt(e+1)){const i=e+1;for(;++e;){if(","===t.charAt(e))break;if(e===t.length)break}s.nsp=t.substring(i,e)}else s.nsp="/";const i=t.charAt(e+1);if(""!==i&&Number(i)==i){const i=e+1;for(;++e;){const s=t.charAt(e);if(null==s||Number(s)!=s){--e;break}if(e===t.length)break}s.id=Number(t.substring(i,e+1))}if(t.charAt(++e)){const i=this.tryParse(t.substr(e));if(!gs.isPayloadValid(s.type,i))throw new Error("invalid payload");s.data=i}return s}tryParse(t){try{return JSON.parse(t,this.reviver)}catch(t){return!1}}static isPayloadValid(t,e){switch(t){case us.CONNECT:return ds(e);case us.DISCONNECT:return void 0===e;case us.CONNECT_ERROR:return"string"==typeof e||ds(e);case us.EVENT:case us.BINARY_EVENT:return Array.isArray(e)&&("number"==typeof e[0]||"string"==typeof e[0]&&-1===cs.indexOf(e[0]));case us.ACK:case us.BINARY_ACK:return Array.isArray(e)}}destroy(){this.reconstructor&&(this.reconstructor.finishedReconstruction(),this.reconstructor=null)}}class fs{constructor(t){this.packet=t,this.buffers=[],this.reconPack=t}takeBinaryData(t){if(this.buffers.push(t),this.buffers.length===this.reconPack.attachments){const t=hs(this.reconPack,this.buffers);return this.finishedReconstruction(),t}return null}finishedReconstruction(){this.reconPack=null,this.buffers=[]}}var ps=Object.freeze({__proto__:null,Decoder:gs,Encoder:class{constructor(t){this.replacer=t}encode(t){return t.type!==us.EVENT&&t.type!==us.ACK||!ns(t)?[this.encodeAsString(t)]:this.encodeAsBinary({type:t.type===us.EVENT?us.BINARY_EVENT:us.BINARY_ACK,nsp:t.nsp,data:t.data,id:t.id})}encodeAsString(t){let e=""+t.type;return t.type!==us.BINARY_EVENT&&t.type!==us.BINARY_ACK||(e+=t.attachments+"-"),t.nsp&&"/"!==t.nsp&&(e+=t.nsp+","),null!=t.id&&(e+=t.id),null!=t.data&&(e+=JSON.stringify(t.data,this.replacer)),e}encodeAsBinary(t){const e=os(t),s=this.encodeAsString(e.packet),i=e.buffers;return i.unshift(s),i}},get PacketType(){return us},protocol:5});function ms(t,e,s){return t.on(e,s),function(){t.off(e,s)}}const ys=Object.freeze({connect:1,connect_error:1,disconnect:1,disconnecting:1,newListener:1,removeListener:1});class ws extends Ae{constructor(t,e,s){super(),this.connected=!1,this.recovered=!1,this.receiveBuffer=[],this.sendBuffer=[],this._queue=[],this._queueSeq=0,this.ids=0,this.acks={},this.flags={},this.io=t,this.nsp=e,s&&s.auth&&(this.auth=s.auth),this._opts=Object.assign({},s),this.io._autoConnect&&this.open()}get disconnected(){return!this.connected}subEvents(){if(this.subs)return;const t=this.io;this.subs=[ms(t,"open",this.onopen.bind(this)),ms(t,"packet",this.onpacket.bind(this)),ms(t,"error",this.onerror.bind(this)),ms(t,"close",this.onclose.bind(this))]}get active(){return!!this.subs}connect(){return this.connected||(this.subEvents(),this.io._reconnecting||this.io.open(),"open"===this.io._readyState&&this.onopen()),this}open(){return this.connect()}send(...t){return t.unshift("message"),this.emit.apply(this,t),this}emit(t,...e){if(ys.hasOwnProperty(t))throw new Error('"'+t.toString()+'" is a reserved event name');if(e.unshift(t),this._opts.retries&&!this.flags.fromQueue&&!this.flags.volatile)return this._addToQueue(e),this;const s={type:us.EVENT,data:e,options:{}};if(s.options.compress=!1!==this.flags.compress,"function"==typeof e[e.length-1]){const t=this.ids++,i=e.pop();this._registerAckCallback(t,i),s.id=t}const i=this.io.engine&&this.io.engine.transport&&this.io.engine.transport.writable;return this.flags.volatile&&(!i||!this.connected)||(this.connected?(this.notifyOutgoingListeners(s),this.packet(s)):this.sendBuffer.push(s)),this.flags={},this}_registerAckCallback(t,e){var s;const i=null!==(s=this.flags.timeout)&&void 0!==s?s:this._opts.ackTimeout;if(void 0===i)return void(this.acks[t]=e);const r=this.io.setTimeoutFn((()=>{delete this.acks[t];for(let e=0;e<this.sendBuffer.length;e++)this.sendBuffer[e].id===t&&this.sendBuffer.splice(e,1);e.call(this,new Error("operation has timed out"))}),i);this.acks[t]=(...t)=>{this.io.clearTimeoutFn(r),e.apply(this,[null,...t])}}emitWithAck(t,...e){const s=void 0!==this.flags.timeout||void 0!==this._opts.ackTimeout;return new Promise(((i,r)=>{e.push(((t,e)=>s?t?r(t):i(e):i(t))),this.emit(t,...e)}))}_addToQueue(t){let e;"function"==typeof t[t.length-1]&&(e=t.pop());const s={id:this._queueSeq++,tryCount:0,pending:!1,args:t,flags:Object.assign({fromQueue:!0},this.flags)};t.push(((t,...i)=>{if(s!==this._queue[0])return;return null!==t?s.tryCount>this._opts.retries&&(this._queue.shift(),e&&e(t)):(this._queue.shift(),e&&e(null,...i)),s.pending=!1,this._drainQueue()})),this._queue.push(s),this._drainQueue()}_drainQueue(t=!1){if(!this.connected||0===this._queue.length)return;const e=this._queue[0];e.pending&&!t||(e.pending=!0,e.tryCount++,this.flags=e.flags,this.emit.apply(this,e.args))}packet(t){t.nsp=this.nsp,this.io._packet(t)}onopen(){"function"==typeof this.auth?this.auth((t=>{this._sendConnectPacket(t)})):this._sendConnectPacket(this.auth)}_sendConnectPacket(t){this.packet({type:us.CONNECT,data:this._pid?Object.assign({pid:this._pid,offset:this._lastOffset},t):t})}onerror(t){this.connected||this.emitReserved("connect_error",t)}onclose(t,e){this.connected=!1,delete this.id,this.emitReserved("disconnect",t,e)}onpacket(t){if(t.nsp===this.nsp)switch(t.type){case us.CONNECT:t.data&&t.data.sid?this.onconnect(t.data.sid,t.data.pid):this.emitReserved("connect_error",new Error("It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)"));break;case us.EVENT:case us.BINARY_EVENT:this.onevent(t);break;case us.ACK:case us.BINARY_ACK:this.onack(t);break;case us.DISCONNECT:this.ondisconnect();break;case us.CONNECT_ERROR:this.destroy();const e=new Error(t.data.message);e.data=t.data.data,this.emitReserved("connect_error",e)}}onevent(t){const e=t.data||[];null!=t.id&&e.push(this.ack(t.id)),this.connected?this.emitEvent(e):this.receiveBuffer.push(Object.freeze(e))}emitEvent(t){if(this._anyListeners&&this._anyListeners.length){const e=this._anyListeners.slice();for(const s of e)s.apply(this,t)}super.emit.apply(this,t),this._pid&&t.length&&"string"==typeof t[t.length-1]&&(this._lastOffset=t[t.length-1])}ack(t){const e=this;let s=!1;return function(...i){s||(s=!0,e.packet({type:us.ACK,id:t,data:i}))}}onack(t){const e=this.acks[t.id];"function"==typeof e&&(e.apply(this,t.data),delete this.acks[t.id])}onconnect(t,e){this.id=t,this.recovered=e&&this._pid===e,this._pid=e,this.connected=!0,this.emitBuffered(),this.emitReserved("connect"),this._drainQueue(!0)}emitBuffered(){this.receiveBuffer.forEach((t=>this.emitEvent(t))),this.receiveBuffer=[],this.sendBuffer.forEach((t=>{this.notifyOutgoingListeners(t),this.packet(t)})),this.sendBuffer=[]}ondisconnect(){this.destroy(),this.onclose("io server disconnect")}destroy(){this.subs&&(this.subs.forEach((t=>t())),this.subs=void 0),this.io._destroy(this)}disconnect(){return this.connected&&this.packet({type:us.DISCONNECT}),this.destroy(),this.connected&&this.onclose("io client disconnect"),this}close(){return this.disconnect()}compress(t){return this.flags.compress=t,this}get volatile(){return this.flags.volatile=!0,this}timeout(t){return this.flags.timeout=t,this}onAny(t){return this._anyListeners=this._anyListeners||[],this._anyListeners.push(t),this}prependAny(t){return this._anyListeners=this._anyListeners||[],this._anyListeners.unshift(t),this}offAny(t){if(!this._anyListeners)return this;if(t){const e=this._anyListeners;for(let s=0;s<e.length;s++)if(t===e[s])return e.splice(s,1),this}else this._anyListeners=[];return this}listenersAny(){return this._anyListeners||[]}onAnyOutgoing(t){return this._anyOutgoingListeners=this._anyOutgoingListeners||[],this._anyOutgoingListeners.push(t),this}prependAnyOutgoing(t){return this._anyOutgoingListeners=this._anyOutgoingListeners||[],this._anyOutgoingListeners.unshift(t),this}offAnyOutgoing(t){if(!this._anyOutgoingListeners)return this;if(t){const e=this._anyOutgoingListeners;for(let s=0;s<e.length;s++)if(t===e[s])return e.splice(s,1),this}else this._anyOutgoingListeners=[];return this}listenersAnyOutgoing(){return this._anyOutgoingListeners||[]}notifyOutgoingListeners(t){if(this._anyOutgoingListeners&&this._anyOutgoingListeners.length){const e=this._anyOutgoingListeners.slice();for(const s of e)s.apply(this,t.data)}}}function bs(t){t=t||{},this.ms=t.min||100,this.max=t.max||1e4,this.factor=t.factor||2,this.jitter=t.jitter>0&&t.jitter<=1?t.jitter:0,this.attempts=0}bs.prototype.duration=function(){var t=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var e=Math.random(),s=Math.floor(e*this.jitter*t);t=0==(1&Math.floor(10*e))?t-s:t+s}return 0|Math.min(t,this.max)},bs.prototype.reset=function(){this.attempts=0},bs.prototype.setMin=function(t){this.ms=t},bs.prototype.setMax=function(t){this.max=t},bs.prototype.setJitter=function(t){this.jitter=t};class xs extends Ae{constructor(t,e){var s;super(),this.nsps={},this.subs=[],t&&"object"==typeof t&&(e=t,t=void 0),(e=e||{}).path=e.path||"/socket.io",this.opts=e,Te(this,e),this.reconnection(!1!==e.reconnection),this.reconnectionAttempts(e.reconnectionAttempts||1/0),this.reconnectionDelay(e.reconnectionDelay||1e3),this.reconnectionDelayMax(e.reconnectionDelayMax||5e3),this.randomizationFactor(null!==(s=e.randomizationFactor)&&void 0!==s?s:.5),this.backoff=new bs({min:this.reconnectionDelay(),max:this.reconnectionDelayMax(),jitter:this.randomizationFactor()}),this.timeout(null==e.timeout?2e4:e.timeout),this._readyState="closed",this.uri=t;const i=e.parser||ps;this.encoder=new i.Encoder,this.decoder=new i.Decoder,this._autoConnect=!1!==e.autoConnect,this._autoConnect&&this.open()}reconnection(t){return arguments.length?(this._reconnection=!!t,this):this._reconnection}reconnectionAttempts(t){return void 0===t?this._reconnectionAttempts:(this._reconnectionAttempts=t,this)}reconnectionDelay(t){var e;return void 0===t?this._reconnectionDelay:(this._reconnectionDelay=t,null===(e=this.backoff)||void 0===e||e.setMin(t),this)}randomizationFactor(t){var e;return void 0===t?this._randomizationFactor:(this._randomizationFactor=t,null===(e=this.backoff)||void 0===e||e.setJitter(t),this)}reconnectionDelayMax(t){var e;return void 0===t?this._reconnectionDelayMax:(this._reconnectionDelayMax=t,null===(e=this.backoff)||void 0===e||e.setMax(t),this)}timeout(t){return arguments.length?(this._timeout=t,this):this._timeout}maybeReconnectOnOpen(){!this._reconnecting&&this._reconnection&&0===this.backoff.attempts&&this.reconnect()}open(t){if(~this._readyState.indexOf("open"))return this;this.engine=new Je(this.uri,this.opts);const e=this.engine,s=this;this._readyState="opening",this.skipReconnect=!1;const i=ms(e,"open",(function(){s.onopen(),t&&t()})),r=ms(e,"error",(e=>{s.cleanup(),s._readyState="closed",this.emitReserved("error",e),t?t(e):s.maybeReconnectOnOpen()}));if(!1!==this._timeout){const t=this._timeout;0===t&&i();const s=this.setTimeoutFn((()=>{i(),e.close(),e.emit("error",new Error("timeout"))}),t);this.opts.autoUnref&&s.unref(),this.subs.push((function(){clearTimeout(s)}))}return this.subs.push(i),this.subs.push(r),this}connect(t){return this.open(t)}onopen(){this.cleanup(),this._readyState="open",this.emitReserved("open");const t=this.engine;this.subs.push(ms(t,"ping",this.onping.bind(this)),ms(t,"data",this.ondata.bind(this)),ms(t,"error",this.onerror.bind(this)),ms(t,"close",this.onclose.bind(this)),ms(this.decoder,"decoded",this.ondecoded.bind(this)))}onping(){this.emitReserved("ping")}ondata(t){try{this.decoder.add(t)}catch(t){this.onclose("parse error",t)}}ondecoded(t){He((()=>{this.emitReserved("packet",t)}),this.setTimeoutFn)}onerror(t){this.emitReserved("error",t)}socket(t,e){let s=this.nsps[t];return s?this._autoConnect&&!s.active&&s.connect():(s=new ws(this,t,e),this.nsps[t]=s),s}_destroy(t){const e=Object.keys(this.nsps);for(const t of e){if(this.nsps[t].active)return}this._close()}_packet(t){const e=this.encoder.encode(t);for(let s=0;s<e.length;s++)this.engine.write(e[s],t.options)}cleanup(){this.subs.forEach((t=>t())),this.subs.length=0,this.decoder.destroy()}_close(){this.skipReconnect=!0,this._reconnecting=!1,this.onclose("forced close"),this.engine&&this.engine.close()}disconnect(){return this._close()}onclose(t,e){this.cleanup(),this.backoff.reset(),this._readyState="closed",this.emitReserved("close",t,e),this._reconnection&&!this.skipReconnect&&this.reconnect()}reconnect(){if(this._reconnecting||this.skipReconnect)return this;const t=this;if(this.backoff.attempts>=this._reconnectionAttempts)this.backoff.reset(),this.emitReserved("reconnect_failed"),this._reconnecting=!1;else{const e=this.backoff.duration();this._reconnecting=!0;const s=this.setTimeoutFn((()=>{t.skipReconnect||(this.emitReserved("reconnect_attempt",t.backoff.attempts),t.skipReconnect||t.open((e=>{e?(t._reconnecting=!1,t.reconnect(),this.emitReserved("reconnect_error",e)):t.onreconnect()})))}),e);this.opts.autoUnref&&s.unref(),this.subs.push((function(){clearTimeout(s)}))}}onreconnect(){const t=this.backoff.attempts;this._reconnecting=!1,this.backoff.reset(),this.emitReserved("reconnect",t)}}const As={};function Es(t,e){"object"==typeof t&&(e=t,t=void 0);const s=function(t,e="",s){let i=t;s=s||"undefined"!=typeof location&&location,null==t&&(t=s.protocol+"//"+s.host),"string"==typeof t&&("/"===t.charAt(0)&&(t="/"===t.charAt(1)?s.protocol+t:s.host+t),/^(https?|wss?):\/\//.test(t)||(t=void 0!==s?s.protocol+"//"+t:"https://"+t),i=$e(t)),i.port||(/^(http|ws)$/.test(i.protocol)?i.port="80":/^(http|ws)s$/.test(i.protocol)&&(i.port="443")),i.path=i.path||"/";const r=-1!==i.host.indexOf(":")?"["+i.host+"]":i.host;return i.id=i.protocol+"://"+r+":"+i.port+e,i.href=i.protocol+"://"+r+(s&&s.port===i.port?"":":"+i.port),i}(t,(e=e||{}).path||"/socket.io"),i=s.source,r=s.id,n=s.path,o=As[r]&&n in As[r].nsps;let a;return e.forceNew||e["force new connection"]||!1===e.multiplex||o?a=new xs(i,e):(As[r]||(As[r]=new xs(i,e)),a=As[r]),s.query&&!e.query&&(e.query=s.queryKey),a.socket(s.path,e)}Object.assign(Es,{Manager:xs,Socket:ws,io:Es,connect:Es});const vs=Es();let Ls,Rs,Ts;function _s(e){t.users=e}function Ps(t){Ts.innerHTML=t.map((t=>`<li id="${t.sender.userName==vs.userName?"user":"notUser"}">${t.sender.userName+" : "+t.text}\n        <button class="deleteMessage" id="${t._id.toString()}" style="\n        float: right;"> Delete</button><span style="\n        float: right;">${t.date}</span>\n        </li>`)).join(""),Ts.scrollTo(0,Ts.scrollHeight),window.scrollTo(0,Ts.scrollHeight),document.getElementById("msgbox").scrollTop=document.getElementById("msgbox").scrollHeight;for(let t of document.getElementsByClassName("deleteMessage"))t.onclick=()=>{vs.emit("deleteMessage",t.id)}}function ks(){let t=prompt("Enter your name");console.log(vs.id),vs.emit("reloadRequest"),vs.emit("auth",t),vs.userName=t}t.gl=void 0,t.users=[],window.addEventListener("load",(()=>{function e(t){var e=t.changedTouches[0],s="";switch(t.type){case"touchstart":s="mousedown";break;case"touchmove":s="mousemove";break;case"touchend":s="mouseup";break;default:return}var i=document.createEvent("MouseEvent");i.initMouseEvent(s,!0,!0,window,1,e.screenX,e.screenY,e.clientX,e.clientY,!1,!1,!1,!1,0,null),e.target.dispatchEvent(i),t.preventDefault()}Ts=document.getElementById("messages"),document.getElementById("id1").onkeyup=t=>{if("Enter"===t.code){const t=document.getElementById("id1").value;console.log(t),document.getElementById("id1").value="",vs.emit("MessageToServer",t)}},document.getElementById("clearButton").onclick=()=>{vs.emit("clearAllMessages")},vs.on("connect",ks),vs.on("userReloadResponse",_s),vs.on("msgReloadResponse",Ps),vs.on("disconnect",(()=>{console.log("disconnected")})),Ls=document.getElementById("glCanvas"),t.gl=Ls.getContext("webgl2"),Rs=document.getElementById("coords"),Us(),window.onmousemove=h,window.onmousedown=l,window.onmouseup=c,window.addEventListener("contextmenu",(t=>t.preventDefault())),window.addEventListener("wheel",(t=>{!function(t){o.dz=t.deltaY}(t)})),window.onscroll=()=>window.scroll(0,0),window.addEventListener("keyup",(t=>{!function(t){n[t.code]=0}(t)})),window.addEventListener("keydown",(t=>{!function(t){n[t.code]=1}(t)})),document.querySelector("#file").addEventListener("change",nt),document.addEventListener("touchstart",e,!0),document.addEventListener("touchmove",e,!0),document.addEventListener("touchend",e,!0),document.addEventListener("touchcancel",e,!0)}));const Bs=()=>{t.gl.clearColor(.8,.47,.3,1),t.gl.clear(t.gl.COLOR_BUFFER_BIT|t.gl.DEPTH_BUFFER_BIT),Ls.width=window.innerWidth,Ls.height=window.innerHeight,g(),a.setSize(Ls.width,Ls.height),a.camSet(a.loc,a.at,a.up,a.pos,a.userLoc),Rs.innerHTML="LocX: "+a.loc.x.toString().slice(0,5)+" LocY: "+a.loc.y.toString().slice(0,5)+" LocZ: "+a.loc.z.toString().slice(0,5)+"<br /> Dir X: "+a.dir.x.toString().slice(0,5)+" Dir Y: "+a.dir.y.toString().slice(0,5)+" Dir Z: "+a.dir.z.toString().slice(0,5)+"<br /> Up X: "+a.up.x.toString().slice(0,5)+" Up Y: "+a.up.y.toString().slice(0,5)+" Up Z: "+a.up.z.toString().slice(0,5)+"<br /> At X: "+a.at.x.toString().slice(0,5)+" At Y: "+a.at.y.toString().slice(0,5)+" At Z: "+a.at.z.toString().slice(0,5)+"<br />",re.forEach((t=>{t.render()})),o.dx=o.dy=o.dz=0,vs.emit("reloadRequest",a),window.requestAnimationFrame(Bs)};async function Us(){t.gl.clearColor(1,1,0,1),t.gl.clear(t.gl.COLOR_BUFFER_BIT),t.gl.enable(t.gl.DEPTH_TEST),t.gl.viewport(0,0,t.gl.canvas.width,t.gl.canvas.height),Ls.width=window.innerWidth,Ls.height=window.innerHeight,g(),a.setSize(Ls.width,Ls.height),a.camSet(a.loc,a.at,a.up,a.pos,a.userLoc),await y("default"),await ne(),Bs()}t.initGL=Us}({});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
