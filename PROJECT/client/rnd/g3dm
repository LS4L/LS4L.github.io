// Read binary data from file
  async loadFile(fileName) {
    let response = await fetch(fileName);
    let data_buffer = await response.arrayBuffer();
    let buffer = new Uint8Array(data_buffer);
    let curPos = 0;

    const sign = buffer.slice(curPos, curPos += 4).
      reduce((res_str, ch) => res_str += String.fromCharCode(ch), "");
    if (sign != "G3DM")
      . . .
    let [numOfPrims, numOfMaterials, numOfTextures] =
      new Uint32Array(data_buffer.slice(curPos, curPos += 4 * 3));
    . . .
      let [numOfVertexes, numOfFacetIndexes, mtlNo] =
        new Uint32Array(data_buffer.slice(curPos, curPos += 4 * 3));
      let v = new Float32Array(data_buffer.
                       slice(curPos, curPos += 4 * 12 * numOfVertexes));
       let ind = new Uint32Array(data_buffer.
                       slice(curPos, curPos += 4 * numOfFacetIndexes));
    . . .

    const mtl_name = buffer.slice(curPos, curPos += 300).
      reduce((res_str, ch) => res_str += ch == 0 ? "" : String.fromCharCode(ch),
             "");
    let s = new Float32Array(data_buffer.slice(curPos, curPos += 4 * 11));
    let txtarr = new Int32Array(data_buffer.slice(curPos, curPos += 4 * 8));
    let mtl = {
      name: mat_name,
      sh:
      {
        ka: vec3(s[0], s[1], s[2]),
        kd: vec3(s[3], s[4], s[5]),
        ks: vec3(s[6], s[7], s[8]),
        ph: s[9],
        trans: s[10],
      },
      txs: txtarr,
    };
    // Skip not used shader info
    curPos += 300 + 4;
    . . .
      let
        [w, h, c] = new Uint32Array(data_buffer.slice(curPos, curPos += 4 * 3));
      let
        img = buffer.slice(curPos, curPos + w * h * c);
      let tx = texture({name: name, w: w, h: h, img_data: img})
  }

!!!
gl.texImage2D(this.type, 0, gl.RGBA, img.w, img.h, 0, gl.RGBA, gl.UNSIGNED_BYTE, img.img_data);

    function readString(length) {
      const str = buffer.slice(curPos, curPos + length).
        reduce((collect, ch) =>
          collect += ch == 0 ? "" : String.fromCharCode(ch), "");
      curPos += length;
      return str;
    }











    BOOL LS4_RndPrimLoad(LS4PRIM *Pr, CHAR *FileName)
{
  INT nv, nf;
  CHAR Buf[10000];
  FILE *F;


  memset(Pr, 0, sizeof(LS4PRIM));
  if ((F = fopen(FileName, "r")) == NULL)
    return FALSE;

  nv = nf = 0;
  while (fgets(Buf, sizeof(Buf), F) != NULL)
  {
    if (Buf[0] == 'v' && Buf[1] == ' ') 
      nv++;
    else if (Buf[0] == 'f' && Buf[1] == ' ')
    {
      INT n = 0;
      CHAR *ptr = Buf + 2, old= ' ';

      while (*ptr != 0)
        n += *ptr != ' ' && old == ' ', old = *ptr++;
      nf += n - 2;
    }
  }
  if (!LS4_RndPrimCreate(Pr, nv, nf * 3))
  {
    fclose(F);
    return FALSE;
  }

  rewind(F);
  nv = nf = 0;
  while (fgets(Buf, sizeof(Buf), F) != NULL)
  {
    if (Buf[0] == 'v' && Buf[1] == ' ')
    {
      DBL x, y, z;

      sscanf(Buf + 2, "%lf%lf%lf", &x, &y, &z);
      Pr->V[nv++].P = VecSet(x, y, z);
    }
    else if (Buf[0] =='f' && Buf[1] == ' ')
    {
      INT n = 0;
      CHAR *ptr = Buf + 2, old = ' ';
      INT c = 0, c1 = 0, c0 = 0;

      while (*ptr != 0)
      {
        if (*ptr != ' ' && old == ' ')
        {
          sscanf(ptr, "%d", &c);
          if (c < 0)
            c = nv + c;
          else
            c--;
        
          if (n == 0)
            c0 = c;
          else if (n == 1)
            c1 = c;
          else
          {
            /*triangle is completed*/
            Pr->I[nf++] = c0;
            Pr->I[nf++] = c1;
            Pr->I[nf++] = c;
            c1 = c;
          }
          n++;
        }
       old = *ptr++;
      }
    }
  }
  fclose(F);
  return TRUE;
}


async function loadG3DMModel(Pr, fileName) {
  try {
    const response = await fetch(fileName);
    const text = await response.text();
    const lines = text.split('\n');
    
    Pr.V = [];
    Pr.I = [];
    let nv = 0;
    let nf = 0;
    
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i].trim();
      
      if (line.startsWith('v ')) {
        const coords = line.split(/\s+/).slice(1).map(parseFloat);
        
        if (coords.length !== 3) {
          console.error(`Invalid vertex coordinates at line ${i + 1}`);
          return false;
        }
        
        Pr.V[nv++] = { P: { x: coords[0], y: coords[1], z: coords[2] } };
      } else if (line.startsWith('f ')) {
        const indices = line.split(/\s+/).slice(1).map(parseIndex);
        
        if (indices.length < 3) {
          console.error(`Invalid face definition at line ${i + 1}`);
          return false;
        }
        
        for (let j = 2; j < indices.length; j++) {
          Pr.I[nf++] = indices[0];
          Pr.I[nf++] = indices[j - 1];
          Pr.I[nf++] = indices[j];
        }
      }
    }
    
    return true;
  } catch (error) {
    console.error(`Error loading model from file: ${error}`);
    return false;
  }
}

function parseIndex(indexStr) {
  const index = parseInt(indexStr, 10);
  
  if (isNaN(index)) {
    throw new Error(`Invalid index: ${indexStr}`);
  }
  
  return index - 1;
}

